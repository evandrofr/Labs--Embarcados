
AFEC-Pin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046d8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004046d8  004046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  004046e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000018c  204009c0  004050a0  000209c0  2**2
                  ALLOC
  4 .stack        00002004  20400b4c  0040522c  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402b50  00407230  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   000174ca  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003027  00000000  00000000  00037f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000049a2  00000000  00000000  0003af38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a80  00000000  00000000  0003f8da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000aa0  00000000  00000000  0004035a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000209bc  00000000  00000000  00040dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c7bf  00000000  00000000  000617b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00092a7e  00000000  00000000  0006df75  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000022e4  00000000  00000000  001009f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 2b 40 20 c5 0f 40 00 c3 0f 40 00 c3 0f 40 00     P+@ ..@...@...@.
  400010:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c3 0f 40 00 c3 0f 40 00 00 00 00 00 c3 0f 40 00     ..@...@.......@.
  40003c:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00 c3 0f 40 00     ..@...@...@...@.
  40004c:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00 c3 0f 40 00     ..@...@...@...@.
  40005c:	c3 0f 40 00 c3 0f 40 00 00 00 00 00 e9 0c 40 00     ..@...@.......@.
  40006c:	fd 0c 40 00 11 0d 40 00 c3 0f 40 00 c3 0f 40 00     ..@...@...@...@.
  40007c:	c3 0f 40 00 25 0d 40 00 39 0d 40 00 c3 0f 40 00     ..@.%.@.9.@...@.
  40008c:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00 c3 0f 40 00     ..@...@...@...@.
  40009c:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00 c3 0f 40 00     ..@...@...@...@.
  4000ac:	c3 0f 40 00 c3 0f 40 00 35 09 40 00 c3 0f 40 00     ..@...@.5.@...@.
  4000bc:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00 c3 0f 40 00     ..@...@...@...@.
  4000cc:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00 c3 0f 40 00     ..@...@...@...@.
  4000dc:	c3 0f 40 00 49 09 40 00 c3 0f 40 00 c3 0f 40 00     ..@.I.@...@...@.
  4000ec:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00 c3 0f 40 00     ..@...@...@...@.
  4000fc:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00 c3 0f 40 00     ..@...@...@...@.
  40010c:	c3 0f 40 00 c3 0f 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c3 0f 40 00 c3 0f 40 00 c3 0f 40 00     ......@...@...@.
  40012c:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00 c3 0f 40 00     ..@...@...@...@.
  40013c:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00 c3 0f 40 00     ..@...@...@...@.
  40014c:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00 c3 0f 40 00     ..@...@...@...@.
  40015c:	c3 0f 40 00 c3 0f 40 00 c3 0f 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	004046e0 	.word	0x004046e0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004046e0 	.word	0x004046e0
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	004046e0 	.word	0x004046e0
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40020e:	480d      	ldr	r0, [pc, #52]	; (400244 <sysclk_init+0x70>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	07270e00 	.word	0x07270e00
  40021c:	00401199 	.word	0x00401199
  400220:	00400de9 	.word	0x00400de9
  400224:	00400e3d 	.word	0x00400e3d
  400228:	00400e4d 	.word	0x00400e4d
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00400e5d 	.word	0x00400e5d
  400238:	00400d4d 	.word	0x00400d4d
  40023c:	00400d85 	.word	0x00400d85
  400240:	0040108d 	.word	0x0040108d
  400244:	11e1a300 	.word	0x11e1a300

00400248 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40024c:	b980      	cbnz	r0, 400270 <_read+0x28>
  40024e:	460c      	mov	r4, r1
  400250:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400252:	2a00      	cmp	r2, #0
  400254:	dd0f      	ble.n	400276 <_read+0x2e>
  400256:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400258:	4e08      	ldr	r6, [pc, #32]	; (40027c <_read+0x34>)
  40025a:	4d09      	ldr	r5, [pc, #36]	; (400280 <_read+0x38>)
  40025c:	6830      	ldr	r0, [r6, #0]
  40025e:	4621      	mov	r1, r4
  400260:	682b      	ldr	r3, [r5, #0]
  400262:	4798      	blx	r3
		ptr++;
  400264:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400266:	42bc      	cmp	r4, r7
  400268:	d1f8      	bne.n	40025c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40026a:	4640      	mov	r0, r8
  40026c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400270:	f04f 38ff 	mov.w	r8, #4294967295
  400274:	e7f9      	b.n	40026a <_read+0x22>
	for (; len > 0; --len) {
  400276:	4680      	mov	r8, r0
  400278:	e7f7      	b.n	40026a <_read+0x22>
  40027a:	bf00      	nop
  40027c:	20400aa0 	.word	0x20400aa0
  400280:	20400a98 	.word	0x20400a98

00400284 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400284:	3801      	subs	r0, #1
  400286:	2802      	cmp	r0, #2
  400288:	d815      	bhi.n	4002b6 <_write+0x32>
{
  40028a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028e:	460e      	mov	r6, r1
  400290:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400292:	b19a      	cbz	r2, 4002bc <_write+0x38>
  400294:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400296:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002d0 <_write+0x4c>
  40029a:	4f0c      	ldr	r7, [pc, #48]	; (4002cc <_write+0x48>)
  40029c:	f8d8 0000 	ldr.w	r0, [r8]
  4002a0:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a4:	683b      	ldr	r3, [r7, #0]
  4002a6:	4798      	blx	r3
  4002a8:	2800      	cmp	r0, #0
  4002aa:	db0a      	blt.n	4002c2 <_write+0x3e>
  4002ac:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002ae:	3c01      	subs	r4, #1
  4002b0:	d1f4      	bne.n	40029c <_write+0x18>
  4002b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b6:	f04f 30ff 	mov.w	r0, #4294967295
  4002ba:	4770      	bx	lr
	for (; len != 0; --len) {
  4002bc:	4610      	mov	r0, r2
  4002be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002c2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002ca:	bf00      	nop
  4002cc:	20400a9c 	.word	0x20400a9c
  4002d0:	20400aa0 	.word	0x20400aa0

004002d4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002dc:	4bc9      	ldr	r3, [pc, #804]	; (400604 <board_init+0x330>)
  4002de:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002e4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002e8:	4bc7      	ldr	r3, [pc, #796]	; (400608 <board_init+0x334>)
  4002ea:	2200      	movs	r2, #0
  4002ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002f0:	695a      	ldr	r2, [r3, #20]
  4002f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4002f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002fc:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400300:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400304:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400308:	f007 0007 	and.w	r0, r7, #7
  40030c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40030e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400312:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400316:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40031a:	f3bf 8f4f 	dsb	sy
  40031e:	f04f 34ff 	mov.w	r4, #4294967295
  400322:	fa04 fc00 	lsl.w	ip, r4, r0
  400326:	fa06 f000 	lsl.w	r0, r6, r0
  40032a:	fa04 f40e 	lsl.w	r4, r4, lr
  40032e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400332:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400334:	463a      	mov	r2, r7
  400336:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400338:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40033c:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400340:	3a01      	subs	r2, #1
  400342:	4423      	add	r3, r4
  400344:	f1b2 3fff 	cmp.w	r2, #4294967295
  400348:	d1f6      	bne.n	400338 <board_init+0x64>
        } while(sets--);
  40034a:	3e01      	subs	r6, #1
  40034c:	4460      	add	r0, ip
  40034e:	f1b6 3fff 	cmp.w	r6, #4294967295
  400352:	d1ef      	bne.n	400334 <board_init+0x60>
  400354:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400358:	4bab      	ldr	r3, [pc, #684]	; (400608 <board_init+0x334>)
  40035a:	695a      	ldr	r2, [r3, #20]
  40035c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400360:	615a      	str	r2, [r3, #20]
  400362:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400366:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40036a:	4aa8      	ldr	r2, [pc, #672]	; (40060c <board_init+0x338>)
  40036c:	49a8      	ldr	r1, [pc, #672]	; (400610 <board_init+0x33c>)
  40036e:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400370:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400374:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400376:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40037a:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40037e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400382:	f022 0201 	bic.w	r2, r2, #1
  400386:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40038a:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40038e:	f022 0201 	bic.w	r2, r2, #1
  400392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400396:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40039a:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40039e:	200a      	movs	r0, #10
  4003a0:	4c9c      	ldr	r4, [pc, #624]	; (400614 <board_init+0x340>)
  4003a2:	47a0      	blx	r4
  4003a4:	200b      	movs	r0, #11
  4003a6:	47a0      	blx	r4
  4003a8:	200c      	movs	r0, #12
  4003aa:	47a0      	blx	r4
  4003ac:	2010      	movs	r0, #16
  4003ae:	47a0      	blx	r4
  4003b0:	2011      	movs	r0, #17
  4003b2:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003b4:	4f98      	ldr	r7, [pc, #608]	; (400618 <board_init+0x344>)
  4003b6:	f44f 7a80 	mov.w	sl, #256	; 0x100
  4003ba:	f8c7 a010 	str.w	sl, [r7, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003be:	f8c7 a0a0 	str.w	sl, [r7, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003c2:	f8c7 a030 	str.w	sl, [r7, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003c6:	4c95      	ldr	r4, [pc, #596]	; (40061c <board_init+0x348>)
  4003c8:	f44f 6600 	mov.w	r6, #2048	; 0x800
  4003cc:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003ce:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003d2:	6666      	str	r6, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003d4:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d8:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  4003da:	6226      	str	r6, [r4, #32]
		base->PIO_IFSCER = mask;
  4003dc:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4003e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4003e6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4003ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4003ee:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003f0:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003f4:	f8c4 60d4 	str.w	r6, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003f8:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400400:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400402:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400406:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400408:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40040a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40040e:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400410:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400414:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400416:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400418:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40041c:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40041e:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400420:	f8df 9210 	ldr.w	r9, [pc, #528]	; 400634 <board_init+0x360>
  400424:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
  400428:	f043 0310 	orr.w	r3, r3, #16
  40042c:	f8c9 3114 	str.w	r3, [r9, #276]	; 0x114
		base->PIO_PUDR = mask;
  400430:	4b7b      	ldr	r3, [pc, #492]	; (400620 <board_init+0x34c>)
  400432:	2510      	movs	r5, #16
  400434:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400436:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40043a:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40043c:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40043e:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400442:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400444:	432a      	orrs	r2, r5
  400446:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400448:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40044a:	432a      	orrs	r2, r5
  40044c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40044e:	605d      	str	r5, [r3, #4]
		base->PIO_PUDR = mask;
  400450:	2308      	movs	r3, #8
  400452:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400454:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400458:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40045a:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40045c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400460:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400462:	f022 0208 	bic.w	r2, r2, #8
  400466:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400468:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40046a:	f022 0208 	bic.w	r2, r2, #8
  40046e:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400470:	6063      	str	r3, [r4, #4]
		base->PIO_PUDR = mask;
  400472:	6625      	str	r5, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400474:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400478:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40047a:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40047c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400480:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400482:	f023 0310 	bic.w	r3, r3, #16
  400486:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400488:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40048a:	f023 0310 	bic.w	r3, r3, #16
  40048e:	6763      	str	r3, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400490:	6065      	str	r5, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400492:	2300      	movs	r3, #0
  400494:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400498:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40049c:	4638      	mov	r0, r7
  40049e:	f8df 8198 	ldr.w	r8, [pc, #408]	; 400638 <board_init+0x364>
  4004a2:	47c0      	blx	r8
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  4004a4:	2300      	movs	r3, #0
  4004a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4004aa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4004ae:	4638      	mov	r0, r7
  4004b0:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  4004b2:	2301      	movs	r3, #1
  4004b4:	22ff      	movs	r2, #255	; 0xff
  4004b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004ba:	4638      	mov	r0, r7
  4004bc:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  4004be:	2301      	movs	r3, #1
  4004c0:	223f      	movs	r2, #63	; 0x3f
  4004c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004c6:	4857      	ldr	r0, [pc, #348]	; (400624 <board_init+0x350>)
  4004c8:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  4004ca:	2301      	movs	r3, #1
  4004cc:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  4004d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004d4:	4620      	mov	r0, r4
  4004d6:	47c0      	blx	r8
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  4004d8:	2301      	movs	r3, #1
  4004da:	4652      	mov	r2, sl
  4004dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004e0:	4638      	mov	r0, r7
  4004e2:	47c0      	blx	r8
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  4004e4:	2301      	movs	r3, #1
  4004e6:	4632      	mov	r2, r6
  4004e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004ec:	4638      	mov	r0, r7
  4004ee:	47c0      	blx	r8
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  4004f0:	2301      	movs	r3, #1
  4004f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4004f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004fa:	484b      	ldr	r0, [pc, #300]	; (400628 <board_init+0x354>)
  4004fc:	47c0      	blx	r8
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  4004fe:	2300      	movs	r3, #0
  400500:	f44f 7200 	mov.w	r2, #512	; 0x200
  400504:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400508:	4638      	mov	r0, r7
  40050a:	47c0      	blx	r8
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  40050c:	f44f 7100 	mov.w	r1, #512	; 0x200
  400510:	4638      	mov	r0, r7
  400512:	4b46      	ldr	r3, [pc, #280]	; (40062c <board_init+0x358>)
  400514:	4798      	blx	r3
	ioport_set_pin_dir(USB_ID_PIN, IOPORT_DIR_INPUT);
# endif
#endif

#ifdef CONF_BOARD_SDRAMC
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  400516:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40051a:	2014      	movs	r0, #20
  40051c:	4c44      	ldr	r4, [pc, #272]	; (400630 <board_init+0x35c>)
  40051e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  400520:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400524:	2077      	movs	r0, #119	; 0x77
  400526:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  400528:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40052c:	206e      	movs	r0, #110	; 0x6e
  40052e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  400530:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400534:	204f      	movs	r0, #79	; 0x4f
  400536:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  400538:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40053c:	2070      	movs	r0, #112	; 0x70
  40053e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  400540:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400544:	2071      	movs	r0, #113	; 0x71
  400546:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  400548:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40054c:	207d      	movs	r0, #125	; 0x7d
  40054e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  400550:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400554:	2052      	movs	r0, #82	; 0x52
  400556:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  400558:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40055c:	206f      	movs	r0, #111	; 0x6f
  40055e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);  
  400560:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400564:	2054      	movs	r0, #84	; 0x54
  400566:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  
  400568:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40056c:	2055      	movs	r0, #85	; 0x55
  40056e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  
  400570:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400574:	2056      	movs	r0, #86	; 0x56
  400576:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  
  400578:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40057c:	2057      	movs	r0, #87	; 0x57
  40057e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  
  400580:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400584:	2058      	movs	r0, #88	; 0x58
  400586:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  
  400588:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40058c:	2059      	movs	r0, #89	; 0x59
  40058e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);  
  400590:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400594:	205a      	movs	r0, #90	; 0x5a
  400596:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  
  400598:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40059c:	205b      	movs	r0, #91	; 0x5b
  40059e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A10_PIO, SDRAM_A_FLAGS);  
  4005a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005a4:	205c      	movs	r0, #92	; 0x5c
  4005a6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A_FLAGS);  
  4005a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005ac:	205d      	movs	r0, #93	; 0x5d
  4005ae:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS);
  4005b0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4005b4:	206d      	movs	r0, #109	; 0x6d
  4005b6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);  
  4005b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005bc:	2040      	movs	r0, #64	; 0x40
  4005be:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);  
  4005c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005c4:	2041      	movs	r0, #65	; 0x41
  4005c6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);  
  4005c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005cc:	2042      	movs	r0, #66	; 0x42
  4005ce:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);  
  4005d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005d4:	2043      	movs	r0, #67	; 0x43
  4005d6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);  
  4005d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005dc:	2044      	movs	r0, #68	; 0x44
  4005de:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);  
  4005e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005e4:	2045      	movs	r0, #69	; 0x45
  4005e6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);  
  4005e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005ec:	2046      	movs	r0, #70	; 0x46
  4005ee:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);  
  4005f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005f4:	2047      	movs	r0, #71	; 0x47
  4005f6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);  
  4005f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005fc:	2080      	movs	r0, #128	; 0x80
  4005fe:	47a0      	blx	r4
  400600:	e01c      	b.n	40063c <board_init+0x368>
  400602:	bf00      	nop
  400604:	400e1850 	.word	0x400e1850
  400608:	e000ed00 	.word	0xe000ed00
  40060c:	400e0c00 	.word	0x400e0c00
  400610:	5a00080c 	.word	0x5a00080c
  400614:	00400e6d 	.word	0x00400e6d
  400618:	400e1200 	.word	0x400e1200
  40061c:	400e0e00 	.word	0x400e0e00
  400620:	400e1000 	.word	0x400e1000
  400624:	400e1600 	.word	0x400e1600
  400628:	400e1400 	.word	0x400e1400
  40062c:	004009c1 	.word	0x004009c1
  400630:	00400b69 	.word	0x00400b69
  400634:	40088000 	.word	0x40088000
  400638:	00400ab5 	.word	0x00400ab5
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);  
  40063c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400640:	2081      	movs	r0, #129	; 0x81
  400642:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS); 
  400644:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400648:	2082      	movs	r0, #130	; 0x82
  40064a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS); 
  40064c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400650:	2083      	movs	r0, #131	; 0x83
  400652:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS); 
  400654:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400658:	2084      	movs	r0, #132	; 0x84
  40065a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS); 
  40065c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400660:	2085      	movs	r0, #133	; 0x85
  400662:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS); 
  400664:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400668:	200f      	movs	r0, #15
  40066a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS); 
  40066c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400670:	4628      	mov	r0, r5
  400672:	47a0      	blx	r4
	
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  400674:	f8c9 5124 	str.w	r5, [r9, #292]	; 0x124
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400678:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40067c:	2074      	movs	r0, #116	; 0x74
  40067e:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400680:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400684:	2075      	movs	r0, #117	; 0x75
  400686:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400688:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40068c:	2076      	movs	r0, #118	; 0x76
  40068e:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400690:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400694:	207b      	movs	r0, #123	; 0x7b
  400696:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400698:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40069c:	2018      	movs	r0, #24
  40069e:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  4006a0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4006a4:	2006      	movs	r0, #6
  4006a6:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  4006a8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4006ac:	2053      	movs	r0, #83	; 0x53
  4006ae:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  4006b0:	2053      	movs	r0, #83	; 0x53
  4006b2:	4b02      	ldr	r3, [pc, #8]	; (4006bc <board_init+0x3e8>)
  4006b4:	4798      	blx	r3
  4006b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006ba:	bf00      	nop
  4006bc:	00400b4d 	.word	0x00400b4d

004006c0 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4006c0:	b570      	push	{r4, r5, r6, lr}
  4006c2:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4006c4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4006c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4006c8:	4013      	ands	r3, r2
  4006ca:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4006cc:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4006ce:	4e1c      	ldr	r6, [pc, #112]	; (400740 <afec_process_callback+0x80>)
  4006d0:	4d1c      	ldr	r5, [pc, #112]	; (400744 <afec_process_callback+0x84>)
  4006d2:	42a8      	cmp	r0, r5
  4006d4:	bf14      	ite	ne
  4006d6:	2000      	movne	r0, #0
  4006d8:	2001      	moveq	r0, #1
  4006da:	0105      	lsls	r5, r0, #4
  4006dc:	e00b      	b.n	4006f6 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4006de:	2c0e      	cmp	r4, #14
  4006e0:	d81e      	bhi.n	400720 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4006e2:	9a01      	ldr	r2, [sp, #4]
  4006e4:	f104 010c 	add.w	r1, r4, #12
  4006e8:	2301      	movs	r3, #1
  4006ea:	408b      	lsls	r3, r1
  4006ec:	4213      	tst	r3, r2
  4006ee:	d110      	bne.n	400712 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4006f0:	3401      	adds	r4, #1
  4006f2:	2c10      	cmp	r4, #16
  4006f4:	d022      	beq.n	40073c <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4006f6:	2c0b      	cmp	r4, #11
  4006f8:	d8f1      	bhi.n	4006de <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4006fa:	9a01      	ldr	r2, [sp, #4]
  4006fc:	2301      	movs	r3, #1
  4006fe:	40a3      	lsls	r3, r4
  400700:	4213      	tst	r3, r2
  400702:	d0f5      	beq.n	4006f0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400704:	192b      	adds	r3, r5, r4
  400706:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40070a:	2b00      	cmp	r3, #0
  40070c:	d0f0      	beq.n	4006f0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40070e:	4798      	blx	r3
  400710:	e7ee      	b.n	4006f0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400712:	192b      	adds	r3, r5, r4
  400714:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400718:	2b00      	cmp	r3, #0
  40071a:	d0e9      	beq.n	4006f0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40071c:	4798      	blx	r3
  40071e:	e7e7      	b.n	4006f0 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400720:	9a01      	ldr	r2, [sp, #4]
  400722:	f104 010f 	add.w	r1, r4, #15
  400726:	2301      	movs	r3, #1
  400728:	408b      	lsls	r3, r1
  40072a:	4213      	tst	r3, r2
  40072c:	d0e0      	beq.n	4006f0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40072e:	192b      	adds	r3, r5, r4
  400730:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400734:	2b00      	cmp	r3, #0
  400736:	d0db      	beq.n	4006f0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400738:	4798      	blx	r3
  40073a:	e7d9      	b.n	4006f0 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  40073c:	b002      	add	sp, #8
  40073e:	bd70      	pop	{r4, r5, r6, pc}
  400740:	20400aa4 	.word	0x20400aa4
  400744:	40064000 	.word	0x40064000

00400748 <afec_ch_set_config>:
{
  400748:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40074a:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  40074c:	2301      	movs	r3, #1
  40074e:	408b      	lsls	r3, r1
  400750:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400754:	7815      	ldrb	r5, [r2, #0]
  400756:	2d00      	cmp	r5, #0
  400758:	bf08      	it	eq
  40075a:	2300      	moveq	r3, #0
  40075c:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40075e:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400760:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400762:	004b      	lsls	r3, r1, #1
  400764:	2103      	movs	r1, #3
  400766:	4099      	lsls	r1, r3
  400768:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  40076c:	7851      	ldrb	r1, [r2, #1]
  40076e:	4099      	lsls	r1, r3
  400770:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400772:	6541      	str	r1, [r0, #84]	; 0x54
}
  400774:	bc30      	pop	{r4, r5}
  400776:	4770      	bx	lr

00400778 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400778:	784b      	ldrb	r3, [r1, #1]
  40077a:	780a      	ldrb	r2, [r1, #0]
  40077c:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  40077e:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  400780:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  400782:	884b      	ldrh	r3, [r1, #2]
  400784:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400788:	6743      	str	r3, [r0, #116]	; 0x74
  40078a:	4770      	bx	lr

0040078c <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  40078c:	2200      	movs	r2, #0
  40078e:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400790:	4b08      	ldr	r3, [pc, #32]	; (4007b4 <afec_get_config_defaults+0x28>)
  400792:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400794:	4b08      	ldr	r3, [pc, #32]	; (4007b8 <afec_get_config_defaults+0x2c>)
  400796:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400798:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  40079c:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40079e:	2302      	movs	r3, #2
  4007a0:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4007a2:	2301      	movs	r3, #1
  4007a4:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4007a6:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  4007a8:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  4007aa:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  4007ac:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  4007ae:	7583      	strb	r3, [r0, #22]
  4007b0:	4770      	bx	lr
  4007b2:	bf00      	nop
  4007b4:	11e1a300 	.word	0x11e1a300
  4007b8:	005b8d80 	.word	0x005b8d80

004007bc <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4007bc:	2300      	movs	r3, #0
  4007be:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4007c0:	2301      	movs	r3, #1
  4007c2:	7043      	strb	r3, [r0, #1]
  4007c4:	4770      	bx	lr

004007c6 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4007c6:	2300      	movs	r3, #0
  4007c8:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4007ca:	2320      	movs	r3, #32
  4007cc:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4007ce:	23ff      	movs	r3, #255	; 0xff
  4007d0:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4007d2:	f640 73ff 	movw	r3, #4095	; 0xfff
  4007d6:	8083      	strh	r3, [r0, #4]
  4007d8:	4770      	bx	lr
	...

004007dc <afec_init>:
	return afec->AFEC_ISR;
  4007dc:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4007de:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4007e2:	d001      	beq.n	4007e8 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4007e4:	2019      	movs	r0, #25
  4007e6:	4770      	bx	lr
{
  4007e8:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4007ea:	2301      	movs	r3, #1
  4007ec:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4007ee:	7ccb      	ldrb	r3, [r1, #19]
  4007f0:	2b00      	cmp	r3, #0
  4007f2:	bf18      	it	ne
  4007f4:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4007f8:	684b      	ldr	r3, [r1, #4]
  4007fa:	688c      	ldr	r4, [r1, #8]
  4007fc:	fbb3 f3f4 	udiv	r3, r3, r4
  400800:	3b01      	subs	r3, #1
  400802:	021b      	lsls	r3, r3, #8
  400804:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400806:	68cc      	ldr	r4, [r1, #12]
  400808:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  40080c:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  40080e:	7c0c      	ldrb	r4, [r1, #16]
  400810:	0624      	lsls	r4, r4, #24
  400812:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400816:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400818:	7c4c      	ldrb	r4, [r1, #17]
  40081a:	0724      	lsls	r4, r4, #28
  40081c:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400820:	4323      	orrs	r3, r4
  400822:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400824:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400826:	7d0b      	ldrb	r3, [r1, #20]
  400828:	2b00      	cmp	r3, #0
  40082a:	bf14      	ite	ne
  40082c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400830:	2300      	moveq	r3, #0
  400832:	680a      	ldr	r2, [r1, #0]
  400834:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400836:	7d4a      	ldrb	r2, [r1, #21]
  400838:	2a00      	cmp	r2, #0
  40083a:	bf14      	ite	ne
  40083c:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400840:	2200      	moveq	r2, #0
			(config->resolution) |
  400842:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400844:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400846:	7d8b      	ldrb	r3, [r1, #22]
  400848:	021b      	lsls	r3, r3, #8
  40084a:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40084e:	f043 030c 	orr.w	r3, r3, #12
  400852:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400856:	4b0f      	ldr	r3, [pc, #60]	; (400894 <afec_init+0xb8>)
  400858:	4298      	cmp	r0, r3
  40085a:	d006      	beq.n	40086a <afec_init+0x8e>
	if(afec == AFEC1) {
  40085c:	4b0e      	ldr	r3, [pc, #56]	; (400898 <afec_init+0xbc>)
  40085e:	4298      	cmp	r0, r3
  400860:	d00d      	beq.n	40087e <afec_init+0xa2>
	return STATUS_OK;
  400862:	2000      	movs	r0, #0
}
  400864:	f85d 4b04 	ldr.w	r4, [sp], #4
  400868:	4770      	bx	lr
  40086a:	4b0c      	ldr	r3, [pc, #48]	; (40089c <afec_init+0xc0>)
  40086c:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  400870:	2200      	movs	r2, #0
  400872:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400876:	428b      	cmp	r3, r1
  400878:	d1fb      	bne.n	400872 <afec_init+0x96>
	return STATUS_OK;
  40087a:	2000      	movs	r0, #0
  40087c:	e7f2      	b.n	400864 <afec_init+0x88>
  40087e:	4b08      	ldr	r3, [pc, #32]	; (4008a0 <afec_init+0xc4>)
  400880:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400884:	2200      	movs	r2, #0
  400886:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40088a:	428b      	cmp	r3, r1
  40088c:	d1fb      	bne.n	400886 <afec_init+0xaa>
	return STATUS_OK;
  40088e:	2000      	movs	r0, #0
  400890:	e7e8      	b.n	400864 <afec_init+0x88>
  400892:	bf00      	nop
  400894:	4003c000 	.word	0x4003c000
  400898:	40064000 	.word	0x40064000
  40089c:	20400aa0 	.word	0x20400aa0
  4008a0:	20400ae4 	.word	0x20400ae4

004008a4 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4008a4:	4b0c      	ldr	r3, [pc, #48]	; (4008d8 <afec_enable_interrupt+0x34>)
  4008a6:	4299      	cmp	r1, r3
  4008a8:	d007      	beq.n	4008ba <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4008aa:	290b      	cmp	r1, #11
  4008ac:	d80b      	bhi.n	4008c6 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  4008ae:	d006      	beq.n	4008be <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  4008b0:	2301      	movs	r3, #1
  4008b2:	fa03 f101 	lsl.w	r1, r3, r1
  4008b6:	6241      	str	r1, [r0, #36]	; 0x24
  4008b8:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4008ba:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4008bc:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4008be:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4008c2:	6243      	str	r3, [r0, #36]	; 0x24
  4008c4:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4008c6:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4008c8:	bf94      	ite	ls
  4008ca:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4008cc:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4008ce:	2301      	movs	r3, #1
  4008d0:	fa03 f101 	lsl.w	r1, r3, r1
  4008d4:	6241      	str	r1, [r0, #36]	; 0x24
  4008d6:	4770      	bx	lr
  4008d8:	47000fff 	.word	0x47000fff

004008dc <afec_set_callback>:
{
  4008dc:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4008de:	4c11      	ldr	r4, [pc, #68]	; (400924 <afec_set_callback+0x48>)
  4008e0:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4008e2:	bf0c      	ite	eq
  4008e4:	2410      	moveq	r4, #16
  4008e6:	2400      	movne	r4, #0
  4008e8:	440c      	add	r4, r1
  4008ea:	4d0f      	ldr	r5, [pc, #60]	; (400928 <afec_set_callback+0x4c>)
  4008ec:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4008f0:	d10a      	bne.n	400908 <afec_set_callback+0x2c>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4008f2:	4a0e      	ldr	r2, [pc, #56]	; (40092c <afec_set_callback+0x50>)
  4008f4:	f44f 7480 	mov.w	r4, #256	; 0x100
  4008f8:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4008fc:	015b      	lsls	r3, r3, #5
  4008fe:	b2db      	uxtb	r3, r3
  400900:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400904:	6054      	str	r4, [r2, #4]
  400906:	e009      	b.n	40091c <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400908:	4a08      	ldr	r2, [pc, #32]	; (40092c <afec_set_callback+0x50>)
  40090a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  40090e:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400912:	015b      	lsls	r3, r3, #5
  400914:	b2db      	uxtb	r3, r3
  400916:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40091a:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  40091c:	4b04      	ldr	r3, [pc, #16]	; (400930 <afec_set_callback+0x54>)
  40091e:	4798      	blx	r3
  400920:	bd38      	pop	{r3, r4, r5, pc}
  400922:	bf00      	nop
  400924:	40064000 	.word	0x40064000
  400928:	20400aa4 	.word	0x20400aa4
  40092c:	e000e100 	.word	0xe000e100
  400930:	004008a5 	.word	0x004008a5

00400934 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400934:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400936:	4802      	ldr	r0, [pc, #8]	; (400940 <AFEC0_Handler+0xc>)
  400938:	4b02      	ldr	r3, [pc, #8]	; (400944 <AFEC0_Handler+0x10>)
  40093a:	4798      	blx	r3
  40093c:	bd08      	pop	{r3, pc}
  40093e:	bf00      	nop
  400940:	4003c000 	.word	0x4003c000
  400944:	004006c1 	.word	0x004006c1

00400948 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400948:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40094a:	4802      	ldr	r0, [pc, #8]	; (400954 <AFEC1_Handler+0xc>)
  40094c:	4b02      	ldr	r3, [pc, #8]	; (400958 <AFEC1_Handler+0x10>)
  40094e:	4798      	blx	r3
  400950:	bd08      	pop	{r3, pc}
  400952:	bf00      	nop
  400954:	40064000 	.word	0x40064000
  400958:	004006c1 	.word	0x004006c1

0040095c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40095c:	b500      	push	{lr}
  40095e:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400960:	4b13      	ldr	r3, [pc, #76]	; (4009b0 <afec_enable+0x54>)
  400962:	4298      	cmp	r0, r3
  400964:	bf0c      	ite	eq
  400966:	2028      	moveq	r0, #40	; 0x28
  400968:	201d      	movne	r0, #29
  40096a:	4b12      	ldr	r3, [pc, #72]	; (4009b4 <afec_enable+0x58>)
  40096c:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40096e:	4b12      	ldr	r3, [pc, #72]	; (4009b8 <afec_enable+0x5c>)
  400970:	789b      	ldrb	r3, [r3, #2]
  400972:	2bff      	cmp	r3, #255	; 0xff
  400974:	d01a      	beq.n	4009ac <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400976:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40097a:	fab3 f383 	clz	r3, r3
  40097e:	095b      	lsrs	r3, r3, #5
  400980:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400982:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400984:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400988:	2200      	movs	r2, #0
  40098a:	4b0c      	ldr	r3, [pc, #48]	; (4009bc <afec_enable+0x60>)
  40098c:	701a      	strb	r2, [r3, #0]
	return flags;
  40098e:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400990:	4a09      	ldr	r2, [pc, #36]	; (4009b8 <afec_enable+0x5c>)
  400992:	7893      	ldrb	r3, [r2, #2]
  400994:	3301      	adds	r3, #1
  400996:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400998:	b129      	cbz	r1, 4009a6 <afec_enable+0x4a>
		cpu_irq_enable();
  40099a:	2201      	movs	r2, #1
  40099c:	4b07      	ldr	r3, [pc, #28]	; (4009bc <afec_enable+0x60>)
  40099e:	701a      	strb	r2, [r3, #0]
  4009a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009a4:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4009a6:	b003      	add	sp, #12
  4009a8:	f85d fb04 	ldr.w	pc, [sp], #4
  4009ac:	e7fe      	b.n	4009ac <afec_enable+0x50>
  4009ae:	bf00      	nop
  4009b0:	40064000 	.word	0x40064000
  4009b4:	00400e6d 	.word	0x00400e6d
  4009b8:	20400a90 	.word	0x20400a90
  4009bc:	2040000a 	.word	0x2040000a

004009c0 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4009c0:	6301      	str	r1, [r0, #48]	; 0x30
  4009c2:	4770      	bx	lr

004009c4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4009c4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4009c6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4009ca:	d03a      	beq.n	400a42 <pio_set_peripheral+0x7e>
  4009cc:	d813      	bhi.n	4009f6 <pio_set_peripheral+0x32>
  4009ce:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4009d2:	d025      	beq.n	400a20 <pio_set_peripheral+0x5c>
  4009d4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4009d8:	d10a      	bne.n	4009f0 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4009da:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4009dc:	4313      	orrs	r3, r2
  4009de:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4009e0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4009e2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4009e4:	400b      	ands	r3, r1
  4009e6:	ea23 0302 	bic.w	r3, r3, r2
  4009ea:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4009ec:	6042      	str	r2, [r0, #4]
  4009ee:	4770      	bx	lr
	switch (ul_type) {
  4009f0:	2900      	cmp	r1, #0
  4009f2:	d1fb      	bne.n	4009ec <pio_set_peripheral+0x28>
  4009f4:	4770      	bx	lr
  4009f6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4009fa:	d021      	beq.n	400a40 <pio_set_peripheral+0x7c>
  4009fc:	d809      	bhi.n	400a12 <pio_set_peripheral+0x4e>
  4009fe:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400a02:	d1f3      	bne.n	4009ec <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a04:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a06:	4313      	orrs	r3, r2
  400a08:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400a0a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a0c:	4313      	orrs	r3, r2
  400a0e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a10:	e7ec      	b.n	4009ec <pio_set_peripheral+0x28>
	switch (ul_type) {
  400a12:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400a16:	d013      	beq.n	400a40 <pio_set_peripheral+0x7c>
  400a18:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400a1c:	d010      	beq.n	400a40 <pio_set_peripheral+0x7c>
  400a1e:	e7e5      	b.n	4009ec <pio_set_peripheral+0x28>
{
  400a20:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a22:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a24:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400a26:	43d3      	mvns	r3, r2
  400a28:	4021      	ands	r1, r4
  400a2a:	461c      	mov	r4, r3
  400a2c:	4019      	ands	r1, r3
  400a2e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400a30:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a32:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400a34:	400b      	ands	r3, r1
  400a36:	4023      	ands	r3, r4
  400a38:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400a3a:	6042      	str	r2, [r0, #4]
}
  400a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a40:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a42:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a44:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400a46:	400b      	ands	r3, r1
  400a48:	ea23 0302 	bic.w	r3, r3, r2
  400a4c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400a4e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a50:	4313      	orrs	r3, r2
  400a52:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a54:	e7ca      	b.n	4009ec <pio_set_peripheral+0x28>

00400a56 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400a56:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400a58:	f012 0f01 	tst.w	r2, #1
  400a5c:	d10d      	bne.n	400a7a <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400a5e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400a60:	f012 0f0a 	tst.w	r2, #10
  400a64:	d00b      	beq.n	400a7e <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400a66:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400a68:	f012 0f02 	tst.w	r2, #2
  400a6c:	d109      	bne.n	400a82 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400a6e:	f012 0f08 	tst.w	r2, #8
  400a72:	d008      	beq.n	400a86 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400a74:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400a78:	e005      	b.n	400a86 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400a7a:	6641      	str	r1, [r0, #100]	; 0x64
  400a7c:	e7f0      	b.n	400a60 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400a7e:	6241      	str	r1, [r0, #36]	; 0x24
  400a80:	e7f2      	b.n	400a68 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400a82:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400a86:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400a88:	6001      	str	r1, [r0, #0]
  400a8a:	4770      	bx	lr

00400a8c <pio_set_output>:
{
  400a8c:	b410      	push	{r4}
  400a8e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400a90:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400a92:	b94c      	cbnz	r4, 400aa8 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400a94:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400a96:	b14b      	cbz	r3, 400aac <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400a98:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400a9a:	b94a      	cbnz	r2, 400ab0 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400a9c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400a9e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400aa0:	6001      	str	r1, [r0, #0]
}
  400aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400aa6:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400aa8:	6641      	str	r1, [r0, #100]	; 0x64
  400aaa:	e7f4      	b.n	400a96 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400aac:	6541      	str	r1, [r0, #84]	; 0x54
  400aae:	e7f4      	b.n	400a9a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400ab0:	6301      	str	r1, [r0, #48]	; 0x30
  400ab2:	e7f4      	b.n	400a9e <pio_set_output+0x12>

00400ab4 <pio_configure>:
{
  400ab4:	b570      	push	{r4, r5, r6, lr}
  400ab6:	b082      	sub	sp, #8
  400ab8:	4605      	mov	r5, r0
  400aba:	4616      	mov	r6, r2
  400abc:	461c      	mov	r4, r3
	switch (ul_type) {
  400abe:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400ac2:	d014      	beq.n	400aee <pio_configure+0x3a>
  400ac4:	d90a      	bls.n	400adc <pio_configure+0x28>
  400ac6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400aca:	d024      	beq.n	400b16 <pio_configure+0x62>
  400acc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400ad0:	d021      	beq.n	400b16 <pio_configure+0x62>
  400ad2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400ad6:	d017      	beq.n	400b08 <pio_configure+0x54>
		return 0;
  400ad8:	2000      	movs	r0, #0
  400ada:	e01a      	b.n	400b12 <pio_configure+0x5e>
	switch (ul_type) {
  400adc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400ae0:	d005      	beq.n	400aee <pio_configure+0x3a>
  400ae2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400ae6:	d002      	beq.n	400aee <pio_configure+0x3a>
  400ae8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400aec:	d1f4      	bne.n	400ad8 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400aee:	4632      	mov	r2, r6
  400af0:	4628      	mov	r0, r5
  400af2:	4b11      	ldr	r3, [pc, #68]	; (400b38 <pio_configure+0x84>)
  400af4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400af6:	f014 0f01 	tst.w	r4, #1
  400afa:	d102      	bne.n	400b02 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400afc:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400afe:	2001      	movs	r0, #1
  400b00:	e007      	b.n	400b12 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400b02:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400b04:	2001      	movs	r0, #1
  400b06:	e004      	b.n	400b12 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400b08:	461a      	mov	r2, r3
  400b0a:	4631      	mov	r1, r6
  400b0c:	4b0b      	ldr	r3, [pc, #44]	; (400b3c <pio_configure+0x88>)
  400b0e:	4798      	blx	r3
	return 1;
  400b10:	2001      	movs	r0, #1
}
  400b12:	b002      	add	sp, #8
  400b14:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400b16:	f004 0301 	and.w	r3, r4, #1
  400b1a:	9300      	str	r3, [sp, #0]
  400b1c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400b20:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400b24:	bf14      	ite	ne
  400b26:	2200      	movne	r2, #0
  400b28:	2201      	moveq	r2, #1
  400b2a:	4631      	mov	r1, r6
  400b2c:	4628      	mov	r0, r5
  400b2e:	4c04      	ldr	r4, [pc, #16]	; (400b40 <pio_configure+0x8c>)
  400b30:	47a0      	blx	r4
	return 1;
  400b32:	2001      	movs	r0, #1
		break;
  400b34:	e7ed      	b.n	400b12 <pio_configure+0x5e>
  400b36:	bf00      	nop
  400b38:	004009c5 	.word	0x004009c5
  400b3c:	00400a57 	.word	0x00400a57
  400b40:	00400a8d 	.word	0x00400a8d

00400b44 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400b44:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400b46:	4770      	bx	lr

00400b48 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400b48:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400b4a:	4770      	bx	lr

00400b4c <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400b4c:	4b05      	ldr	r3, [pc, #20]	; (400b64 <pio_set_pin_high+0x18>)
  400b4e:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  400b52:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400b54:	f000 001f 	and.w	r0, r0, #31
  400b58:	2201      	movs	r2, #1
  400b5a:	fa02 f000 	lsl.w	r0, r2, r0
  400b5e:	6318      	str	r0, [r3, #48]	; 0x30
  400b60:	4770      	bx	lr
  400b62:	bf00      	nop
  400b64:	00200707 	.word	0x00200707

00400b68 <pio_configure_pin>:
{
  400b68:	b570      	push	{r4, r5, r6, lr}
  400b6a:	b082      	sub	sp, #8
  400b6c:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400b6e:	4c46      	ldr	r4, [pc, #280]	; (400c88 <pio_configure_pin+0x120>)
  400b70:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  400b74:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  400b76:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400b7e:	d059      	beq.n	400c34 <pio_configure_pin+0xcc>
  400b80:	d80a      	bhi.n	400b98 <pio_configure_pin+0x30>
  400b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400b86:	d02f      	beq.n	400be8 <pio_configure_pin+0x80>
  400b88:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400b8c:	d03f      	beq.n	400c0e <pio_configure_pin+0xa6>
  400b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400b92:	d016      	beq.n	400bc2 <pio_configure_pin+0x5a>
		return 0;
  400b94:	2000      	movs	r0, #0
  400b96:	e012      	b.n	400bbe <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  400b98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400b9c:	d05d      	beq.n	400c5a <pio_configure_pin+0xf2>
  400b9e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400ba2:	d05a      	beq.n	400c5a <pio_configure_pin+0xf2>
  400ba4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400ba8:	d1f4      	bne.n	400b94 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400baa:	f000 011f 	and.w	r1, r0, #31
  400bae:	2601      	movs	r6, #1
  400bb0:	462a      	mov	r2, r5
  400bb2:	fa06 f101 	lsl.w	r1, r6, r1
  400bb6:	4620      	mov	r0, r4
  400bb8:	4b34      	ldr	r3, [pc, #208]	; (400c8c <pio_configure_pin+0x124>)
  400bba:	4798      	blx	r3
	return 1;
  400bbc:	4630      	mov	r0, r6
}
  400bbe:	b002      	add	sp, #8
  400bc0:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400bc2:	f000 001f 	and.w	r0, r0, #31
  400bc6:	2601      	movs	r6, #1
  400bc8:	4086      	lsls	r6, r0
  400bca:	4632      	mov	r2, r6
  400bcc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bd0:	4620      	mov	r0, r4
  400bd2:	4b2f      	ldr	r3, [pc, #188]	; (400c90 <pio_configure_pin+0x128>)
  400bd4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400bd6:	f015 0f01 	tst.w	r5, #1
  400bda:	d102      	bne.n	400be2 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  400bdc:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400bde:	2001      	movs	r0, #1
  400be0:	e7ed      	b.n	400bbe <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400be2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400be4:	2001      	movs	r0, #1
  400be6:	e7ea      	b.n	400bbe <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400be8:	f000 001f 	and.w	r0, r0, #31
  400bec:	2601      	movs	r6, #1
  400bee:	4086      	lsls	r6, r0
  400bf0:	4632      	mov	r2, r6
  400bf2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bf6:	4620      	mov	r0, r4
  400bf8:	4b25      	ldr	r3, [pc, #148]	; (400c90 <pio_configure_pin+0x128>)
  400bfa:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400bfc:	f015 0f01 	tst.w	r5, #1
  400c00:	d102      	bne.n	400c08 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  400c02:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400c04:	2001      	movs	r0, #1
  400c06:	e7da      	b.n	400bbe <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400c08:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400c0a:	2001      	movs	r0, #1
  400c0c:	e7d7      	b.n	400bbe <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400c0e:	f000 001f 	and.w	r0, r0, #31
  400c12:	2601      	movs	r6, #1
  400c14:	4086      	lsls	r6, r0
  400c16:	4632      	mov	r2, r6
  400c18:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400c1c:	4620      	mov	r0, r4
  400c1e:	4b1c      	ldr	r3, [pc, #112]	; (400c90 <pio_configure_pin+0x128>)
  400c20:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400c22:	f015 0f01 	tst.w	r5, #1
  400c26:	d102      	bne.n	400c2e <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  400c28:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400c2a:	2001      	movs	r0, #1
  400c2c:	e7c7      	b.n	400bbe <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400c2e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400c30:	2001      	movs	r0, #1
  400c32:	e7c4      	b.n	400bbe <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400c34:	f000 001f 	and.w	r0, r0, #31
  400c38:	2601      	movs	r6, #1
  400c3a:	4086      	lsls	r6, r0
  400c3c:	4632      	mov	r2, r6
  400c3e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400c42:	4620      	mov	r0, r4
  400c44:	4b12      	ldr	r3, [pc, #72]	; (400c90 <pio_configure_pin+0x128>)
  400c46:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400c48:	f015 0f01 	tst.w	r5, #1
  400c4c:	d102      	bne.n	400c54 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  400c4e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400c50:	2001      	movs	r0, #1
  400c52:	e7b4      	b.n	400bbe <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400c54:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400c56:	2001      	movs	r0, #1
  400c58:	e7b1      	b.n	400bbe <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400c5a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400c5e:	f000 011f 	and.w	r1, r0, #31
  400c62:	2601      	movs	r6, #1
  400c64:	ea05 0306 	and.w	r3, r5, r6
  400c68:	9300      	str	r3, [sp, #0]
  400c6a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400c6e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400c72:	bf14      	ite	ne
  400c74:	2200      	movne	r2, #0
  400c76:	2201      	moveq	r2, #1
  400c78:	fa06 f101 	lsl.w	r1, r6, r1
  400c7c:	4620      	mov	r0, r4
  400c7e:	4c05      	ldr	r4, [pc, #20]	; (400c94 <pio_configure_pin+0x12c>)
  400c80:	47a0      	blx	r4
	return 1;
  400c82:	4630      	mov	r0, r6
		break;
  400c84:	e79b      	b.n	400bbe <pio_configure_pin+0x56>
  400c86:	bf00      	nop
  400c88:	00200707 	.word	0x00200707
  400c8c:	00400a57 	.word	0x00400a57
  400c90:	004009c5 	.word	0x004009c5
  400c94:	00400a8d 	.word	0x00400a8d

00400c98 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c9c:	4604      	mov	r4, r0
  400c9e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400ca0:	4b0e      	ldr	r3, [pc, #56]	; (400cdc <pio_handler_process+0x44>)
  400ca2:	4798      	blx	r3
  400ca4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400ca6:	4620      	mov	r0, r4
  400ca8:	4b0d      	ldr	r3, [pc, #52]	; (400ce0 <pio_handler_process+0x48>)
  400caa:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400cac:	4005      	ands	r5, r0
  400cae:	d013      	beq.n	400cd8 <pio_handler_process+0x40>
  400cb0:	4c0c      	ldr	r4, [pc, #48]	; (400ce4 <pio_handler_process+0x4c>)
  400cb2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400cb6:	e003      	b.n	400cc0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400cb8:	42b4      	cmp	r4, r6
  400cba:	d00d      	beq.n	400cd8 <pio_handler_process+0x40>
  400cbc:	3410      	adds	r4, #16
		while (status != 0) {
  400cbe:	b15d      	cbz	r5, 400cd8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400cc0:	6820      	ldr	r0, [r4, #0]
  400cc2:	4540      	cmp	r0, r8
  400cc4:	d1f8      	bne.n	400cb8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400cc6:	6861      	ldr	r1, [r4, #4]
  400cc8:	4229      	tst	r1, r5
  400cca:	d0f5      	beq.n	400cb8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400ccc:	68e3      	ldr	r3, [r4, #12]
  400cce:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400cd0:	6863      	ldr	r3, [r4, #4]
  400cd2:	ea25 0503 	bic.w	r5, r5, r3
  400cd6:	e7ef      	b.n	400cb8 <pio_handler_process+0x20>
  400cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cdc:	00400b45 	.word	0x00400b45
  400ce0:	00400b49 	.word	0x00400b49
  400ce4:	204009dc 	.word	0x204009dc

00400ce8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400ce8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400cea:	210a      	movs	r1, #10
  400cec:	4801      	ldr	r0, [pc, #4]	; (400cf4 <PIOA_Handler+0xc>)
  400cee:	4b02      	ldr	r3, [pc, #8]	; (400cf8 <PIOA_Handler+0x10>)
  400cf0:	4798      	blx	r3
  400cf2:	bd08      	pop	{r3, pc}
  400cf4:	400e0e00 	.word	0x400e0e00
  400cf8:	00400c99 	.word	0x00400c99

00400cfc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400cfc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400cfe:	210b      	movs	r1, #11
  400d00:	4801      	ldr	r0, [pc, #4]	; (400d08 <PIOB_Handler+0xc>)
  400d02:	4b02      	ldr	r3, [pc, #8]	; (400d0c <PIOB_Handler+0x10>)
  400d04:	4798      	blx	r3
  400d06:	bd08      	pop	{r3, pc}
  400d08:	400e1000 	.word	0x400e1000
  400d0c:	00400c99 	.word	0x00400c99

00400d10 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400d10:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400d12:	210c      	movs	r1, #12
  400d14:	4801      	ldr	r0, [pc, #4]	; (400d1c <PIOC_Handler+0xc>)
  400d16:	4b02      	ldr	r3, [pc, #8]	; (400d20 <PIOC_Handler+0x10>)
  400d18:	4798      	blx	r3
  400d1a:	bd08      	pop	{r3, pc}
  400d1c:	400e1200 	.word	0x400e1200
  400d20:	00400c99 	.word	0x00400c99

00400d24 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400d24:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400d26:	2110      	movs	r1, #16
  400d28:	4801      	ldr	r0, [pc, #4]	; (400d30 <PIOD_Handler+0xc>)
  400d2a:	4b02      	ldr	r3, [pc, #8]	; (400d34 <PIOD_Handler+0x10>)
  400d2c:	4798      	blx	r3
  400d2e:	bd08      	pop	{r3, pc}
  400d30:	400e1400 	.word	0x400e1400
  400d34:	00400c99 	.word	0x00400c99

00400d38 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400d38:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400d3a:	2111      	movs	r1, #17
  400d3c:	4801      	ldr	r0, [pc, #4]	; (400d44 <PIOE_Handler+0xc>)
  400d3e:	4b02      	ldr	r3, [pc, #8]	; (400d48 <PIOE_Handler+0x10>)
  400d40:	4798      	blx	r3
  400d42:	bd08      	pop	{r3, pc}
  400d44:	400e1600 	.word	0x400e1600
  400d48:	00400c99 	.word	0x00400c99

00400d4c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400d4c:	2803      	cmp	r0, #3
  400d4e:	d011      	beq.n	400d74 <pmc_mck_set_division+0x28>
  400d50:	2804      	cmp	r0, #4
  400d52:	d012      	beq.n	400d7a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400d54:	2802      	cmp	r0, #2
  400d56:	bf0c      	ite	eq
  400d58:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400d5c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400d5e:	4a08      	ldr	r2, [pc, #32]	; (400d80 <pmc_mck_set_division+0x34>)
  400d60:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400d66:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400d68:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400d6a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d6c:	f013 0f08 	tst.w	r3, #8
  400d70:	d0fb      	beq.n	400d6a <pmc_mck_set_division+0x1e>
}
  400d72:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400d74:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400d78:	e7f1      	b.n	400d5e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400d7a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400d7e:	e7ee      	b.n	400d5e <pmc_mck_set_division+0x12>
  400d80:	400e0600 	.word	0x400e0600

00400d84 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400d84:	4a17      	ldr	r2, [pc, #92]	; (400de4 <pmc_switch_mck_to_pllack+0x60>)
  400d86:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400d8c:	4318      	orrs	r0, r3
  400d8e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d90:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d92:	f013 0f08 	tst.w	r3, #8
  400d96:	d10a      	bne.n	400dae <pmc_switch_mck_to_pllack+0x2a>
  400d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400d9c:	4911      	ldr	r1, [pc, #68]	; (400de4 <pmc_switch_mck_to_pllack+0x60>)
  400d9e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400da0:	f012 0f08 	tst.w	r2, #8
  400da4:	d103      	bne.n	400dae <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400da6:	3b01      	subs	r3, #1
  400da8:	d1f9      	bne.n	400d9e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400daa:	2001      	movs	r0, #1
  400dac:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400dae:	4a0d      	ldr	r2, [pc, #52]	; (400de4 <pmc_switch_mck_to_pllack+0x60>)
  400db0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400db2:	f023 0303 	bic.w	r3, r3, #3
  400db6:	f043 0302 	orr.w	r3, r3, #2
  400dba:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400dbc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dbe:	f013 0f08 	tst.w	r3, #8
  400dc2:	d10a      	bne.n	400dda <pmc_switch_mck_to_pllack+0x56>
  400dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400dc8:	4906      	ldr	r1, [pc, #24]	; (400de4 <pmc_switch_mck_to_pllack+0x60>)
  400dca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400dcc:	f012 0f08 	tst.w	r2, #8
  400dd0:	d105      	bne.n	400dde <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400dd2:	3b01      	subs	r3, #1
  400dd4:	d1f9      	bne.n	400dca <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400dd6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400dd8:	4770      	bx	lr
	return 0;
  400dda:	2000      	movs	r0, #0
  400ddc:	4770      	bx	lr
  400dde:	2000      	movs	r0, #0
  400de0:	4770      	bx	lr
  400de2:	bf00      	nop
  400de4:	400e0600 	.word	0x400e0600

00400de8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400de8:	b9a0      	cbnz	r0, 400e14 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dea:	480e      	ldr	r0, [pc, #56]	; (400e24 <pmc_switch_mainck_to_xtal+0x3c>)
  400dec:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400dee:	0209      	lsls	r1, r1, #8
  400df0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400df2:	4a0d      	ldr	r2, [pc, #52]	; (400e28 <pmc_switch_mainck_to_xtal+0x40>)
  400df4:	401a      	ands	r2, r3
  400df6:	4b0d      	ldr	r3, [pc, #52]	; (400e2c <pmc_switch_mainck_to_xtal+0x44>)
  400df8:	4313      	orrs	r3, r2
  400dfa:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400dfc:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400dfe:	4602      	mov	r2, r0
  400e00:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e02:	f013 0f01 	tst.w	r3, #1
  400e06:	d0fb      	beq.n	400e00 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e08:	4a06      	ldr	r2, [pc, #24]	; (400e24 <pmc_switch_mainck_to_xtal+0x3c>)
  400e0a:	6a11      	ldr	r1, [r2, #32]
  400e0c:	4b08      	ldr	r3, [pc, #32]	; (400e30 <pmc_switch_mainck_to_xtal+0x48>)
  400e0e:	430b      	orrs	r3, r1
  400e10:	6213      	str	r3, [r2, #32]
  400e12:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e14:	4903      	ldr	r1, [pc, #12]	; (400e24 <pmc_switch_mainck_to_xtal+0x3c>)
  400e16:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e18:	4a06      	ldr	r2, [pc, #24]	; (400e34 <pmc_switch_mainck_to_xtal+0x4c>)
  400e1a:	401a      	ands	r2, r3
  400e1c:	4b06      	ldr	r3, [pc, #24]	; (400e38 <pmc_switch_mainck_to_xtal+0x50>)
  400e1e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e20:	620b      	str	r3, [r1, #32]
  400e22:	4770      	bx	lr
  400e24:	400e0600 	.word	0x400e0600
  400e28:	ffc8fffc 	.word	0xffc8fffc
  400e2c:	00370001 	.word	0x00370001
  400e30:	01370000 	.word	0x01370000
  400e34:	fec8fffc 	.word	0xfec8fffc
  400e38:	01370002 	.word	0x01370002

00400e3c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e3c:	4b02      	ldr	r3, [pc, #8]	; (400e48 <pmc_osc_is_ready_mainck+0xc>)
  400e3e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e40:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e44:	4770      	bx	lr
  400e46:	bf00      	nop
  400e48:	400e0600 	.word	0x400e0600

00400e4c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e50:	4b01      	ldr	r3, [pc, #4]	; (400e58 <pmc_disable_pllack+0xc>)
  400e52:	629a      	str	r2, [r3, #40]	; 0x28
  400e54:	4770      	bx	lr
  400e56:	bf00      	nop
  400e58:	400e0600 	.word	0x400e0600

00400e5c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400e5c:	4b02      	ldr	r3, [pc, #8]	; (400e68 <pmc_is_locked_pllack+0xc>)
  400e5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e60:	f000 0002 	and.w	r0, r0, #2
  400e64:	4770      	bx	lr
  400e66:	bf00      	nop
  400e68:	400e0600 	.word	0x400e0600

00400e6c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400e6c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400e70:	4b05      	ldr	r3, [pc, #20]	; (400e88 <pmc_enable_periph_clk+0x1c>)
  400e72:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400e76:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400e7a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400e7e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400e82:	2000      	movs	r0, #0
  400e84:	4770      	bx	lr
  400e86:	bf00      	nop
  400e88:	400e0600 	.word	0x400e0600

00400e8c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400e8c:	6943      	ldr	r3, [r0, #20]
  400e8e:	f013 0f02 	tst.w	r3, #2
  400e92:	d002      	beq.n	400e9a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400e94:	61c1      	str	r1, [r0, #28]
	return 0;
  400e96:	2000      	movs	r0, #0
  400e98:	4770      	bx	lr
		return 1;
  400e9a:	2001      	movs	r0, #1
}
  400e9c:	4770      	bx	lr

00400e9e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400e9e:	6943      	ldr	r3, [r0, #20]
  400ea0:	f013 0f01 	tst.w	r3, #1
  400ea4:	d003      	beq.n	400eae <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400ea6:	6983      	ldr	r3, [r0, #24]
  400ea8:	700b      	strb	r3, [r1, #0]
	return 0;
  400eaa:	2000      	movs	r0, #0
  400eac:	4770      	bx	lr
		return 1;
  400eae:	2001      	movs	r0, #1
}
  400eb0:	4770      	bx	lr

00400eb2 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400eb2:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400eb4:	010b      	lsls	r3, r1, #4
  400eb6:	4293      	cmp	r3, r2
  400eb8:	d914      	bls.n	400ee4 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400eba:	00c9      	lsls	r1, r1, #3
  400ebc:	084b      	lsrs	r3, r1, #1
  400ebe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400ec2:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400ec6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400ec8:	1e5c      	subs	r4, r3, #1
  400eca:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400ece:	428c      	cmp	r4, r1
  400ed0:	d901      	bls.n	400ed6 <usart_set_async_baudrate+0x24>
		return 1;
  400ed2:	2001      	movs	r0, #1
  400ed4:	e017      	b.n	400f06 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400ed6:	6841      	ldr	r1, [r0, #4]
  400ed8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400edc:	6041      	str	r1, [r0, #4]
  400ede:	e00c      	b.n	400efa <usart_set_async_baudrate+0x48>
		return 1;
  400ee0:	2001      	movs	r0, #1
  400ee2:	e010      	b.n	400f06 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400ee4:	0859      	lsrs	r1, r3, #1
  400ee6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400eea:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400eee:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400ef0:	1e5c      	subs	r4, r3, #1
  400ef2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400ef6:	428c      	cmp	r4, r1
  400ef8:	d8f2      	bhi.n	400ee0 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400efa:	0412      	lsls	r2, r2, #16
  400efc:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400f00:	431a      	orrs	r2, r3
  400f02:	6202      	str	r2, [r0, #32]

	return 0;
  400f04:	2000      	movs	r0, #0
}
  400f06:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f0a:	4770      	bx	lr

00400f0c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400f0c:	4b08      	ldr	r3, [pc, #32]	; (400f30 <usart_reset+0x24>)
  400f0e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400f12:	2300      	movs	r3, #0
  400f14:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400f16:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400f18:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400f1a:	2388      	movs	r3, #136	; 0x88
  400f1c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400f1e:	2324      	movs	r3, #36	; 0x24
  400f20:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400f22:	f44f 7380 	mov.w	r3, #256	; 0x100
  400f26:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400f28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400f2c:	6003      	str	r3, [r0, #0]
  400f2e:	4770      	bx	lr
  400f30:	55534100 	.word	0x55534100

00400f34 <usart_init_rs232>:
{
  400f34:	b570      	push	{r4, r5, r6, lr}
  400f36:	4605      	mov	r5, r0
  400f38:	460c      	mov	r4, r1
  400f3a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400f3c:	4b0f      	ldr	r3, [pc, #60]	; (400f7c <usart_init_rs232+0x48>)
  400f3e:	4798      	blx	r3
	ul_reg_val = 0;
  400f40:	2200      	movs	r2, #0
  400f42:	4b0f      	ldr	r3, [pc, #60]	; (400f80 <usart_init_rs232+0x4c>)
  400f44:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400f46:	b1a4      	cbz	r4, 400f72 <usart_init_rs232+0x3e>
  400f48:	4632      	mov	r2, r6
  400f4a:	6821      	ldr	r1, [r4, #0]
  400f4c:	4628      	mov	r0, r5
  400f4e:	4b0d      	ldr	r3, [pc, #52]	; (400f84 <usart_init_rs232+0x50>)
  400f50:	4798      	blx	r3
  400f52:	4602      	mov	r2, r0
  400f54:	b978      	cbnz	r0, 400f76 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400f56:	6863      	ldr	r3, [r4, #4]
  400f58:	68a1      	ldr	r1, [r4, #8]
  400f5a:	430b      	orrs	r3, r1
  400f5c:	6921      	ldr	r1, [r4, #16]
  400f5e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400f60:	68e1      	ldr	r1, [r4, #12]
  400f62:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400f64:	4906      	ldr	r1, [pc, #24]	; (400f80 <usart_init_rs232+0x4c>)
  400f66:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400f68:	6869      	ldr	r1, [r5, #4]
  400f6a:	430b      	orrs	r3, r1
  400f6c:	606b      	str	r3, [r5, #4]
}
  400f6e:	4610      	mov	r0, r2
  400f70:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400f72:	2201      	movs	r2, #1
  400f74:	e7fb      	b.n	400f6e <usart_init_rs232+0x3a>
  400f76:	2201      	movs	r2, #1
  400f78:	e7f9      	b.n	400f6e <usart_init_rs232+0x3a>
  400f7a:	bf00      	nop
  400f7c:	00400f0d 	.word	0x00400f0d
  400f80:	20400a4c 	.word	0x20400a4c
  400f84:	00400eb3 	.word	0x00400eb3

00400f88 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400f88:	2340      	movs	r3, #64	; 0x40
  400f8a:	6003      	str	r3, [r0, #0]
  400f8c:	4770      	bx	lr

00400f8e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400f8e:	2310      	movs	r3, #16
  400f90:	6003      	str	r3, [r0, #0]
  400f92:	4770      	bx	lr

00400f94 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400f94:	6943      	ldr	r3, [r0, #20]
  400f96:	f013 0f02 	tst.w	r3, #2
  400f9a:	d004      	beq.n	400fa6 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400f9c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400fa0:	61c1      	str	r1, [r0, #28]
	return 0;
  400fa2:	2000      	movs	r0, #0
  400fa4:	4770      	bx	lr
		return 1;
  400fa6:	2001      	movs	r0, #1
}
  400fa8:	4770      	bx	lr

00400faa <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400faa:	6943      	ldr	r3, [r0, #20]
  400fac:	f013 0f01 	tst.w	r3, #1
  400fb0:	d005      	beq.n	400fbe <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400fb2:	6983      	ldr	r3, [r0, #24]
  400fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400fb8:	600b      	str	r3, [r1, #0]
	return 0;
  400fba:	2000      	movs	r0, #0
  400fbc:	4770      	bx	lr
		return 1;
  400fbe:	2001      	movs	r0, #1
}
  400fc0:	4770      	bx	lr

00400fc2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400fc2:	e7fe      	b.n	400fc2 <Dummy_Handler>

00400fc4 <Reset_Handler>:
{
  400fc4:	b500      	push	{lr}
  400fc6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400fc8:	4b25      	ldr	r3, [pc, #148]	; (401060 <Reset_Handler+0x9c>)
  400fca:	4a26      	ldr	r2, [pc, #152]	; (401064 <Reset_Handler+0xa0>)
  400fcc:	429a      	cmp	r2, r3
  400fce:	d010      	beq.n	400ff2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400fd0:	4b25      	ldr	r3, [pc, #148]	; (401068 <Reset_Handler+0xa4>)
  400fd2:	4a23      	ldr	r2, [pc, #140]	; (401060 <Reset_Handler+0x9c>)
  400fd4:	429a      	cmp	r2, r3
  400fd6:	d20c      	bcs.n	400ff2 <Reset_Handler+0x2e>
  400fd8:	3b01      	subs	r3, #1
  400fda:	1a9b      	subs	r3, r3, r2
  400fdc:	f023 0303 	bic.w	r3, r3, #3
  400fe0:	3304      	adds	r3, #4
  400fe2:	4413      	add	r3, r2
  400fe4:	491f      	ldr	r1, [pc, #124]	; (401064 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400fe6:	f851 0b04 	ldr.w	r0, [r1], #4
  400fea:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400fee:	429a      	cmp	r2, r3
  400ff0:	d1f9      	bne.n	400fe6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400ff2:	4b1e      	ldr	r3, [pc, #120]	; (40106c <Reset_Handler+0xa8>)
  400ff4:	4a1e      	ldr	r2, [pc, #120]	; (401070 <Reset_Handler+0xac>)
  400ff6:	429a      	cmp	r2, r3
  400ff8:	d20a      	bcs.n	401010 <Reset_Handler+0x4c>
  400ffa:	3b01      	subs	r3, #1
  400ffc:	1a9b      	subs	r3, r3, r2
  400ffe:	f023 0303 	bic.w	r3, r3, #3
  401002:	3304      	adds	r3, #4
  401004:	4413      	add	r3, r2
                *pDest++ = 0;
  401006:	2100      	movs	r1, #0
  401008:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40100c:	4293      	cmp	r3, r2
  40100e:	d1fb      	bne.n	401008 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401010:	4a18      	ldr	r2, [pc, #96]	; (401074 <Reset_Handler+0xb0>)
  401012:	4b19      	ldr	r3, [pc, #100]	; (401078 <Reset_Handler+0xb4>)
  401014:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401018:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40101a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40101e:	fab3 f383 	clz	r3, r3
  401022:	095b      	lsrs	r3, r3, #5
  401024:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401026:	b672      	cpsid	i
  401028:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40102c:	2200      	movs	r2, #0
  40102e:	4b13      	ldr	r3, [pc, #76]	; (40107c <Reset_Handler+0xb8>)
  401030:	701a      	strb	r2, [r3, #0]
	return flags;
  401032:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401034:	4a12      	ldr	r2, [pc, #72]	; (401080 <Reset_Handler+0xbc>)
  401036:	6813      	ldr	r3, [r2, #0]
  401038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40103c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40103e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401042:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  401046:	b129      	cbz	r1, 401054 <Reset_Handler+0x90>
		cpu_irq_enable();
  401048:	2201      	movs	r2, #1
  40104a:	4b0c      	ldr	r3, [pc, #48]	; (40107c <Reset_Handler+0xb8>)
  40104c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40104e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401052:	b662      	cpsie	i
        __libc_init_array();
  401054:	4b0b      	ldr	r3, [pc, #44]	; (401084 <Reset_Handler+0xc0>)
  401056:	4798      	blx	r3
        main();
  401058:	4b0b      	ldr	r3, [pc, #44]	; (401088 <Reset_Handler+0xc4>)
  40105a:	4798      	blx	r3
  40105c:	e7fe      	b.n	40105c <Reset_Handler+0x98>
  40105e:	bf00      	nop
  401060:	20400000 	.word	0x20400000
  401064:	004046e0 	.word	0x004046e0
  401068:	204009c0 	.word	0x204009c0
  40106c:	20400b4c 	.word	0x20400b4c
  401070:	204009c0 	.word	0x204009c0
  401074:	e000ed00 	.word	0xe000ed00
  401078:	00400000 	.word	0x00400000
  40107c:	2040000a 	.word	0x2040000a
  401080:	e000ed88 	.word	0xe000ed88
  401084:	004015b9 	.word	0x004015b9
  401088:	00401445 	.word	0x00401445

0040108c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40108c:	4b3b      	ldr	r3, [pc, #236]	; (40117c <SystemCoreClockUpdate+0xf0>)
  40108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401090:	f003 0303 	and.w	r3, r3, #3
  401094:	2b01      	cmp	r3, #1
  401096:	d01d      	beq.n	4010d4 <SystemCoreClockUpdate+0x48>
  401098:	b183      	cbz	r3, 4010bc <SystemCoreClockUpdate+0x30>
  40109a:	2b02      	cmp	r3, #2
  40109c:	d036      	beq.n	40110c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40109e:	4b37      	ldr	r3, [pc, #220]	; (40117c <SystemCoreClockUpdate+0xf0>)
  4010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010a6:	2b70      	cmp	r3, #112	; 0x70
  4010a8:	d05f      	beq.n	40116a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4010aa:	4b34      	ldr	r3, [pc, #208]	; (40117c <SystemCoreClockUpdate+0xf0>)
  4010ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4010ae:	4934      	ldr	r1, [pc, #208]	; (401180 <SystemCoreClockUpdate+0xf4>)
  4010b0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4010b4:	680b      	ldr	r3, [r1, #0]
  4010b6:	40d3      	lsrs	r3, r2
  4010b8:	600b      	str	r3, [r1, #0]
  4010ba:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4010bc:	4b31      	ldr	r3, [pc, #196]	; (401184 <SystemCoreClockUpdate+0xf8>)
  4010be:	695b      	ldr	r3, [r3, #20]
  4010c0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4010c4:	bf14      	ite	ne
  4010c6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4010ca:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4010ce:	4b2c      	ldr	r3, [pc, #176]	; (401180 <SystemCoreClockUpdate+0xf4>)
  4010d0:	601a      	str	r2, [r3, #0]
  4010d2:	e7e4      	b.n	40109e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4010d4:	4b29      	ldr	r3, [pc, #164]	; (40117c <SystemCoreClockUpdate+0xf0>)
  4010d6:	6a1b      	ldr	r3, [r3, #32]
  4010d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4010dc:	d003      	beq.n	4010e6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4010de:	4a2a      	ldr	r2, [pc, #168]	; (401188 <SystemCoreClockUpdate+0xfc>)
  4010e0:	4b27      	ldr	r3, [pc, #156]	; (401180 <SystemCoreClockUpdate+0xf4>)
  4010e2:	601a      	str	r2, [r3, #0]
  4010e4:	e7db      	b.n	40109e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4010e6:	4a29      	ldr	r2, [pc, #164]	; (40118c <SystemCoreClockUpdate+0x100>)
  4010e8:	4b25      	ldr	r3, [pc, #148]	; (401180 <SystemCoreClockUpdate+0xf4>)
  4010ea:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4010ec:	4b23      	ldr	r3, [pc, #140]	; (40117c <SystemCoreClockUpdate+0xf0>)
  4010ee:	6a1b      	ldr	r3, [r3, #32]
  4010f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010f4:	2b10      	cmp	r3, #16
  4010f6:	d005      	beq.n	401104 <SystemCoreClockUpdate+0x78>
  4010f8:	2b20      	cmp	r3, #32
  4010fa:	d1d0      	bne.n	40109e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4010fc:	4a22      	ldr	r2, [pc, #136]	; (401188 <SystemCoreClockUpdate+0xfc>)
  4010fe:	4b20      	ldr	r3, [pc, #128]	; (401180 <SystemCoreClockUpdate+0xf4>)
  401100:	601a      	str	r2, [r3, #0]
          break;
  401102:	e7cc      	b.n	40109e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401104:	4a22      	ldr	r2, [pc, #136]	; (401190 <SystemCoreClockUpdate+0x104>)
  401106:	4b1e      	ldr	r3, [pc, #120]	; (401180 <SystemCoreClockUpdate+0xf4>)
  401108:	601a      	str	r2, [r3, #0]
          break;
  40110a:	e7c8      	b.n	40109e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40110c:	4b1b      	ldr	r3, [pc, #108]	; (40117c <SystemCoreClockUpdate+0xf0>)
  40110e:	6a1b      	ldr	r3, [r3, #32]
  401110:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401114:	d016      	beq.n	401144 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401116:	4a1c      	ldr	r2, [pc, #112]	; (401188 <SystemCoreClockUpdate+0xfc>)
  401118:	4b19      	ldr	r3, [pc, #100]	; (401180 <SystemCoreClockUpdate+0xf4>)
  40111a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40111c:	4b17      	ldr	r3, [pc, #92]	; (40117c <SystemCoreClockUpdate+0xf0>)
  40111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401120:	f003 0303 	and.w	r3, r3, #3
  401124:	2b02      	cmp	r3, #2
  401126:	d1ba      	bne.n	40109e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401128:	4a14      	ldr	r2, [pc, #80]	; (40117c <SystemCoreClockUpdate+0xf0>)
  40112a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40112c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40112e:	4814      	ldr	r0, [pc, #80]	; (401180 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401130:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401134:	6803      	ldr	r3, [r0, #0]
  401136:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40113a:	b2d2      	uxtb	r2, r2
  40113c:	fbb3 f3f2 	udiv	r3, r3, r2
  401140:	6003      	str	r3, [r0, #0]
  401142:	e7ac      	b.n	40109e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401144:	4a11      	ldr	r2, [pc, #68]	; (40118c <SystemCoreClockUpdate+0x100>)
  401146:	4b0e      	ldr	r3, [pc, #56]	; (401180 <SystemCoreClockUpdate+0xf4>)
  401148:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40114a:	4b0c      	ldr	r3, [pc, #48]	; (40117c <SystemCoreClockUpdate+0xf0>)
  40114c:	6a1b      	ldr	r3, [r3, #32]
  40114e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401152:	2b10      	cmp	r3, #16
  401154:	d005      	beq.n	401162 <SystemCoreClockUpdate+0xd6>
  401156:	2b20      	cmp	r3, #32
  401158:	d1e0      	bne.n	40111c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40115a:	4a0b      	ldr	r2, [pc, #44]	; (401188 <SystemCoreClockUpdate+0xfc>)
  40115c:	4b08      	ldr	r3, [pc, #32]	; (401180 <SystemCoreClockUpdate+0xf4>)
  40115e:	601a      	str	r2, [r3, #0]
          break;
  401160:	e7dc      	b.n	40111c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401162:	4a0b      	ldr	r2, [pc, #44]	; (401190 <SystemCoreClockUpdate+0x104>)
  401164:	4b06      	ldr	r3, [pc, #24]	; (401180 <SystemCoreClockUpdate+0xf4>)
  401166:	601a      	str	r2, [r3, #0]
          break;
  401168:	e7d8      	b.n	40111c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40116a:	4a05      	ldr	r2, [pc, #20]	; (401180 <SystemCoreClockUpdate+0xf4>)
  40116c:	6813      	ldr	r3, [r2, #0]
  40116e:	4909      	ldr	r1, [pc, #36]	; (401194 <SystemCoreClockUpdate+0x108>)
  401170:	fba1 1303 	umull	r1, r3, r1, r3
  401174:	085b      	lsrs	r3, r3, #1
  401176:	6013      	str	r3, [r2, #0]
  401178:	4770      	bx	lr
  40117a:	bf00      	nop
  40117c:	400e0600 	.word	0x400e0600
  401180:	2040000c 	.word	0x2040000c
  401184:	400e1810 	.word	0x400e1810
  401188:	00b71b00 	.word	0x00b71b00
  40118c:	003d0900 	.word	0x003d0900
  401190:	007a1200 	.word	0x007a1200
  401194:	aaaaaaab 	.word	0xaaaaaaab

00401198 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401198:	4b16      	ldr	r3, [pc, #88]	; (4011f4 <system_init_flash+0x5c>)
  40119a:	4298      	cmp	r0, r3
  40119c:	d913      	bls.n	4011c6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40119e:	4b16      	ldr	r3, [pc, #88]	; (4011f8 <system_init_flash+0x60>)
  4011a0:	4298      	cmp	r0, r3
  4011a2:	d915      	bls.n	4011d0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4011a4:	4b15      	ldr	r3, [pc, #84]	; (4011fc <system_init_flash+0x64>)
  4011a6:	4298      	cmp	r0, r3
  4011a8:	d916      	bls.n	4011d8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4011aa:	4b15      	ldr	r3, [pc, #84]	; (401200 <system_init_flash+0x68>)
  4011ac:	4298      	cmp	r0, r3
  4011ae:	d917      	bls.n	4011e0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4011b0:	4b14      	ldr	r3, [pc, #80]	; (401204 <system_init_flash+0x6c>)
  4011b2:	4298      	cmp	r0, r3
  4011b4:	d918      	bls.n	4011e8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4011b6:	4b14      	ldr	r3, [pc, #80]	; (401208 <system_init_flash+0x70>)
  4011b8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4011ba:	bf94      	ite	ls
  4011bc:	4a13      	ldrls	r2, [pc, #76]	; (40120c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4011be:	4a14      	ldrhi	r2, [pc, #80]	; (401210 <system_init_flash+0x78>)
  4011c0:	4b14      	ldr	r3, [pc, #80]	; (401214 <system_init_flash+0x7c>)
  4011c2:	601a      	str	r2, [r3, #0]
  4011c4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4011c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4011ca:	4b12      	ldr	r3, [pc, #72]	; (401214 <system_init_flash+0x7c>)
  4011cc:	601a      	str	r2, [r3, #0]
  4011ce:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4011d0:	4a11      	ldr	r2, [pc, #68]	; (401218 <system_init_flash+0x80>)
  4011d2:	4b10      	ldr	r3, [pc, #64]	; (401214 <system_init_flash+0x7c>)
  4011d4:	601a      	str	r2, [r3, #0]
  4011d6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4011d8:	4a10      	ldr	r2, [pc, #64]	; (40121c <system_init_flash+0x84>)
  4011da:	4b0e      	ldr	r3, [pc, #56]	; (401214 <system_init_flash+0x7c>)
  4011dc:	601a      	str	r2, [r3, #0]
  4011de:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4011e0:	4a0f      	ldr	r2, [pc, #60]	; (401220 <system_init_flash+0x88>)
  4011e2:	4b0c      	ldr	r3, [pc, #48]	; (401214 <system_init_flash+0x7c>)
  4011e4:	601a      	str	r2, [r3, #0]
  4011e6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4011e8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4011ec:	4b09      	ldr	r3, [pc, #36]	; (401214 <system_init_flash+0x7c>)
  4011ee:	601a      	str	r2, [r3, #0]
  4011f0:	4770      	bx	lr
  4011f2:	bf00      	nop
  4011f4:	015ef3bf 	.word	0x015ef3bf
  4011f8:	02bde77f 	.word	0x02bde77f
  4011fc:	041cdb3f 	.word	0x041cdb3f
  401200:	057bceff 	.word	0x057bceff
  401204:	06dac2bf 	.word	0x06dac2bf
  401208:	0839b67f 	.word	0x0839b67f
  40120c:	04000500 	.word	0x04000500
  401210:	04000600 	.word	0x04000600
  401214:	400e0c00 	.word	0x400e0c00
  401218:	04000100 	.word	0x04000100
  40121c:	04000200 	.word	0x04000200
  401220:	04000300 	.word	0x04000300

00401224 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401224:	4b0a      	ldr	r3, [pc, #40]	; (401250 <_sbrk+0x2c>)
  401226:	681b      	ldr	r3, [r3, #0]
  401228:	b153      	cbz	r3, 401240 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40122a:	4b09      	ldr	r3, [pc, #36]	; (401250 <_sbrk+0x2c>)
  40122c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40122e:	181a      	adds	r2, r3, r0
  401230:	4908      	ldr	r1, [pc, #32]	; (401254 <_sbrk+0x30>)
  401232:	4291      	cmp	r1, r2
  401234:	db08      	blt.n	401248 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401236:	4610      	mov	r0, r2
  401238:	4a05      	ldr	r2, [pc, #20]	; (401250 <_sbrk+0x2c>)
  40123a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40123c:	4618      	mov	r0, r3
  40123e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401240:	4a05      	ldr	r2, [pc, #20]	; (401258 <_sbrk+0x34>)
  401242:	4b03      	ldr	r3, [pc, #12]	; (401250 <_sbrk+0x2c>)
  401244:	601a      	str	r2, [r3, #0]
  401246:	e7f0      	b.n	40122a <_sbrk+0x6>
		return (caddr_t) -1;	
  401248:	f04f 30ff 	mov.w	r0, #4294967295
}
  40124c:	4770      	bx	lr
  40124e:	bf00      	nop
  401250:	20400a50 	.word	0x20400a50
  401254:	2045fffc 	.word	0x2045fffc
  401258:	20402d50 	.word	0x20402d50

0040125c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40125c:	f04f 30ff 	mov.w	r0, #4294967295
  401260:	4770      	bx	lr

00401262 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401266:	604b      	str	r3, [r1, #4]

	return 0;
}
  401268:	2000      	movs	r0, #0
  40126a:	4770      	bx	lr

0040126c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40126c:	2001      	movs	r0, #1
  40126e:	4770      	bx	lr

00401270 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401270:	2000      	movs	r0, #0
  401272:	4770      	bx	lr

00401274 <AFEC_pot_Callback>:
	afec->AFEC_CSELR = afec_ch;
  401274:	4b04      	ldr	r3, [pc, #16]	; (401288 <AFEC_pot_Callback+0x14>)
  401276:	2200      	movs	r2, #0
  401278:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  40127a:	6e9a      	ldr	r2, [r3, #104]	; 0x68

/**
* \brief AFEC interrupt callback function.
*/
static void AFEC_pot_Callback(void){
  g_ul_value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  40127c:	4b03      	ldr	r3, [pc, #12]	; (40128c <AFEC_pot_Callback+0x18>)
  40127e:	601a      	str	r2, [r3, #0]
  g_is_conversion_done = true;
  401280:	2201      	movs	r2, #1
  401282:	4b03      	ldr	r3, [pc, #12]	; (401290 <AFEC_pot_Callback+0x1c>)
  401284:	701a      	strb	r2, [r3, #0]
  401286:	4770      	bx	lr
  401288:	4003c000 	.word	0x4003c000
  40128c:	20400a58 	.word	0x20400a58
  401290:	20400a54 	.word	0x20400a54

00401294 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401294:	b5f0      	push	{r4, r5, r6, r7, lr}
  401296:	b083      	sub	sp, #12
  401298:	4605      	mov	r5, r0
  40129a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40129c:	2300      	movs	r3, #0
  40129e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4012a0:	4b2a      	ldr	r3, [pc, #168]	; (40134c <usart_serial_getchar+0xb8>)
  4012a2:	4298      	cmp	r0, r3
  4012a4:	d013      	beq.n	4012ce <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4012a6:	4b2a      	ldr	r3, [pc, #168]	; (401350 <usart_serial_getchar+0xbc>)
  4012a8:	4298      	cmp	r0, r3
  4012aa:	d018      	beq.n	4012de <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4012ac:	4b29      	ldr	r3, [pc, #164]	; (401354 <usart_serial_getchar+0xc0>)
  4012ae:	4298      	cmp	r0, r3
  4012b0:	d01d      	beq.n	4012ee <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4012b2:	4b29      	ldr	r3, [pc, #164]	; (401358 <usart_serial_getchar+0xc4>)
  4012b4:	429d      	cmp	r5, r3
  4012b6:	d022      	beq.n	4012fe <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4012b8:	4b28      	ldr	r3, [pc, #160]	; (40135c <usart_serial_getchar+0xc8>)
  4012ba:	429d      	cmp	r5, r3
  4012bc:	d027      	beq.n	40130e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4012be:	4b28      	ldr	r3, [pc, #160]	; (401360 <usart_serial_getchar+0xcc>)
  4012c0:	429d      	cmp	r5, r3
  4012c2:	d02e      	beq.n	401322 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4012c4:	4b27      	ldr	r3, [pc, #156]	; (401364 <usart_serial_getchar+0xd0>)
  4012c6:	429d      	cmp	r5, r3
  4012c8:	d035      	beq.n	401336 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4012ca:	b003      	add	sp, #12
  4012cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4012ce:	461f      	mov	r7, r3
  4012d0:	4e25      	ldr	r6, [pc, #148]	; (401368 <usart_serial_getchar+0xd4>)
  4012d2:	4621      	mov	r1, r4
  4012d4:	4638      	mov	r0, r7
  4012d6:	47b0      	blx	r6
  4012d8:	2800      	cmp	r0, #0
  4012da:	d1fa      	bne.n	4012d2 <usart_serial_getchar+0x3e>
  4012dc:	e7e9      	b.n	4012b2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4012de:	461f      	mov	r7, r3
  4012e0:	4e21      	ldr	r6, [pc, #132]	; (401368 <usart_serial_getchar+0xd4>)
  4012e2:	4621      	mov	r1, r4
  4012e4:	4638      	mov	r0, r7
  4012e6:	47b0      	blx	r6
  4012e8:	2800      	cmp	r0, #0
  4012ea:	d1fa      	bne.n	4012e2 <usart_serial_getchar+0x4e>
  4012ec:	e7e4      	b.n	4012b8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4012ee:	461f      	mov	r7, r3
  4012f0:	4e1d      	ldr	r6, [pc, #116]	; (401368 <usart_serial_getchar+0xd4>)
  4012f2:	4621      	mov	r1, r4
  4012f4:	4638      	mov	r0, r7
  4012f6:	47b0      	blx	r6
  4012f8:	2800      	cmp	r0, #0
  4012fa:	d1fa      	bne.n	4012f2 <usart_serial_getchar+0x5e>
  4012fc:	e7df      	b.n	4012be <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4012fe:	461f      	mov	r7, r3
  401300:	4e19      	ldr	r6, [pc, #100]	; (401368 <usart_serial_getchar+0xd4>)
  401302:	4621      	mov	r1, r4
  401304:	4638      	mov	r0, r7
  401306:	47b0      	blx	r6
  401308:	2800      	cmp	r0, #0
  40130a:	d1fa      	bne.n	401302 <usart_serial_getchar+0x6e>
  40130c:	e7da      	b.n	4012c4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40130e:	461e      	mov	r6, r3
  401310:	4d16      	ldr	r5, [pc, #88]	; (40136c <usart_serial_getchar+0xd8>)
  401312:	a901      	add	r1, sp, #4
  401314:	4630      	mov	r0, r6
  401316:	47a8      	blx	r5
  401318:	2800      	cmp	r0, #0
  40131a:	d1fa      	bne.n	401312 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40131c:	9b01      	ldr	r3, [sp, #4]
  40131e:	7023      	strb	r3, [r4, #0]
  401320:	e7d3      	b.n	4012ca <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  401322:	461e      	mov	r6, r3
  401324:	4d11      	ldr	r5, [pc, #68]	; (40136c <usart_serial_getchar+0xd8>)
  401326:	a901      	add	r1, sp, #4
  401328:	4630      	mov	r0, r6
  40132a:	47a8      	blx	r5
  40132c:	2800      	cmp	r0, #0
  40132e:	d1fa      	bne.n	401326 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  401330:	9b01      	ldr	r3, [sp, #4]
  401332:	7023      	strb	r3, [r4, #0]
  401334:	e7c9      	b.n	4012ca <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  401336:	461e      	mov	r6, r3
  401338:	4d0c      	ldr	r5, [pc, #48]	; (40136c <usart_serial_getchar+0xd8>)
  40133a:	a901      	add	r1, sp, #4
  40133c:	4630      	mov	r0, r6
  40133e:	47a8      	blx	r5
  401340:	2800      	cmp	r0, #0
  401342:	d1fa      	bne.n	40133a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  401344:	9b01      	ldr	r3, [sp, #4]
  401346:	7023      	strb	r3, [r4, #0]
}
  401348:	e7bf      	b.n	4012ca <usart_serial_getchar+0x36>
  40134a:	bf00      	nop
  40134c:	400e0800 	.word	0x400e0800
  401350:	400e0a00 	.word	0x400e0a00
  401354:	400e1a00 	.word	0x400e1a00
  401358:	400e1c00 	.word	0x400e1c00
  40135c:	40024000 	.word	0x40024000
  401360:	40028000 	.word	0x40028000
  401364:	4002c000 	.word	0x4002c000
  401368:	00400e9f 	.word	0x00400e9f
  40136c:	00400fab 	.word	0x00400fab

00401370 <usart_serial_putchar>:
{
  401370:	b570      	push	{r4, r5, r6, lr}
  401372:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  401374:	4b2a      	ldr	r3, [pc, #168]	; (401420 <usart_serial_putchar+0xb0>)
  401376:	4298      	cmp	r0, r3
  401378:	d013      	beq.n	4013a2 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40137a:	4b2a      	ldr	r3, [pc, #168]	; (401424 <usart_serial_putchar+0xb4>)
  40137c:	4298      	cmp	r0, r3
  40137e:	d019      	beq.n	4013b4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  401380:	4b29      	ldr	r3, [pc, #164]	; (401428 <usart_serial_putchar+0xb8>)
  401382:	4298      	cmp	r0, r3
  401384:	d01f      	beq.n	4013c6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  401386:	4b29      	ldr	r3, [pc, #164]	; (40142c <usart_serial_putchar+0xbc>)
  401388:	4298      	cmp	r0, r3
  40138a:	d025      	beq.n	4013d8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  40138c:	4b28      	ldr	r3, [pc, #160]	; (401430 <usart_serial_putchar+0xc0>)
  40138e:	4298      	cmp	r0, r3
  401390:	d02b      	beq.n	4013ea <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  401392:	4b28      	ldr	r3, [pc, #160]	; (401434 <usart_serial_putchar+0xc4>)
  401394:	4298      	cmp	r0, r3
  401396:	d031      	beq.n	4013fc <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  401398:	4b27      	ldr	r3, [pc, #156]	; (401438 <usart_serial_putchar+0xc8>)
  40139a:	4298      	cmp	r0, r3
  40139c:	d037      	beq.n	40140e <usart_serial_putchar+0x9e>
	return 0;
  40139e:	2000      	movs	r0, #0
}
  4013a0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4013a2:	461e      	mov	r6, r3
  4013a4:	4d25      	ldr	r5, [pc, #148]	; (40143c <usart_serial_putchar+0xcc>)
  4013a6:	4621      	mov	r1, r4
  4013a8:	4630      	mov	r0, r6
  4013aa:	47a8      	blx	r5
  4013ac:	2800      	cmp	r0, #0
  4013ae:	d1fa      	bne.n	4013a6 <usart_serial_putchar+0x36>
		return 1;
  4013b0:	2001      	movs	r0, #1
  4013b2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4013b4:	461e      	mov	r6, r3
  4013b6:	4d21      	ldr	r5, [pc, #132]	; (40143c <usart_serial_putchar+0xcc>)
  4013b8:	4621      	mov	r1, r4
  4013ba:	4630      	mov	r0, r6
  4013bc:	47a8      	blx	r5
  4013be:	2800      	cmp	r0, #0
  4013c0:	d1fa      	bne.n	4013b8 <usart_serial_putchar+0x48>
		return 1;
  4013c2:	2001      	movs	r0, #1
  4013c4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4013c6:	461e      	mov	r6, r3
  4013c8:	4d1c      	ldr	r5, [pc, #112]	; (40143c <usart_serial_putchar+0xcc>)
  4013ca:	4621      	mov	r1, r4
  4013cc:	4630      	mov	r0, r6
  4013ce:	47a8      	blx	r5
  4013d0:	2800      	cmp	r0, #0
  4013d2:	d1fa      	bne.n	4013ca <usart_serial_putchar+0x5a>
		return 1;
  4013d4:	2001      	movs	r0, #1
  4013d6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4013d8:	461e      	mov	r6, r3
  4013da:	4d18      	ldr	r5, [pc, #96]	; (40143c <usart_serial_putchar+0xcc>)
  4013dc:	4621      	mov	r1, r4
  4013de:	4630      	mov	r0, r6
  4013e0:	47a8      	blx	r5
  4013e2:	2800      	cmp	r0, #0
  4013e4:	d1fa      	bne.n	4013dc <usart_serial_putchar+0x6c>
		return 1;
  4013e6:	2001      	movs	r0, #1
  4013e8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4013ea:	461e      	mov	r6, r3
  4013ec:	4d14      	ldr	r5, [pc, #80]	; (401440 <usart_serial_putchar+0xd0>)
  4013ee:	4621      	mov	r1, r4
  4013f0:	4630      	mov	r0, r6
  4013f2:	47a8      	blx	r5
  4013f4:	2800      	cmp	r0, #0
  4013f6:	d1fa      	bne.n	4013ee <usart_serial_putchar+0x7e>
		return 1;
  4013f8:	2001      	movs	r0, #1
  4013fa:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4013fc:	461e      	mov	r6, r3
  4013fe:	4d10      	ldr	r5, [pc, #64]	; (401440 <usart_serial_putchar+0xd0>)
  401400:	4621      	mov	r1, r4
  401402:	4630      	mov	r0, r6
  401404:	47a8      	blx	r5
  401406:	2800      	cmp	r0, #0
  401408:	d1fa      	bne.n	401400 <usart_serial_putchar+0x90>
		return 1;
  40140a:	2001      	movs	r0, #1
  40140c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40140e:	461e      	mov	r6, r3
  401410:	4d0b      	ldr	r5, [pc, #44]	; (401440 <usart_serial_putchar+0xd0>)
  401412:	4621      	mov	r1, r4
  401414:	4630      	mov	r0, r6
  401416:	47a8      	blx	r5
  401418:	2800      	cmp	r0, #0
  40141a:	d1fa      	bne.n	401412 <usart_serial_putchar+0xa2>
		return 1;
  40141c:	2001      	movs	r0, #1
  40141e:	bd70      	pop	{r4, r5, r6, pc}
  401420:	400e0800 	.word	0x400e0800
  401424:	400e0a00 	.word	0x400e0a00
  401428:	400e1a00 	.word	0x400e1a00
  40142c:	400e1c00 	.word	0x400e1c00
  401430:	40024000 	.word	0x40024000
  401434:	40028000 	.word	0x40028000
  401438:	4002c000 	.word	0x4002c000
  40143c:	00400e8d 	.word	0x00400e8d
  401440:	00400f95 	.word	0x00400f95

00401444 <main>:
/************************************************************************/
/* Main                                                                 */
/************************************************************************/

int main(void)
{
  401444:	b500      	push	{lr}
  401446:	b08b      	sub	sp, #44	; 0x2c
    .paritytype   = CONF_UART_PARITY,
    .stopbits     = CONF_UART_STOP_BITS
  };
  
  /* Initialize the SAM system. */
  sysclk_init(); /* Initialize system clocks */
  401448:	4b3b      	ldr	r3, [pc, #236]	; (401538 <main+0xf4>)
  40144a:	4798      	blx	r3
  board_init();  /* Initialize board */
  40144c:	4b3b      	ldr	r3, [pc, #236]	; (40153c <main+0xf8>)
  40144e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401450:	4c3b      	ldr	r4, [pc, #236]	; (401540 <main+0xfc>)
  401452:	4b3c      	ldr	r3, [pc, #240]	; (401544 <main+0x100>)
  401454:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401456:	4a3c      	ldr	r2, [pc, #240]	; (401548 <main+0x104>)
  401458:	4b3c      	ldr	r3, [pc, #240]	; (40154c <main+0x108>)
  40145a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40145c:	4a3c      	ldr	r2, [pc, #240]	; (401550 <main+0x10c>)
  40145e:	4b3d      	ldr	r3, [pc, #244]	; (401554 <main+0x110>)
  401460:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  401462:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401466:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  401468:	23c0      	movs	r3, #192	; 0xc0
  40146a:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  40146c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401470:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  401472:	2500      	movs	r5, #0
  401474:	9507      	str	r5, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  401476:	9508      	str	r5, [sp, #32]
  401478:	200e      	movs	r0, #14
  40147a:	4b37      	ldr	r3, [pc, #220]	; (401558 <main+0x114>)
  40147c:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40147e:	4a37      	ldr	r2, [pc, #220]	; (40155c <main+0x118>)
  401480:	a904      	add	r1, sp, #16
  401482:	4620      	mov	r0, r4
  401484:	4b36      	ldr	r3, [pc, #216]	; (401560 <main+0x11c>)
  401486:	4798      	blx	r3
		usart_enable_tx(p_usart);
  401488:	4620      	mov	r0, r4
  40148a:	4b36      	ldr	r3, [pc, #216]	; (401564 <main+0x120>)
  40148c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40148e:	4620      	mov	r0, r4
  401490:	4b35      	ldr	r3, [pc, #212]	; (401568 <main+0x124>)
  401492:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401494:	4e35      	ldr	r6, [pc, #212]	; (40156c <main+0x128>)
  401496:	6833      	ldr	r3, [r6, #0]
  401498:	4629      	mov	r1, r5
  40149a:	6898      	ldr	r0, [r3, #8]
  40149c:	4c34      	ldr	r4, [pc, #208]	; (401570 <main+0x12c>)
  40149e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4014a0:	6833      	ldr	r3, [r6, #0]
  4014a2:	4629      	mov	r1, r5
  4014a4:	6858      	ldr	r0, [r3, #4]
  4014a6:	47a0      	blx	r4
  afec_enable(afec);
  4014a8:	4c32      	ldr	r4, [pc, #200]	; (401574 <main+0x130>)
  4014aa:	4620      	mov	r0, r4
  4014ac:	4b32      	ldr	r3, [pc, #200]	; (401578 <main+0x134>)
  4014ae:	4798      	blx	r3
  afec_get_config_defaults(&afec_cfg);
  4014b0:	a804      	add	r0, sp, #16
  4014b2:	4b32      	ldr	r3, [pc, #200]	; (40157c <main+0x138>)
  4014b4:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  4014b6:	a904      	add	r1, sp, #16
  4014b8:	4620      	mov	r0, r4
  4014ba:	4b31      	ldr	r3, [pc, #196]	; (401580 <main+0x13c>)
  4014bc:	4798      	blx	r3
	reg = afec->AFEC_MR;
  4014be:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4014c0:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  4014c4:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  4014c6:	a801      	add	r0, sp, #4
  4014c8:	4b2e      	ldr	r3, [pc, #184]	; (401584 <main+0x140>)
  4014ca:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4014cc:	f88d 5005 	strb.w	r5, [sp, #5]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  4014d0:	aa01      	add	r2, sp, #4
  4014d2:	4629      	mov	r1, r5
  4014d4:	4620      	mov	r0, r4
  4014d6:	4b2c      	ldr	r3, [pc, #176]	; (401588 <main+0x144>)
  4014d8:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  4014da:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4014dc:	f44f 7300 	mov.w	r3, #512	; 0x200
  4014e0:	66e3      	str	r3, [r4, #108]	; 0x6c
  afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  4014e2:	a802      	add	r0, sp, #8
  4014e4:	4b29      	ldr	r3, [pc, #164]	; (40158c <main+0x148>)
  4014e6:	4798      	blx	r3
  afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  4014e8:	a902      	add	r1, sp, #8
  4014ea:	4620      	mov	r0, r4
  4014ec:	4b28      	ldr	r3, [pc, #160]	; (401590 <main+0x14c>)
  4014ee:	4798      	blx	r3
  afec_set_callback(afec, afec_channel,	callback, 1);
  4014f0:	2301      	movs	r3, #1
  4014f2:	4a28      	ldr	r2, [pc, #160]	; (401594 <main+0x150>)
  4014f4:	4629      	mov	r1, r5
  4014f6:	4620      	mov	r0, r4
  4014f8:	4d27      	ldr	r5, [pc, #156]	; (401598 <main+0x154>)
  4014fa:	47a8      	blx	r5
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4014fc:	4b27      	ldr	r3, [pc, #156]	; (40159c <main+0x158>)
  4014fe:	2280      	movs	r2, #128	; 0x80
  401500:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401504:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401508:	601a      	str	r2, [r3, #0]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40150a:	2301      	movs	r3, #1
  40150c:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  40150e:	2302      	movs	r3, #2
  401510:	6023      	str	r3, [r4, #0]
  afec_start_software_conversion(AFEC_POT);
  
  
  
  while(1){
    if(g_is_conversion_done){
  401512:	4c23      	ldr	r4, [pc, #140]	; (4015a0 <main+0x15c>)
      printf("%d\n", g_ul_value);               
  401514:	4e23      	ldr	r6, [pc, #140]	; (4015a4 <main+0x160>)
      delay_ms(500);                          
  401516:	4d24      	ldr	r5, [pc, #144]	; (4015a8 <main+0x164>)
    if(g_is_conversion_done){
  401518:	7823      	ldrb	r3, [r4, #0]
  40151a:	2b00      	cmp	r3, #0
  40151c:	d0fc      	beq.n	401518 <main+0xd4>
      printf("%d\n", g_ul_value);               
  40151e:	6831      	ldr	r1, [r6, #0]
  401520:	4822      	ldr	r0, [pc, #136]	; (4015ac <main+0x168>)
  401522:	4b23      	ldr	r3, [pc, #140]	; (4015b0 <main+0x16c>)
  401524:	4798      	blx	r3
      delay_ms(500);                          
  401526:	4628      	mov	r0, r5
  401528:	4b22      	ldr	r3, [pc, #136]	; (4015b4 <main+0x170>)
  40152a:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40152c:	4b11      	ldr	r3, [pc, #68]	; (401574 <main+0x130>)
  40152e:	2201      	movs	r2, #1
  401530:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  401532:	2202      	movs	r2, #2
  401534:	601a      	str	r2, [r3, #0]
  401536:	e7ef      	b.n	401518 <main+0xd4>
  401538:	004001d5 	.word	0x004001d5
  40153c:	004002d5 	.word	0x004002d5
  401540:	40028000 	.word	0x40028000
  401544:	20400aa0 	.word	0x20400aa0
  401548:	00401371 	.word	0x00401371
  40154c:	20400a9c 	.word	0x20400a9c
  401550:	00401295 	.word	0x00401295
  401554:	20400a98 	.word	0x20400a98
  401558:	00400e6d 	.word	0x00400e6d
  40155c:	08f0d180 	.word	0x08f0d180
  401560:	00400f35 	.word	0x00400f35
  401564:	00400f89 	.word	0x00400f89
  401568:	00400f8f 	.word	0x00400f8f
  40156c:	20400010 	.word	0x20400010
  401570:	004016cd 	.word	0x004016cd
  401574:	4003c000 	.word	0x4003c000
  401578:	0040095d 	.word	0x0040095d
  40157c:	0040078d 	.word	0x0040078d
  401580:	004007dd 	.word	0x004007dd
  401584:	004007bd 	.word	0x004007bd
  401588:	00400749 	.word	0x00400749
  40158c:	004007c7 	.word	0x004007c7
  401590:	00400779 	.word	0x00400779
  401594:	00401275 	.word	0x00401275
  401598:	004008dd 	.word	0x004008dd
  40159c:	e000e100 	.word	0xe000e100
  4015a0:	20400a54 	.word	0x20400a54
  4015a4:	20400a58 	.word	0x20400a58
  4015a8:	0181d7b6 	.word	0x0181d7b6
  4015ac:	00404548 	.word	0x00404548
  4015b0:	00401609 	.word	0x00401609
  4015b4:	20400001 	.word	0x20400001

004015b8 <__libc_init_array>:
  4015b8:	b570      	push	{r4, r5, r6, lr}
  4015ba:	4e0f      	ldr	r6, [pc, #60]	; (4015f8 <__libc_init_array+0x40>)
  4015bc:	4d0f      	ldr	r5, [pc, #60]	; (4015fc <__libc_init_array+0x44>)
  4015be:	1b76      	subs	r6, r6, r5
  4015c0:	10b6      	asrs	r6, r6, #2
  4015c2:	bf18      	it	ne
  4015c4:	2400      	movne	r4, #0
  4015c6:	d005      	beq.n	4015d4 <__libc_init_array+0x1c>
  4015c8:	3401      	adds	r4, #1
  4015ca:	f855 3b04 	ldr.w	r3, [r5], #4
  4015ce:	4798      	blx	r3
  4015d0:	42a6      	cmp	r6, r4
  4015d2:	d1f9      	bne.n	4015c8 <__libc_init_array+0x10>
  4015d4:	4e0a      	ldr	r6, [pc, #40]	; (401600 <__libc_init_array+0x48>)
  4015d6:	4d0b      	ldr	r5, [pc, #44]	; (401604 <__libc_init_array+0x4c>)
  4015d8:	1b76      	subs	r6, r6, r5
  4015da:	f003 f86b 	bl	4046b4 <_init>
  4015de:	10b6      	asrs	r6, r6, #2
  4015e0:	bf18      	it	ne
  4015e2:	2400      	movne	r4, #0
  4015e4:	d006      	beq.n	4015f4 <__libc_init_array+0x3c>
  4015e6:	3401      	adds	r4, #1
  4015e8:	f855 3b04 	ldr.w	r3, [r5], #4
  4015ec:	4798      	blx	r3
  4015ee:	42a6      	cmp	r6, r4
  4015f0:	d1f9      	bne.n	4015e6 <__libc_init_array+0x2e>
  4015f2:	bd70      	pop	{r4, r5, r6, pc}
  4015f4:	bd70      	pop	{r4, r5, r6, pc}
  4015f6:	bf00      	nop
  4015f8:	004046c0 	.word	0x004046c0
  4015fc:	004046c0 	.word	0x004046c0
  401600:	004046c8 	.word	0x004046c8
  401604:	004046c0 	.word	0x004046c0

00401608 <iprintf>:
  401608:	b40f      	push	{r0, r1, r2, r3}
  40160a:	b500      	push	{lr}
  40160c:	4907      	ldr	r1, [pc, #28]	; (40162c <iprintf+0x24>)
  40160e:	b083      	sub	sp, #12
  401610:	ab04      	add	r3, sp, #16
  401612:	6808      	ldr	r0, [r1, #0]
  401614:	f853 2b04 	ldr.w	r2, [r3], #4
  401618:	6881      	ldr	r1, [r0, #8]
  40161a:	9301      	str	r3, [sp, #4]
  40161c:	f000 f966 	bl	4018ec <_vfiprintf_r>
  401620:	b003      	add	sp, #12
  401622:	f85d eb04 	ldr.w	lr, [sp], #4
  401626:	b004      	add	sp, #16
  401628:	4770      	bx	lr
  40162a:	bf00      	nop
  40162c:	20400010 	.word	0x20400010

00401630 <memset>:
  401630:	b470      	push	{r4, r5, r6}
  401632:	0786      	lsls	r6, r0, #30
  401634:	d046      	beq.n	4016c4 <memset+0x94>
  401636:	1e54      	subs	r4, r2, #1
  401638:	2a00      	cmp	r2, #0
  40163a:	d041      	beq.n	4016c0 <memset+0x90>
  40163c:	b2ca      	uxtb	r2, r1
  40163e:	4603      	mov	r3, r0
  401640:	e002      	b.n	401648 <memset+0x18>
  401642:	f114 34ff 	adds.w	r4, r4, #4294967295
  401646:	d33b      	bcc.n	4016c0 <memset+0x90>
  401648:	f803 2b01 	strb.w	r2, [r3], #1
  40164c:	079d      	lsls	r5, r3, #30
  40164e:	d1f8      	bne.n	401642 <memset+0x12>
  401650:	2c03      	cmp	r4, #3
  401652:	d92e      	bls.n	4016b2 <memset+0x82>
  401654:	b2cd      	uxtb	r5, r1
  401656:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40165a:	2c0f      	cmp	r4, #15
  40165c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401660:	d919      	bls.n	401696 <memset+0x66>
  401662:	f103 0210 	add.w	r2, r3, #16
  401666:	4626      	mov	r6, r4
  401668:	3e10      	subs	r6, #16
  40166a:	2e0f      	cmp	r6, #15
  40166c:	f842 5c10 	str.w	r5, [r2, #-16]
  401670:	f842 5c0c 	str.w	r5, [r2, #-12]
  401674:	f842 5c08 	str.w	r5, [r2, #-8]
  401678:	f842 5c04 	str.w	r5, [r2, #-4]
  40167c:	f102 0210 	add.w	r2, r2, #16
  401680:	d8f2      	bhi.n	401668 <memset+0x38>
  401682:	f1a4 0210 	sub.w	r2, r4, #16
  401686:	f022 020f 	bic.w	r2, r2, #15
  40168a:	f004 040f 	and.w	r4, r4, #15
  40168e:	3210      	adds	r2, #16
  401690:	2c03      	cmp	r4, #3
  401692:	4413      	add	r3, r2
  401694:	d90d      	bls.n	4016b2 <memset+0x82>
  401696:	461e      	mov	r6, r3
  401698:	4622      	mov	r2, r4
  40169a:	3a04      	subs	r2, #4
  40169c:	2a03      	cmp	r2, #3
  40169e:	f846 5b04 	str.w	r5, [r6], #4
  4016a2:	d8fa      	bhi.n	40169a <memset+0x6a>
  4016a4:	1f22      	subs	r2, r4, #4
  4016a6:	f022 0203 	bic.w	r2, r2, #3
  4016aa:	3204      	adds	r2, #4
  4016ac:	4413      	add	r3, r2
  4016ae:	f004 0403 	and.w	r4, r4, #3
  4016b2:	b12c      	cbz	r4, 4016c0 <memset+0x90>
  4016b4:	b2c9      	uxtb	r1, r1
  4016b6:	441c      	add	r4, r3
  4016b8:	f803 1b01 	strb.w	r1, [r3], #1
  4016bc:	429c      	cmp	r4, r3
  4016be:	d1fb      	bne.n	4016b8 <memset+0x88>
  4016c0:	bc70      	pop	{r4, r5, r6}
  4016c2:	4770      	bx	lr
  4016c4:	4614      	mov	r4, r2
  4016c6:	4603      	mov	r3, r0
  4016c8:	e7c2      	b.n	401650 <memset+0x20>
  4016ca:	bf00      	nop

004016cc <setbuf>:
  4016cc:	2900      	cmp	r1, #0
  4016ce:	bf0c      	ite	eq
  4016d0:	2202      	moveq	r2, #2
  4016d2:	2200      	movne	r2, #0
  4016d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4016d8:	f000 b800 	b.w	4016dc <setvbuf>

004016dc <setvbuf>:
  4016dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4016e0:	4c61      	ldr	r4, [pc, #388]	; (401868 <setvbuf+0x18c>)
  4016e2:	6825      	ldr	r5, [r4, #0]
  4016e4:	b083      	sub	sp, #12
  4016e6:	4604      	mov	r4, r0
  4016e8:	460f      	mov	r7, r1
  4016ea:	4690      	mov	r8, r2
  4016ec:	461e      	mov	r6, r3
  4016ee:	b115      	cbz	r5, 4016f6 <setvbuf+0x1a>
  4016f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4016f2:	2b00      	cmp	r3, #0
  4016f4:	d064      	beq.n	4017c0 <setvbuf+0xe4>
  4016f6:	f1b8 0f02 	cmp.w	r8, #2
  4016fa:	d006      	beq.n	40170a <setvbuf+0x2e>
  4016fc:	f1b8 0f01 	cmp.w	r8, #1
  401700:	f200 809f 	bhi.w	401842 <setvbuf+0x166>
  401704:	2e00      	cmp	r6, #0
  401706:	f2c0 809c 	blt.w	401842 <setvbuf+0x166>
  40170a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40170c:	07d8      	lsls	r0, r3, #31
  40170e:	d534      	bpl.n	40177a <setvbuf+0x9e>
  401710:	4621      	mov	r1, r4
  401712:	4628      	mov	r0, r5
  401714:	f001 f888 	bl	402828 <_fflush_r>
  401718:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40171a:	b141      	cbz	r1, 40172e <setvbuf+0x52>
  40171c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401720:	4299      	cmp	r1, r3
  401722:	d002      	beq.n	40172a <setvbuf+0x4e>
  401724:	4628      	mov	r0, r5
  401726:	f001 f9fd 	bl	402b24 <_free_r>
  40172a:	2300      	movs	r3, #0
  40172c:	6323      	str	r3, [r4, #48]	; 0x30
  40172e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401732:	2200      	movs	r2, #0
  401734:	61a2      	str	r2, [r4, #24]
  401736:	6062      	str	r2, [r4, #4]
  401738:	061a      	lsls	r2, r3, #24
  40173a:	d43a      	bmi.n	4017b2 <setvbuf+0xd6>
  40173c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401740:	f023 0303 	bic.w	r3, r3, #3
  401744:	f1b8 0f02 	cmp.w	r8, #2
  401748:	81a3      	strh	r3, [r4, #12]
  40174a:	d01d      	beq.n	401788 <setvbuf+0xac>
  40174c:	ab01      	add	r3, sp, #4
  40174e:	466a      	mov	r2, sp
  401750:	4621      	mov	r1, r4
  401752:	4628      	mov	r0, r5
  401754:	f001 fc84 	bl	403060 <__swhatbuf_r>
  401758:	89a3      	ldrh	r3, [r4, #12]
  40175a:	4318      	orrs	r0, r3
  40175c:	81a0      	strh	r0, [r4, #12]
  40175e:	2e00      	cmp	r6, #0
  401760:	d132      	bne.n	4017c8 <setvbuf+0xec>
  401762:	9e00      	ldr	r6, [sp, #0]
  401764:	4630      	mov	r0, r6
  401766:	f001 fcf3 	bl	403150 <malloc>
  40176a:	4607      	mov	r7, r0
  40176c:	2800      	cmp	r0, #0
  40176e:	d06b      	beq.n	401848 <setvbuf+0x16c>
  401770:	89a3      	ldrh	r3, [r4, #12]
  401772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401776:	81a3      	strh	r3, [r4, #12]
  401778:	e028      	b.n	4017cc <setvbuf+0xf0>
  40177a:	89a3      	ldrh	r3, [r4, #12]
  40177c:	0599      	lsls	r1, r3, #22
  40177e:	d4c7      	bmi.n	401710 <setvbuf+0x34>
  401780:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401782:	f001 fc69 	bl	403058 <__retarget_lock_acquire_recursive>
  401786:	e7c3      	b.n	401710 <setvbuf+0x34>
  401788:	2500      	movs	r5, #0
  40178a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40178c:	2600      	movs	r6, #0
  40178e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401792:	f043 0302 	orr.w	r3, r3, #2
  401796:	2001      	movs	r0, #1
  401798:	60a6      	str	r6, [r4, #8]
  40179a:	07ce      	lsls	r6, r1, #31
  40179c:	81a3      	strh	r3, [r4, #12]
  40179e:	6022      	str	r2, [r4, #0]
  4017a0:	6122      	str	r2, [r4, #16]
  4017a2:	6160      	str	r0, [r4, #20]
  4017a4:	d401      	bmi.n	4017aa <setvbuf+0xce>
  4017a6:	0598      	lsls	r0, r3, #22
  4017a8:	d53e      	bpl.n	401828 <setvbuf+0x14c>
  4017aa:	4628      	mov	r0, r5
  4017ac:	b003      	add	sp, #12
  4017ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4017b2:	6921      	ldr	r1, [r4, #16]
  4017b4:	4628      	mov	r0, r5
  4017b6:	f001 f9b5 	bl	402b24 <_free_r>
  4017ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4017be:	e7bd      	b.n	40173c <setvbuf+0x60>
  4017c0:	4628      	mov	r0, r5
  4017c2:	f001 f889 	bl	4028d8 <__sinit>
  4017c6:	e796      	b.n	4016f6 <setvbuf+0x1a>
  4017c8:	2f00      	cmp	r7, #0
  4017ca:	d0cb      	beq.n	401764 <setvbuf+0x88>
  4017cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4017ce:	2b00      	cmp	r3, #0
  4017d0:	d033      	beq.n	40183a <setvbuf+0x15e>
  4017d2:	9b00      	ldr	r3, [sp, #0]
  4017d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4017d8:	6027      	str	r7, [r4, #0]
  4017da:	429e      	cmp	r6, r3
  4017dc:	bf1c      	itt	ne
  4017de:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4017e2:	81a2      	strhne	r2, [r4, #12]
  4017e4:	f1b8 0f01 	cmp.w	r8, #1
  4017e8:	bf04      	itt	eq
  4017ea:	f042 0201 	orreq.w	r2, r2, #1
  4017ee:	81a2      	strheq	r2, [r4, #12]
  4017f0:	b292      	uxth	r2, r2
  4017f2:	f012 0308 	ands.w	r3, r2, #8
  4017f6:	6127      	str	r7, [r4, #16]
  4017f8:	6166      	str	r6, [r4, #20]
  4017fa:	d00e      	beq.n	40181a <setvbuf+0x13e>
  4017fc:	07d1      	lsls	r1, r2, #31
  4017fe:	d51a      	bpl.n	401836 <setvbuf+0x15a>
  401800:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401802:	4276      	negs	r6, r6
  401804:	2300      	movs	r3, #0
  401806:	f015 0501 	ands.w	r5, r5, #1
  40180a:	61a6      	str	r6, [r4, #24]
  40180c:	60a3      	str	r3, [r4, #8]
  40180e:	d009      	beq.n	401824 <setvbuf+0x148>
  401810:	2500      	movs	r5, #0
  401812:	4628      	mov	r0, r5
  401814:	b003      	add	sp, #12
  401816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40181a:	60a3      	str	r3, [r4, #8]
  40181c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40181e:	f015 0501 	ands.w	r5, r5, #1
  401822:	d1f5      	bne.n	401810 <setvbuf+0x134>
  401824:	0593      	lsls	r3, r2, #22
  401826:	d4c0      	bmi.n	4017aa <setvbuf+0xce>
  401828:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40182a:	f001 fc17 	bl	40305c <__retarget_lock_release_recursive>
  40182e:	4628      	mov	r0, r5
  401830:	b003      	add	sp, #12
  401832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401836:	60a6      	str	r6, [r4, #8]
  401838:	e7f0      	b.n	40181c <setvbuf+0x140>
  40183a:	4628      	mov	r0, r5
  40183c:	f001 f84c 	bl	4028d8 <__sinit>
  401840:	e7c7      	b.n	4017d2 <setvbuf+0xf6>
  401842:	f04f 35ff 	mov.w	r5, #4294967295
  401846:	e7b0      	b.n	4017aa <setvbuf+0xce>
  401848:	f8dd 9000 	ldr.w	r9, [sp]
  40184c:	45b1      	cmp	r9, r6
  40184e:	d004      	beq.n	40185a <setvbuf+0x17e>
  401850:	4648      	mov	r0, r9
  401852:	f001 fc7d 	bl	403150 <malloc>
  401856:	4607      	mov	r7, r0
  401858:	b920      	cbnz	r0, 401864 <setvbuf+0x188>
  40185a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40185e:	f04f 35ff 	mov.w	r5, #4294967295
  401862:	e792      	b.n	40178a <setvbuf+0xae>
  401864:	464e      	mov	r6, r9
  401866:	e783      	b.n	401770 <setvbuf+0x94>
  401868:	20400010 	.word	0x20400010

0040186c <__sprint_r.part.0>:
  40186c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401870:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401872:	049c      	lsls	r4, r3, #18
  401874:	4693      	mov	fp, r2
  401876:	d52f      	bpl.n	4018d8 <__sprint_r.part.0+0x6c>
  401878:	6893      	ldr	r3, [r2, #8]
  40187a:	6812      	ldr	r2, [r2, #0]
  40187c:	b353      	cbz	r3, 4018d4 <__sprint_r.part.0+0x68>
  40187e:	460e      	mov	r6, r1
  401880:	4607      	mov	r7, r0
  401882:	f102 0908 	add.w	r9, r2, #8
  401886:	e919 0420 	ldmdb	r9, {r5, sl}
  40188a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40188e:	d017      	beq.n	4018c0 <__sprint_r.part.0+0x54>
  401890:	3d04      	subs	r5, #4
  401892:	2400      	movs	r4, #0
  401894:	e001      	b.n	40189a <__sprint_r.part.0+0x2e>
  401896:	45a0      	cmp	r8, r4
  401898:	d010      	beq.n	4018bc <__sprint_r.part.0+0x50>
  40189a:	4632      	mov	r2, r6
  40189c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4018a0:	4638      	mov	r0, r7
  4018a2:	f001 f8bb 	bl	402a1c <_fputwc_r>
  4018a6:	1c43      	adds	r3, r0, #1
  4018a8:	f104 0401 	add.w	r4, r4, #1
  4018ac:	d1f3      	bne.n	401896 <__sprint_r.part.0+0x2a>
  4018ae:	2300      	movs	r3, #0
  4018b0:	f8cb 3008 	str.w	r3, [fp, #8]
  4018b4:	f8cb 3004 	str.w	r3, [fp, #4]
  4018b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018bc:	f8db 3008 	ldr.w	r3, [fp, #8]
  4018c0:	f02a 0a03 	bic.w	sl, sl, #3
  4018c4:	eba3 030a 	sub.w	r3, r3, sl
  4018c8:	f8cb 3008 	str.w	r3, [fp, #8]
  4018cc:	f109 0908 	add.w	r9, r9, #8
  4018d0:	2b00      	cmp	r3, #0
  4018d2:	d1d8      	bne.n	401886 <__sprint_r.part.0+0x1a>
  4018d4:	2000      	movs	r0, #0
  4018d6:	e7ea      	b.n	4018ae <__sprint_r.part.0+0x42>
  4018d8:	f001 fa0a 	bl	402cf0 <__sfvwrite_r>
  4018dc:	2300      	movs	r3, #0
  4018de:	f8cb 3008 	str.w	r3, [fp, #8]
  4018e2:	f8cb 3004 	str.w	r3, [fp, #4]
  4018e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018ea:	bf00      	nop

004018ec <_vfiprintf_r>:
  4018ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018f0:	b0ad      	sub	sp, #180	; 0xb4
  4018f2:	461d      	mov	r5, r3
  4018f4:	468b      	mov	fp, r1
  4018f6:	4690      	mov	r8, r2
  4018f8:	9307      	str	r3, [sp, #28]
  4018fa:	9006      	str	r0, [sp, #24]
  4018fc:	b118      	cbz	r0, 401906 <_vfiprintf_r+0x1a>
  4018fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401900:	2b00      	cmp	r3, #0
  401902:	f000 80f3 	beq.w	401aec <_vfiprintf_r+0x200>
  401906:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40190a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40190e:	07df      	lsls	r7, r3, #31
  401910:	b281      	uxth	r1, r0
  401912:	d402      	bmi.n	40191a <_vfiprintf_r+0x2e>
  401914:	058e      	lsls	r6, r1, #22
  401916:	f140 80fc 	bpl.w	401b12 <_vfiprintf_r+0x226>
  40191a:	048c      	lsls	r4, r1, #18
  40191c:	d40a      	bmi.n	401934 <_vfiprintf_r+0x48>
  40191e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401922:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40192a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40192e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401932:	b289      	uxth	r1, r1
  401934:	0708      	lsls	r0, r1, #28
  401936:	f140 80b3 	bpl.w	401aa0 <_vfiprintf_r+0x1b4>
  40193a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40193e:	2b00      	cmp	r3, #0
  401940:	f000 80ae 	beq.w	401aa0 <_vfiprintf_r+0x1b4>
  401944:	f001 031a 	and.w	r3, r1, #26
  401948:	2b0a      	cmp	r3, #10
  40194a:	f000 80b5 	beq.w	401ab8 <_vfiprintf_r+0x1cc>
  40194e:	2300      	movs	r3, #0
  401950:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401954:	930b      	str	r3, [sp, #44]	; 0x2c
  401956:	9311      	str	r3, [sp, #68]	; 0x44
  401958:	9310      	str	r3, [sp, #64]	; 0x40
  40195a:	9303      	str	r3, [sp, #12]
  40195c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401960:	46ca      	mov	sl, r9
  401962:	f8cd b010 	str.w	fp, [sp, #16]
  401966:	f898 3000 	ldrb.w	r3, [r8]
  40196a:	4644      	mov	r4, r8
  40196c:	b1fb      	cbz	r3, 4019ae <_vfiprintf_r+0xc2>
  40196e:	2b25      	cmp	r3, #37	; 0x25
  401970:	d102      	bne.n	401978 <_vfiprintf_r+0x8c>
  401972:	e01c      	b.n	4019ae <_vfiprintf_r+0xc2>
  401974:	2b25      	cmp	r3, #37	; 0x25
  401976:	d003      	beq.n	401980 <_vfiprintf_r+0x94>
  401978:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40197c:	2b00      	cmp	r3, #0
  40197e:	d1f9      	bne.n	401974 <_vfiprintf_r+0x88>
  401980:	eba4 0508 	sub.w	r5, r4, r8
  401984:	b19d      	cbz	r5, 4019ae <_vfiprintf_r+0xc2>
  401986:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401988:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40198a:	f8ca 8000 	str.w	r8, [sl]
  40198e:	3301      	adds	r3, #1
  401990:	442a      	add	r2, r5
  401992:	2b07      	cmp	r3, #7
  401994:	f8ca 5004 	str.w	r5, [sl, #4]
  401998:	9211      	str	r2, [sp, #68]	; 0x44
  40199a:	9310      	str	r3, [sp, #64]	; 0x40
  40199c:	dd7a      	ble.n	401a94 <_vfiprintf_r+0x1a8>
  40199e:	2a00      	cmp	r2, #0
  4019a0:	f040 84b0 	bne.w	402304 <_vfiprintf_r+0xa18>
  4019a4:	9b03      	ldr	r3, [sp, #12]
  4019a6:	9210      	str	r2, [sp, #64]	; 0x40
  4019a8:	442b      	add	r3, r5
  4019aa:	46ca      	mov	sl, r9
  4019ac:	9303      	str	r3, [sp, #12]
  4019ae:	7823      	ldrb	r3, [r4, #0]
  4019b0:	2b00      	cmp	r3, #0
  4019b2:	f000 83e0 	beq.w	402176 <_vfiprintf_r+0x88a>
  4019b6:	2000      	movs	r0, #0
  4019b8:	f04f 0300 	mov.w	r3, #0
  4019bc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4019c0:	f104 0801 	add.w	r8, r4, #1
  4019c4:	7862      	ldrb	r2, [r4, #1]
  4019c6:	4605      	mov	r5, r0
  4019c8:	4606      	mov	r6, r0
  4019ca:	4603      	mov	r3, r0
  4019cc:	f04f 34ff 	mov.w	r4, #4294967295
  4019d0:	f108 0801 	add.w	r8, r8, #1
  4019d4:	f1a2 0120 	sub.w	r1, r2, #32
  4019d8:	2958      	cmp	r1, #88	; 0x58
  4019da:	f200 82de 	bhi.w	401f9a <_vfiprintf_r+0x6ae>
  4019de:	e8df f011 	tbh	[pc, r1, lsl #1]
  4019e2:	0221      	.short	0x0221
  4019e4:	02dc02dc 	.word	0x02dc02dc
  4019e8:	02dc0229 	.word	0x02dc0229
  4019ec:	02dc02dc 	.word	0x02dc02dc
  4019f0:	02dc02dc 	.word	0x02dc02dc
  4019f4:	028902dc 	.word	0x028902dc
  4019f8:	02dc0295 	.word	0x02dc0295
  4019fc:	02bd00a2 	.word	0x02bd00a2
  401a00:	019f02dc 	.word	0x019f02dc
  401a04:	01a401a4 	.word	0x01a401a4
  401a08:	01a401a4 	.word	0x01a401a4
  401a0c:	01a401a4 	.word	0x01a401a4
  401a10:	01a401a4 	.word	0x01a401a4
  401a14:	02dc01a4 	.word	0x02dc01a4
  401a18:	02dc02dc 	.word	0x02dc02dc
  401a1c:	02dc02dc 	.word	0x02dc02dc
  401a20:	02dc02dc 	.word	0x02dc02dc
  401a24:	02dc02dc 	.word	0x02dc02dc
  401a28:	01b202dc 	.word	0x01b202dc
  401a2c:	02dc02dc 	.word	0x02dc02dc
  401a30:	02dc02dc 	.word	0x02dc02dc
  401a34:	02dc02dc 	.word	0x02dc02dc
  401a38:	02dc02dc 	.word	0x02dc02dc
  401a3c:	02dc02dc 	.word	0x02dc02dc
  401a40:	02dc0197 	.word	0x02dc0197
  401a44:	02dc02dc 	.word	0x02dc02dc
  401a48:	02dc02dc 	.word	0x02dc02dc
  401a4c:	02dc019b 	.word	0x02dc019b
  401a50:	025302dc 	.word	0x025302dc
  401a54:	02dc02dc 	.word	0x02dc02dc
  401a58:	02dc02dc 	.word	0x02dc02dc
  401a5c:	02dc02dc 	.word	0x02dc02dc
  401a60:	02dc02dc 	.word	0x02dc02dc
  401a64:	02dc02dc 	.word	0x02dc02dc
  401a68:	021b025a 	.word	0x021b025a
  401a6c:	02dc02dc 	.word	0x02dc02dc
  401a70:	026e02dc 	.word	0x026e02dc
  401a74:	02dc021b 	.word	0x02dc021b
  401a78:	027302dc 	.word	0x027302dc
  401a7c:	01f502dc 	.word	0x01f502dc
  401a80:	02090182 	.word	0x02090182
  401a84:	02dc02d7 	.word	0x02dc02d7
  401a88:	02dc029a 	.word	0x02dc029a
  401a8c:	02dc00a7 	.word	0x02dc00a7
  401a90:	022e02dc 	.word	0x022e02dc
  401a94:	f10a 0a08 	add.w	sl, sl, #8
  401a98:	9b03      	ldr	r3, [sp, #12]
  401a9a:	442b      	add	r3, r5
  401a9c:	9303      	str	r3, [sp, #12]
  401a9e:	e786      	b.n	4019ae <_vfiprintf_r+0xc2>
  401aa0:	4659      	mov	r1, fp
  401aa2:	9806      	ldr	r0, [sp, #24]
  401aa4:	f000 fdac 	bl	402600 <__swsetup_r>
  401aa8:	bb18      	cbnz	r0, 401af2 <_vfiprintf_r+0x206>
  401aaa:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  401aae:	f001 031a 	and.w	r3, r1, #26
  401ab2:	2b0a      	cmp	r3, #10
  401ab4:	f47f af4b 	bne.w	40194e <_vfiprintf_r+0x62>
  401ab8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  401abc:	2b00      	cmp	r3, #0
  401abe:	f6ff af46 	blt.w	40194e <_vfiprintf_r+0x62>
  401ac2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401ac6:	07db      	lsls	r3, r3, #31
  401ac8:	d405      	bmi.n	401ad6 <_vfiprintf_r+0x1ea>
  401aca:	058f      	lsls	r7, r1, #22
  401acc:	d403      	bmi.n	401ad6 <_vfiprintf_r+0x1ea>
  401ace:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401ad2:	f001 fac3 	bl	40305c <__retarget_lock_release_recursive>
  401ad6:	462b      	mov	r3, r5
  401ad8:	4642      	mov	r2, r8
  401ada:	4659      	mov	r1, fp
  401adc:	9806      	ldr	r0, [sp, #24]
  401ade:	f000 fd4d 	bl	40257c <__sbprintf>
  401ae2:	9003      	str	r0, [sp, #12]
  401ae4:	9803      	ldr	r0, [sp, #12]
  401ae6:	b02d      	add	sp, #180	; 0xb4
  401ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401aec:	f000 fef4 	bl	4028d8 <__sinit>
  401af0:	e709      	b.n	401906 <_vfiprintf_r+0x1a>
  401af2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401af6:	07d9      	lsls	r1, r3, #31
  401af8:	d404      	bmi.n	401b04 <_vfiprintf_r+0x218>
  401afa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401afe:	059a      	lsls	r2, r3, #22
  401b00:	f140 84aa 	bpl.w	402458 <_vfiprintf_r+0xb6c>
  401b04:	f04f 33ff 	mov.w	r3, #4294967295
  401b08:	9303      	str	r3, [sp, #12]
  401b0a:	9803      	ldr	r0, [sp, #12]
  401b0c:	b02d      	add	sp, #180	; 0xb4
  401b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b12:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401b16:	f001 fa9f 	bl	403058 <__retarget_lock_acquire_recursive>
  401b1a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401b1e:	b281      	uxth	r1, r0
  401b20:	e6fb      	b.n	40191a <_vfiprintf_r+0x2e>
  401b22:	4276      	negs	r6, r6
  401b24:	9207      	str	r2, [sp, #28]
  401b26:	f043 0304 	orr.w	r3, r3, #4
  401b2a:	f898 2000 	ldrb.w	r2, [r8]
  401b2e:	e74f      	b.n	4019d0 <_vfiprintf_r+0xe4>
  401b30:	9608      	str	r6, [sp, #32]
  401b32:	069e      	lsls	r6, r3, #26
  401b34:	f100 8450 	bmi.w	4023d8 <_vfiprintf_r+0xaec>
  401b38:	9907      	ldr	r1, [sp, #28]
  401b3a:	06dd      	lsls	r5, r3, #27
  401b3c:	460a      	mov	r2, r1
  401b3e:	f100 83ef 	bmi.w	402320 <_vfiprintf_r+0xa34>
  401b42:	0658      	lsls	r0, r3, #25
  401b44:	f140 83ec 	bpl.w	402320 <_vfiprintf_r+0xa34>
  401b48:	880e      	ldrh	r6, [r1, #0]
  401b4a:	3104      	adds	r1, #4
  401b4c:	2700      	movs	r7, #0
  401b4e:	2201      	movs	r2, #1
  401b50:	9107      	str	r1, [sp, #28]
  401b52:	f04f 0100 	mov.w	r1, #0
  401b56:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401b5a:	2500      	movs	r5, #0
  401b5c:	1c61      	adds	r1, r4, #1
  401b5e:	f000 8116 	beq.w	401d8e <_vfiprintf_r+0x4a2>
  401b62:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401b66:	9102      	str	r1, [sp, #8]
  401b68:	ea56 0107 	orrs.w	r1, r6, r7
  401b6c:	f040 8114 	bne.w	401d98 <_vfiprintf_r+0x4ac>
  401b70:	2c00      	cmp	r4, #0
  401b72:	f040 835c 	bne.w	40222e <_vfiprintf_r+0x942>
  401b76:	2a00      	cmp	r2, #0
  401b78:	f040 83b7 	bne.w	4022ea <_vfiprintf_r+0x9fe>
  401b7c:	f013 0301 	ands.w	r3, r3, #1
  401b80:	9305      	str	r3, [sp, #20]
  401b82:	f000 8457 	beq.w	402434 <_vfiprintf_r+0xb48>
  401b86:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401b8a:	2330      	movs	r3, #48	; 0x30
  401b8c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401b90:	9b05      	ldr	r3, [sp, #20]
  401b92:	42a3      	cmp	r3, r4
  401b94:	bfb8      	it	lt
  401b96:	4623      	movlt	r3, r4
  401b98:	9301      	str	r3, [sp, #4]
  401b9a:	b10d      	cbz	r5, 401ba0 <_vfiprintf_r+0x2b4>
  401b9c:	3301      	adds	r3, #1
  401b9e:	9301      	str	r3, [sp, #4]
  401ba0:	9b02      	ldr	r3, [sp, #8]
  401ba2:	f013 0302 	ands.w	r3, r3, #2
  401ba6:	9309      	str	r3, [sp, #36]	; 0x24
  401ba8:	d002      	beq.n	401bb0 <_vfiprintf_r+0x2c4>
  401baa:	9b01      	ldr	r3, [sp, #4]
  401bac:	3302      	adds	r3, #2
  401bae:	9301      	str	r3, [sp, #4]
  401bb0:	9b02      	ldr	r3, [sp, #8]
  401bb2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401bb6:	930a      	str	r3, [sp, #40]	; 0x28
  401bb8:	f040 8217 	bne.w	401fea <_vfiprintf_r+0x6fe>
  401bbc:	9b08      	ldr	r3, [sp, #32]
  401bbe:	9a01      	ldr	r2, [sp, #4]
  401bc0:	1a9d      	subs	r5, r3, r2
  401bc2:	2d00      	cmp	r5, #0
  401bc4:	f340 8211 	ble.w	401fea <_vfiprintf_r+0x6fe>
  401bc8:	2d10      	cmp	r5, #16
  401bca:	f340 8490 	ble.w	4024ee <_vfiprintf_r+0xc02>
  401bce:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401bd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401bd2:	4ec4      	ldr	r6, [pc, #784]	; (401ee4 <_vfiprintf_r+0x5f8>)
  401bd4:	46d6      	mov	lr, sl
  401bd6:	2710      	movs	r7, #16
  401bd8:	46a2      	mov	sl, r4
  401bda:	4619      	mov	r1, r3
  401bdc:	9c06      	ldr	r4, [sp, #24]
  401bde:	e007      	b.n	401bf0 <_vfiprintf_r+0x304>
  401be0:	f101 0c02 	add.w	ip, r1, #2
  401be4:	f10e 0e08 	add.w	lr, lr, #8
  401be8:	4601      	mov	r1, r0
  401bea:	3d10      	subs	r5, #16
  401bec:	2d10      	cmp	r5, #16
  401bee:	dd11      	ble.n	401c14 <_vfiprintf_r+0x328>
  401bf0:	1c48      	adds	r0, r1, #1
  401bf2:	3210      	adds	r2, #16
  401bf4:	2807      	cmp	r0, #7
  401bf6:	9211      	str	r2, [sp, #68]	; 0x44
  401bf8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  401bfc:	9010      	str	r0, [sp, #64]	; 0x40
  401bfe:	ddef      	ble.n	401be0 <_vfiprintf_r+0x2f4>
  401c00:	2a00      	cmp	r2, #0
  401c02:	f040 81e4 	bne.w	401fce <_vfiprintf_r+0x6e2>
  401c06:	3d10      	subs	r5, #16
  401c08:	2d10      	cmp	r5, #16
  401c0a:	4611      	mov	r1, r2
  401c0c:	f04f 0c01 	mov.w	ip, #1
  401c10:	46ce      	mov	lr, r9
  401c12:	dced      	bgt.n	401bf0 <_vfiprintf_r+0x304>
  401c14:	4654      	mov	r4, sl
  401c16:	4661      	mov	r1, ip
  401c18:	46f2      	mov	sl, lr
  401c1a:	442a      	add	r2, r5
  401c1c:	2907      	cmp	r1, #7
  401c1e:	9211      	str	r2, [sp, #68]	; 0x44
  401c20:	f8ca 6000 	str.w	r6, [sl]
  401c24:	f8ca 5004 	str.w	r5, [sl, #4]
  401c28:	9110      	str	r1, [sp, #64]	; 0x40
  401c2a:	f300 82ec 	bgt.w	402206 <_vfiprintf_r+0x91a>
  401c2e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401c32:	f10a 0a08 	add.w	sl, sl, #8
  401c36:	1c48      	adds	r0, r1, #1
  401c38:	2d00      	cmp	r5, #0
  401c3a:	f040 81de 	bne.w	401ffa <_vfiprintf_r+0x70e>
  401c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401c40:	2b00      	cmp	r3, #0
  401c42:	f000 81f8 	beq.w	402036 <_vfiprintf_r+0x74a>
  401c46:	3202      	adds	r2, #2
  401c48:	a90e      	add	r1, sp, #56	; 0x38
  401c4a:	2302      	movs	r3, #2
  401c4c:	2807      	cmp	r0, #7
  401c4e:	9211      	str	r2, [sp, #68]	; 0x44
  401c50:	9010      	str	r0, [sp, #64]	; 0x40
  401c52:	e88a 000a 	stmia.w	sl, {r1, r3}
  401c56:	f340 81ea 	ble.w	40202e <_vfiprintf_r+0x742>
  401c5a:	2a00      	cmp	r2, #0
  401c5c:	f040 838c 	bne.w	402378 <_vfiprintf_r+0xa8c>
  401c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401c62:	2b80      	cmp	r3, #128	; 0x80
  401c64:	f04f 0001 	mov.w	r0, #1
  401c68:	4611      	mov	r1, r2
  401c6a:	46ca      	mov	sl, r9
  401c6c:	f040 81e7 	bne.w	40203e <_vfiprintf_r+0x752>
  401c70:	9b08      	ldr	r3, [sp, #32]
  401c72:	9d01      	ldr	r5, [sp, #4]
  401c74:	1b5e      	subs	r6, r3, r5
  401c76:	2e00      	cmp	r6, #0
  401c78:	f340 81e1 	ble.w	40203e <_vfiprintf_r+0x752>
  401c7c:	2e10      	cmp	r6, #16
  401c7e:	4d9a      	ldr	r5, [pc, #616]	; (401ee8 <_vfiprintf_r+0x5fc>)
  401c80:	f340 8450 	ble.w	402524 <_vfiprintf_r+0xc38>
  401c84:	46d4      	mov	ip, sl
  401c86:	2710      	movs	r7, #16
  401c88:	46a2      	mov	sl, r4
  401c8a:	9c06      	ldr	r4, [sp, #24]
  401c8c:	e007      	b.n	401c9e <_vfiprintf_r+0x3b2>
  401c8e:	f101 0e02 	add.w	lr, r1, #2
  401c92:	f10c 0c08 	add.w	ip, ip, #8
  401c96:	4601      	mov	r1, r0
  401c98:	3e10      	subs	r6, #16
  401c9a:	2e10      	cmp	r6, #16
  401c9c:	dd11      	ble.n	401cc2 <_vfiprintf_r+0x3d6>
  401c9e:	1c48      	adds	r0, r1, #1
  401ca0:	3210      	adds	r2, #16
  401ca2:	2807      	cmp	r0, #7
  401ca4:	9211      	str	r2, [sp, #68]	; 0x44
  401ca6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  401caa:	9010      	str	r0, [sp, #64]	; 0x40
  401cac:	ddef      	ble.n	401c8e <_vfiprintf_r+0x3a2>
  401cae:	2a00      	cmp	r2, #0
  401cb0:	f040 829d 	bne.w	4021ee <_vfiprintf_r+0x902>
  401cb4:	3e10      	subs	r6, #16
  401cb6:	2e10      	cmp	r6, #16
  401cb8:	f04f 0e01 	mov.w	lr, #1
  401cbc:	4611      	mov	r1, r2
  401cbe:	46cc      	mov	ip, r9
  401cc0:	dced      	bgt.n	401c9e <_vfiprintf_r+0x3b2>
  401cc2:	4654      	mov	r4, sl
  401cc4:	46e2      	mov	sl, ip
  401cc6:	4432      	add	r2, r6
  401cc8:	f1be 0f07 	cmp.w	lr, #7
  401ccc:	9211      	str	r2, [sp, #68]	; 0x44
  401cce:	e88a 0060 	stmia.w	sl, {r5, r6}
  401cd2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401cd6:	f300 8369 	bgt.w	4023ac <_vfiprintf_r+0xac0>
  401cda:	f10a 0a08 	add.w	sl, sl, #8
  401cde:	f10e 0001 	add.w	r0, lr, #1
  401ce2:	4671      	mov	r1, lr
  401ce4:	e1ab      	b.n	40203e <_vfiprintf_r+0x752>
  401ce6:	9608      	str	r6, [sp, #32]
  401ce8:	f013 0220 	ands.w	r2, r3, #32
  401cec:	f040 838c 	bne.w	402408 <_vfiprintf_r+0xb1c>
  401cf0:	f013 0110 	ands.w	r1, r3, #16
  401cf4:	f040 831a 	bne.w	40232c <_vfiprintf_r+0xa40>
  401cf8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  401cfc:	f000 8316 	beq.w	40232c <_vfiprintf_r+0xa40>
  401d00:	9807      	ldr	r0, [sp, #28]
  401d02:	460a      	mov	r2, r1
  401d04:	4601      	mov	r1, r0
  401d06:	3104      	adds	r1, #4
  401d08:	8806      	ldrh	r6, [r0, #0]
  401d0a:	9107      	str	r1, [sp, #28]
  401d0c:	2700      	movs	r7, #0
  401d0e:	e720      	b.n	401b52 <_vfiprintf_r+0x266>
  401d10:	9608      	str	r6, [sp, #32]
  401d12:	f043 0310 	orr.w	r3, r3, #16
  401d16:	e7e7      	b.n	401ce8 <_vfiprintf_r+0x3fc>
  401d18:	9608      	str	r6, [sp, #32]
  401d1a:	f043 0310 	orr.w	r3, r3, #16
  401d1e:	e708      	b.n	401b32 <_vfiprintf_r+0x246>
  401d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401d24:	f898 2000 	ldrb.w	r2, [r8]
  401d28:	e652      	b.n	4019d0 <_vfiprintf_r+0xe4>
  401d2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401d2e:	2600      	movs	r6, #0
  401d30:	f818 2b01 	ldrb.w	r2, [r8], #1
  401d34:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401d38:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  401d3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401d40:	2909      	cmp	r1, #9
  401d42:	d9f5      	bls.n	401d30 <_vfiprintf_r+0x444>
  401d44:	e646      	b.n	4019d4 <_vfiprintf_r+0xe8>
  401d46:	9608      	str	r6, [sp, #32]
  401d48:	2800      	cmp	r0, #0
  401d4a:	f040 8408 	bne.w	40255e <_vfiprintf_r+0xc72>
  401d4e:	f043 0310 	orr.w	r3, r3, #16
  401d52:	069e      	lsls	r6, r3, #26
  401d54:	f100 834c 	bmi.w	4023f0 <_vfiprintf_r+0xb04>
  401d58:	06dd      	lsls	r5, r3, #27
  401d5a:	f100 82f3 	bmi.w	402344 <_vfiprintf_r+0xa58>
  401d5e:	0658      	lsls	r0, r3, #25
  401d60:	f140 82f0 	bpl.w	402344 <_vfiprintf_r+0xa58>
  401d64:	9d07      	ldr	r5, [sp, #28]
  401d66:	f9b5 6000 	ldrsh.w	r6, [r5]
  401d6a:	462a      	mov	r2, r5
  401d6c:	17f7      	asrs	r7, r6, #31
  401d6e:	3204      	adds	r2, #4
  401d70:	4630      	mov	r0, r6
  401d72:	4639      	mov	r1, r7
  401d74:	9207      	str	r2, [sp, #28]
  401d76:	2800      	cmp	r0, #0
  401d78:	f171 0200 	sbcs.w	r2, r1, #0
  401d7c:	f2c0 835d 	blt.w	40243a <_vfiprintf_r+0xb4e>
  401d80:	1c61      	adds	r1, r4, #1
  401d82:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401d86:	f04f 0201 	mov.w	r2, #1
  401d8a:	f47f aeea 	bne.w	401b62 <_vfiprintf_r+0x276>
  401d8e:	ea56 0107 	orrs.w	r1, r6, r7
  401d92:	f000 824d 	beq.w	402230 <_vfiprintf_r+0x944>
  401d96:	9302      	str	r3, [sp, #8]
  401d98:	2a01      	cmp	r2, #1
  401d9a:	f000 828c 	beq.w	4022b6 <_vfiprintf_r+0x9ca>
  401d9e:	2a02      	cmp	r2, #2
  401da0:	f040 825c 	bne.w	40225c <_vfiprintf_r+0x970>
  401da4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401da6:	46cb      	mov	fp, r9
  401da8:	0933      	lsrs	r3, r6, #4
  401daa:	f006 010f 	and.w	r1, r6, #15
  401dae:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401db2:	093a      	lsrs	r2, r7, #4
  401db4:	461e      	mov	r6, r3
  401db6:	4617      	mov	r7, r2
  401db8:	5c43      	ldrb	r3, [r0, r1]
  401dba:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  401dbe:	ea56 0307 	orrs.w	r3, r6, r7
  401dc2:	d1f1      	bne.n	401da8 <_vfiprintf_r+0x4bc>
  401dc4:	eba9 030b 	sub.w	r3, r9, fp
  401dc8:	9305      	str	r3, [sp, #20]
  401dca:	e6e1      	b.n	401b90 <_vfiprintf_r+0x2a4>
  401dcc:	2800      	cmp	r0, #0
  401dce:	f040 83c0 	bne.w	402552 <_vfiprintf_r+0xc66>
  401dd2:	0699      	lsls	r1, r3, #26
  401dd4:	f100 8367 	bmi.w	4024a6 <_vfiprintf_r+0xbba>
  401dd8:	06da      	lsls	r2, r3, #27
  401dda:	f100 80f1 	bmi.w	401fc0 <_vfiprintf_r+0x6d4>
  401dde:	065b      	lsls	r3, r3, #25
  401de0:	f140 80ee 	bpl.w	401fc0 <_vfiprintf_r+0x6d4>
  401de4:	9a07      	ldr	r2, [sp, #28]
  401de6:	6813      	ldr	r3, [r2, #0]
  401de8:	3204      	adds	r2, #4
  401dea:	9207      	str	r2, [sp, #28]
  401dec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  401df0:	801a      	strh	r2, [r3, #0]
  401df2:	e5b8      	b.n	401966 <_vfiprintf_r+0x7a>
  401df4:	9807      	ldr	r0, [sp, #28]
  401df6:	4a3d      	ldr	r2, [pc, #244]	; (401eec <_vfiprintf_r+0x600>)
  401df8:	9608      	str	r6, [sp, #32]
  401dfa:	920b      	str	r2, [sp, #44]	; 0x2c
  401dfc:	6806      	ldr	r6, [r0, #0]
  401dfe:	2278      	movs	r2, #120	; 0x78
  401e00:	2130      	movs	r1, #48	; 0x30
  401e02:	3004      	adds	r0, #4
  401e04:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401e08:	f043 0302 	orr.w	r3, r3, #2
  401e0c:	9007      	str	r0, [sp, #28]
  401e0e:	2700      	movs	r7, #0
  401e10:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401e14:	2202      	movs	r2, #2
  401e16:	e69c      	b.n	401b52 <_vfiprintf_r+0x266>
  401e18:	9608      	str	r6, [sp, #32]
  401e1a:	2800      	cmp	r0, #0
  401e1c:	d099      	beq.n	401d52 <_vfiprintf_r+0x466>
  401e1e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401e22:	e796      	b.n	401d52 <_vfiprintf_r+0x466>
  401e24:	f898 2000 	ldrb.w	r2, [r8]
  401e28:	2d00      	cmp	r5, #0
  401e2a:	f47f add1 	bne.w	4019d0 <_vfiprintf_r+0xe4>
  401e2e:	2001      	movs	r0, #1
  401e30:	2520      	movs	r5, #32
  401e32:	e5cd      	b.n	4019d0 <_vfiprintf_r+0xe4>
  401e34:	f043 0301 	orr.w	r3, r3, #1
  401e38:	f898 2000 	ldrb.w	r2, [r8]
  401e3c:	e5c8      	b.n	4019d0 <_vfiprintf_r+0xe4>
  401e3e:	9608      	str	r6, [sp, #32]
  401e40:	2800      	cmp	r0, #0
  401e42:	f040 8393 	bne.w	40256c <_vfiprintf_r+0xc80>
  401e46:	4929      	ldr	r1, [pc, #164]	; (401eec <_vfiprintf_r+0x600>)
  401e48:	910b      	str	r1, [sp, #44]	; 0x2c
  401e4a:	069f      	lsls	r7, r3, #26
  401e4c:	f100 82e8 	bmi.w	402420 <_vfiprintf_r+0xb34>
  401e50:	9807      	ldr	r0, [sp, #28]
  401e52:	06de      	lsls	r6, r3, #27
  401e54:	4601      	mov	r1, r0
  401e56:	f100 8270 	bmi.w	40233a <_vfiprintf_r+0xa4e>
  401e5a:	065d      	lsls	r5, r3, #25
  401e5c:	f140 826d 	bpl.w	40233a <_vfiprintf_r+0xa4e>
  401e60:	3104      	adds	r1, #4
  401e62:	8806      	ldrh	r6, [r0, #0]
  401e64:	9107      	str	r1, [sp, #28]
  401e66:	2700      	movs	r7, #0
  401e68:	07d8      	lsls	r0, r3, #31
  401e6a:	f140 8222 	bpl.w	4022b2 <_vfiprintf_r+0x9c6>
  401e6e:	ea56 0107 	orrs.w	r1, r6, r7
  401e72:	f000 821e 	beq.w	4022b2 <_vfiprintf_r+0x9c6>
  401e76:	2130      	movs	r1, #48	; 0x30
  401e78:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401e7c:	f043 0302 	orr.w	r3, r3, #2
  401e80:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401e84:	2202      	movs	r2, #2
  401e86:	e664      	b.n	401b52 <_vfiprintf_r+0x266>
  401e88:	9608      	str	r6, [sp, #32]
  401e8a:	2800      	cmp	r0, #0
  401e8c:	f040 836b 	bne.w	402566 <_vfiprintf_r+0xc7a>
  401e90:	4917      	ldr	r1, [pc, #92]	; (401ef0 <_vfiprintf_r+0x604>)
  401e92:	910b      	str	r1, [sp, #44]	; 0x2c
  401e94:	e7d9      	b.n	401e4a <_vfiprintf_r+0x55e>
  401e96:	9907      	ldr	r1, [sp, #28]
  401e98:	9608      	str	r6, [sp, #32]
  401e9a:	680a      	ldr	r2, [r1, #0]
  401e9c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401ea0:	f04f 0000 	mov.w	r0, #0
  401ea4:	460a      	mov	r2, r1
  401ea6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  401eaa:	3204      	adds	r2, #4
  401eac:	2001      	movs	r0, #1
  401eae:	9001      	str	r0, [sp, #4]
  401eb0:	9207      	str	r2, [sp, #28]
  401eb2:	9005      	str	r0, [sp, #20]
  401eb4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401eb8:	9302      	str	r3, [sp, #8]
  401eba:	2400      	movs	r4, #0
  401ebc:	e670      	b.n	401ba0 <_vfiprintf_r+0x2b4>
  401ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401ec2:	f898 2000 	ldrb.w	r2, [r8]
  401ec6:	e583      	b.n	4019d0 <_vfiprintf_r+0xe4>
  401ec8:	f898 2000 	ldrb.w	r2, [r8]
  401ecc:	2a6c      	cmp	r2, #108	; 0x6c
  401ece:	bf03      	ittte	eq
  401ed0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401ed4:	f043 0320 	orreq.w	r3, r3, #32
  401ed8:	f108 0801 	addeq.w	r8, r8, #1
  401edc:	f043 0310 	orrne.w	r3, r3, #16
  401ee0:	e576      	b.n	4019d0 <_vfiprintf_r+0xe4>
  401ee2:	bf00      	nop
  401ee4:	00404580 	.word	0x00404580
  401ee8:	00404590 	.word	0x00404590
  401eec:	00404564 	.word	0x00404564
  401ef0:	00404550 	.word	0x00404550
  401ef4:	9907      	ldr	r1, [sp, #28]
  401ef6:	680e      	ldr	r6, [r1, #0]
  401ef8:	460a      	mov	r2, r1
  401efa:	2e00      	cmp	r6, #0
  401efc:	f102 0204 	add.w	r2, r2, #4
  401f00:	f6ff ae0f 	blt.w	401b22 <_vfiprintf_r+0x236>
  401f04:	9207      	str	r2, [sp, #28]
  401f06:	f898 2000 	ldrb.w	r2, [r8]
  401f0a:	e561      	b.n	4019d0 <_vfiprintf_r+0xe4>
  401f0c:	f898 2000 	ldrb.w	r2, [r8]
  401f10:	2001      	movs	r0, #1
  401f12:	252b      	movs	r5, #43	; 0x2b
  401f14:	e55c      	b.n	4019d0 <_vfiprintf_r+0xe4>
  401f16:	9907      	ldr	r1, [sp, #28]
  401f18:	9608      	str	r6, [sp, #32]
  401f1a:	f8d1 b000 	ldr.w	fp, [r1]
  401f1e:	f04f 0200 	mov.w	r2, #0
  401f22:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401f26:	1d0e      	adds	r6, r1, #4
  401f28:	f1bb 0f00 	cmp.w	fp, #0
  401f2c:	f000 82e5 	beq.w	4024fa <_vfiprintf_r+0xc0e>
  401f30:	1c67      	adds	r7, r4, #1
  401f32:	f000 82c4 	beq.w	4024be <_vfiprintf_r+0xbd2>
  401f36:	4622      	mov	r2, r4
  401f38:	2100      	movs	r1, #0
  401f3a:	4658      	mov	r0, fp
  401f3c:	9301      	str	r3, [sp, #4]
  401f3e:	f001 fbd7 	bl	4036f0 <memchr>
  401f42:	9b01      	ldr	r3, [sp, #4]
  401f44:	2800      	cmp	r0, #0
  401f46:	f000 82e5 	beq.w	402514 <_vfiprintf_r+0xc28>
  401f4a:	eba0 020b 	sub.w	r2, r0, fp
  401f4e:	9205      	str	r2, [sp, #20]
  401f50:	9607      	str	r6, [sp, #28]
  401f52:	9302      	str	r3, [sp, #8]
  401f54:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401f58:	2400      	movs	r4, #0
  401f5a:	e619      	b.n	401b90 <_vfiprintf_r+0x2a4>
  401f5c:	f898 2000 	ldrb.w	r2, [r8]
  401f60:	2a2a      	cmp	r2, #42	; 0x2a
  401f62:	f108 0701 	add.w	r7, r8, #1
  401f66:	f000 82e9 	beq.w	40253c <_vfiprintf_r+0xc50>
  401f6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401f6e:	2909      	cmp	r1, #9
  401f70:	46b8      	mov	r8, r7
  401f72:	f04f 0400 	mov.w	r4, #0
  401f76:	f63f ad2d 	bhi.w	4019d4 <_vfiprintf_r+0xe8>
  401f7a:	f818 2b01 	ldrb.w	r2, [r8], #1
  401f7e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401f82:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401f86:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401f8a:	2909      	cmp	r1, #9
  401f8c:	d9f5      	bls.n	401f7a <_vfiprintf_r+0x68e>
  401f8e:	e521      	b.n	4019d4 <_vfiprintf_r+0xe8>
  401f90:	f043 0320 	orr.w	r3, r3, #32
  401f94:	f898 2000 	ldrb.w	r2, [r8]
  401f98:	e51a      	b.n	4019d0 <_vfiprintf_r+0xe4>
  401f9a:	9608      	str	r6, [sp, #32]
  401f9c:	2800      	cmp	r0, #0
  401f9e:	f040 82db 	bne.w	402558 <_vfiprintf_r+0xc6c>
  401fa2:	2a00      	cmp	r2, #0
  401fa4:	f000 80e7 	beq.w	402176 <_vfiprintf_r+0x88a>
  401fa8:	2101      	movs	r1, #1
  401faa:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401fae:	f04f 0200 	mov.w	r2, #0
  401fb2:	9101      	str	r1, [sp, #4]
  401fb4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401fb8:	9105      	str	r1, [sp, #20]
  401fba:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401fbe:	e77b      	b.n	401eb8 <_vfiprintf_r+0x5cc>
  401fc0:	9a07      	ldr	r2, [sp, #28]
  401fc2:	6813      	ldr	r3, [r2, #0]
  401fc4:	3204      	adds	r2, #4
  401fc6:	9207      	str	r2, [sp, #28]
  401fc8:	9a03      	ldr	r2, [sp, #12]
  401fca:	601a      	str	r2, [r3, #0]
  401fcc:	e4cb      	b.n	401966 <_vfiprintf_r+0x7a>
  401fce:	aa0f      	add	r2, sp, #60	; 0x3c
  401fd0:	9904      	ldr	r1, [sp, #16]
  401fd2:	4620      	mov	r0, r4
  401fd4:	f7ff fc4a 	bl	40186c <__sprint_r.part.0>
  401fd8:	2800      	cmp	r0, #0
  401fda:	f040 8139 	bne.w	402250 <_vfiprintf_r+0x964>
  401fde:	9910      	ldr	r1, [sp, #64]	; 0x40
  401fe0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401fe2:	f101 0c01 	add.w	ip, r1, #1
  401fe6:	46ce      	mov	lr, r9
  401fe8:	e5ff      	b.n	401bea <_vfiprintf_r+0x2fe>
  401fea:	9910      	ldr	r1, [sp, #64]	; 0x40
  401fec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401fee:	1c48      	adds	r0, r1, #1
  401ff0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401ff4:	2d00      	cmp	r5, #0
  401ff6:	f43f ae22 	beq.w	401c3e <_vfiprintf_r+0x352>
  401ffa:	3201      	adds	r2, #1
  401ffc:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402000:	2101      	movs	r1, #1
  402002:	2807      	cmp	r0, #7
  402004:	9211      	str	r2, [sp, #68]	; 0x44
  402006:	9010      	str	r0, [sp, #64]	; 0x40
  402008:	f8ca 5000 	str.w	r5, [sl]
  40200c:	f8ca 1004 	str.w	r1, [sl, #4]
  402010:	f340 8108 	ble.w	402224 <_vfiprintf_r+0x938>
  402014:	2a00      	cmp	r2, #0
  402016:	f040 81bc 	bne.w	402392 <_vfiprintf_r+0xaa6>
  40201a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40201c:	2b00      	cmp	r3, #0
  40201e:	f43f ae1f 	beq.w	401c60 <_vfiprintf_r+0x374>
  402022:	ab0e      	add	r3, sp, #56	; 0x38
  402024:	2202      	movs	r2, #2
  402026:	4608      	mov	r0, r1
  402028:	931c      	str	r3, [sp, #112]	; 0x70
  40202a:	921d      	str	r2, [sp, #116]	; 0x74
  40202c:	46ca      	mov	sl, r9
  40202e:	4601      	mov	r1, r0
  402030:	f10a 0a08 	add.w	sl, sl, #8
  402034:	3001      	adds	r0, #1
  402036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402038:	2b80      	cmp	r3, #128	; 0x80
  40203a:	f43f ae19 	beq.w	401c70 <_vfiprintf_r+0x384>
  40203e:	9b05      	ldr	r3, [sp, #20]
  402040:	1ae4      	subs	r4, r4, r3
  402042:	2c00      	cmp	r4, #0
  402044:	dd2e      	ble.n	4020a4 <_vfiprintf_r+0x7b8>
  402046:	2c10      	cmp	r4, #16
  402048:	4db3      	ldr	r5, [pc, #716]	; (402318 <_vfiprintf_r+0xa2c>)
  40204a:	dd1e      	ble.n	40208a <_vfiprintf_r+0x79e>
  40204c:	46d6      	mov	lr, sl
  40204e:	2610      	movs	r6, #16
  402050:	9f06      	ldr	r7, [sp, #24]
  402052:	f8dd a010 	ldr.w	sl, [sp, #16]
  402056:	e006      	b.n	402066 <_vfiprintf_r+0x77a>
  402058:	1c88      	adds	r0, r1, #2
  40205a:	f10e 0e08 	add.w	lr, lr, #8
  40205e:	4619      	mov	r1, r3
  402060:	3c10      	subs	r4, #16
  402062:	2c10      	cmp	r4, #16
  402064:	dd10      	ble.n	402088 <_vfiprintf_r+0x79c>
  402066:	1c4b      	adds	r3, r1, #1
  402068:	3210      	adds	r2, #16
  40206a:	2b07      	cmp	r3, #7
  40206c:	9211      	str	r2, [sp, #68]	; 0x44
  40206e:	e88e 0060 	stmia.w	lr, {r5, r6}
  402072:	9310      	str	r3, [sp, #64]	; 0x40
  402074:	ddf0      	ble.n	402058 <_vfiprintf_r+0x76c>
  402076:	2a00      	cmp	r2, #0
  402078:	d165      	bne.n	402146 <_vfiprintf_r+0x85a>
  40207a:	3c10      	subs	r4, #16
  40207c:	2c10      	cmp	r4, #16
  40207e:	f04f 0001 	mov.w	r0, #1
  402082:	4611      	mov	r1, r2
  402084:	46ce      	mov	lr, r9
  402086:	dcee      	bgt.n	402066 <_vfiprintf_r+0x77a>
  402088:	46f2      	mov	sl, lr
  40208a:	4422      	add	r2, r4
  40208c:	2807      	cmp	r0, #7
  40208e:	9211      	str	r2, [sp, #68]	; 0x44
  402090:	f8ca 5000 	str.w	r5, [sl]
  402094:	f8ca 4004 	str.w	r4, [sl, #4]
  402098:	9010      	str	r0, [sp, #64]	; 0x40
  40209a:	f300 8085 	bgt.w	4021a8 <_vfiprintf_r+0x8bc>
  40209e:	f10a 0a08 	add.w	sl, sl, #8
  4020a2:	3001      	adds	r0, #1
  4020a4:	9905      	ldr	r1, [sp, #20]
  4020a6:	f8ca b000 	str.w	fp, [sl]
  4020aa:	440a      	add	r2, r1
  4020ac:	2807      	cmp	r0, #7
  4020ae:	9211      	str	r2, [sp, #68]	; 0x44
  4020b0:	f8ca 1004 	str.w	r1, [sl, #4]
  4020b4:	9010      	str	r0, [sp, #64]	; 0x40
  4020b6:	f340 8082 	ble.w	4021be <_vfiprintf_r+0x8d2>
  4020ba:	2a00      	cmp	r2, #0
  4020bc:	f040 8118 	bne.w	4022f0 <_vfiprintf_r+0xa04>
  4020c0:	9b02      	ldr	r3, [sp, #8]
  4020c2:	9210      	str	r2, [sp, #64]	; 0x40
  4020c4:	0758      	lsls	r0, r3, #29
  4020c6:	d535      	bpl.n	402134 <_vfiprintf_r+0x848>
  4020c8:	9b08      	ldr	r3, [sp, #32]
  4020ca:	9901      	ldr	r1, [sp, #4]
  4020cc:	1a5c      	subs	r4, r3, r1
  4020ce:	2c00      	cmp	r4, #0
  4020d0:	f340 80e7 	ble.w	4022a2 <_vfiprintf_r+0x9b6>
  4020d4:	46ca      	mov	sl, r9
  4020d6:	2c10      	cmp	r4, #16
  4020d8:	f340 8218 	ble.w	40250c <_vfiprintf_r+0xc20>
  4020dc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4020de:	4e8f      	ldr	r6, [pc, #572]	; (40231c <_vfiprintf_r+0xa30>)
  4020e0:	9f06      	ldr	r7, [sp, #24]
  4020e2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4020e6:	2510      	movs	r5, #16
  4020e8:	e006      	b.n	4020f8 <_vfiprintf_r+0x80c>
  4020ea:	1c88      	adds	r0, r1, #2
  4020ec:	f10a 0a08 	add.w	sl, sl, #8
  4020f0:	4619      	mov	r1, r3
  4020f2:	3c10      	subs	r4, #16
  4020f4:	2c10      	cmp	r4, #16
  4020f6:	dd11      	ble.n	40211c <_vfiprintf_r+0x830>
  4020f8:	1c4b      	adds	r3, r1, #1
  4020fa:	3210      	adds	r2, #16
  4020fc:	2b07      	cmp	r3, #7
  4020fe:	9211      	str	r2, [sp, #68]	; 0x44
  402100:	f8ca 6000 	str.w	r6, [sl]
  402104:	f8ca 5004 	str.w	r5, [sl, #4]
  402108:	9310      	str	r3, [sp, #64]	; 0x40
  40210a:	ddee      	ble.n	4020ea <_vfiprintf_r+0x7fe>
  40210c:	bb42      	cbnz	r2, 402160 <_vfiprintf_r+0x874>
  40210e:	3c10      	subs	r4, #16
  402110:	2c10      	cmp	r4, #16
  402112:	f04f 0001 	mov.w	r0, #1
  402116:	4611      	mov	r1, r2
  402118:	46ca      	mov	sl, r9
  40211a:	dced      	bgt.n	4020f8 <_vfiprintf_r+0x80c>
  40211c:	4422      	add	r2, r4
  40211e:	2807      	cmp	r0, #7
  402120:	9211      	str	r2, [sp, #68]	; 0x44
  402122:	f8ca 6000 	str.w	r6, [sl]
  402126:	f8ca 4004 	str.w	r4, [sl, #4]
  40212a:	9010      	str	r0, [sp, #64]	; 0x40
  40212c:	dd51      	ble.n	4021d2 <_vfiprintf_r+0x8e6>
  40212e:	2a00      	cmp	r2, #0
  402130:	f040 819b 	bne.w	40246a <_vfiprintf_r+0xb7e>
  402134:	9b03      	ldr	r3, [sp, #12]
  402136:	9a08      	ldr	r2, [sp, #32]
  402138:	9901      	ldr	r1, [sp, #4]
  40213a:	428a      	cmp	r2, r1
  40213c:	bfac      	ite	ge
  40213e:	189b      	addge	r3, r3, r2
  402140:	185b      	addlt	r3, r3, r1
  402142:	9303      	str	r3, [sp, #12]
  402144:	e04e      	b.n	4021e4 <_vfiprintf_r+0x8f8>
  402146:	aa0f      	add	r2, sp, #60	; 0x3c
  402148:	4651      	mov	r1, sl
  40214a:	4638      	mov	r0, r7
  40214c:	f7ff fb8e 	bl	40186c <__sprint_r.part.0>
  402150:	2800      	cmp	r0, #0
  402152:	f040 813f 	bne.w	4023d4 <_vfiprintf_r+0xae8>
  402156:	9910      	ldr	r1, [sp, #64]	; 0x40
  402158:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40215a:	1c48      	adds	r0, r1, #1
  40215c:	46ce      	mov	lr, r9
  40215e:	e77f      	b.n	402060 <_vfiprintf_r+0x774>
  402160:	aa0f      	add	r2, sp, #60	; 0x3c
  402162:	4659      	mov	r1, fp
  402164:	4638      	mov	r0, r7
  402166:	f7ff fb81 	bl	40186c <__sprint_r.part.0>
  40216a:	b960      	cbnz	r0, 402186 <_vfiprintf_r+0x89a>
  40216c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40216e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402170:	1c48      	adds	r0, r1, #1
  402172:	46ca      	mov	sl, r9
  402174:	e7bd      	b.n	4020f2 <_vfiprintf_r+0x806>
  402176:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402178:	f8dd b010 	ldr.w	fp, [sp, #16]
  40217c:	2b00      	cmp	r3, #0
  40217e:	f040 81d4 	bne.w	40252a <_vfiprintf_r+0xc3e>
  402182:	2300      	movs	r3, #0
  402184:	9310      	str	r3, [sp, #64]	; 0x40
  402186:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40218a:	f013 0f01 	tst.w	r3, #1
  40218e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402192:	d102      	bne.n	40219a <_vfiprintf_r+0x8ae>
  402194:	059a      	lsls	r2, r3, #22
  402196:	f140 80de 	bpl.w	402356 <_vfiprintf_r+0xa6a>
  40219a:	065b      	lsls	r3, r3, #25
  40219c:	f53f acb2 	bmi.w	401b04 <_vfiprintf_r+0x218>
  4021a0:	9803      	ldr	r0, [sp, #12]
  4021a2:	b02d      	add	sp, #180	; 0xb4
  4021a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021a8:	2a00      	cmp	r2, #0
  4021aa:	f040 8106 	bne.w	4023ba <_vfiprintf_r+0xace>
  4021ae:	9a05      	ldr	r2, [sp, #20]
  4021b0:	921d      	str	r2, [sp, #116]	; 0x74
  4021b2:	2301      	movs	r3, #1
  4021b4:	9211      	str	r2, [sp, #68]	; 0x44
  4021b6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4021ba:	9310      	str	r3, [sp, #64]	; 0x40
  4021bc:	46ca      	mov	sl, r9
  4021be:	f10a 0a08 	add.w	sl, sl, #8
  4021c2:	9b02      	ldr	r3, [sp, #8]
  4021c4:	0759      	lsls	r1, r3, #29
  4021c6:	d504      	bpl.n	4021d2 <_vfiprintf_r+0x8e6>
  4021c8:	9b08      	ldr	r3, [sp, #32]
  4021ca:	9901      	ldr	r1, [sp, #4]
  4021cc:	1a5c      	subs	r4, r3, r1
  4021ce:	2c00      	cmp	r4, #0
  4021d0:	dc81      	bgt.n	4020d6 <_vfiprintf_r+0x7ea>
  4021d2:	9b03      	ldr	r3, [sp, #12]
  4021d4:	9908      	ldr	r1, [sp, #32]
  4021d6:	9801      	ldr	r0, [sp, #4]
  4021d8:	4281      	cmp	r1, r0
  4021da:	bfac      	ite	ge
  4021dc:	185b      	addge	r3, r3, r1
  4021de:	181b      	addlt	r3, r3, r0
  4021e0:	9303      	str	r3, [sp, #12]
  4021e2:	bb72      	cbnz	r2, 402242 <_vfiprintf_r+0x956>
  4021e4:	2300      	movs	r3, #0
  4021e6:	9310      	str	r3, [sp, #64]	; 0x40
  4021e8:	46ca      	mov	sl, r9
  4021ea:	f7ff bbbc 	b.w	401966 <_vfiprintf_r+0x7a>
  4021ee:	aa0f      	add	r2, sp, #60	; 0x3c
  4021f0:	9904      	ldr	r1, [sp, #16]
  4021f2:	4620      	mov	r0, r4
  4021f4:	f7ff fb3a 	bl	40186c <__sprint_r.part.0>
  4021f8:	bb50      	cbnz	r0, 402250 <_vfiprintf_r+0x964>
  4021fa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4021fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4021fe:	f101 0e01 	add.w	lr, r1, #1
  402202:	46cc      	mov	ip, r9
  402204:	e548      	b.n	401c98 <_vfiprintf_r+0x3ac>
  402206:	2a00      	cmp	r2, #0
  402208:	f040 8140 	bne.w	40248c <_vfiprintf_r+0xba0>
  40220c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  402210:	2900      	cmp	r1, #0
  402212:	f000 811b 	beq.w	40244c <_vfiprintf_r+0xb60>
  402216:	2201      	movs	r2, #1
  402218:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40221c:	4610      	mov	r0, r2
  40221e:	921d      	str	r2, [sp, #116]	; 0x74
  402220:	911c      	str	r1, [sp, #112]	; 0x70
  402222:	46ca      	mov	sl, r9
  402224:	4601      	mov	r1, r0
  402226:	f10a 0a08 	add.w	sl, sl, #8
  40222a:	3001      	adds	r0, #1
  40222c:	e507      	b.n	401c3e <_vfiprintf_r+0x352>
  40222e:	9b02      	ldr	r3, [sp, #8]
  402230:	2a01      	cmp	r2, #1
  402232:	f000 8098 	beq.w	402366 <_vfiprintf_r+0xa7a>
  402236:	2a02      	cmp	r2, #2
  402238:	d10d      	bne.n	402256 <_vfiprintf_r+0x96a>
  40223a:	9302      	str	r3, [sp, #8]
  40223c:	2600      	movs	r6, #0
  40223e:	2700      	movs	r7, #0
  402240:	e5b0      	b.n	401da4 <_vfiprintf_r+0x4b8>
  402242:	aa0f      	add	r2, sp, #60	; 0x3c
  402244:	9904      	ldr	r1, [sp, #16]
  402246:	9806      	ldr	r0, [sp, #24]
  402248:	f7ff fb10 	bl	40186c <__sprint_r.part.0>
  40224c:	2800      	cmp	r0, #0
  40224e:	d0c9      	beq.n	4021e4 <_vfiprintf_r+0x8f8>
  402250:	f8dd b010 	ldr.w	fp, [sp, #16]
  402254:	e797      	b.n	402186 <_vfiprintf_r+0x89a>
  402256:	9302      	str	r3, [sp, #8]
  402258:	2600      	movs	r6, #0
  40225a:	2700      	movs	r7, #0
  40225c:	4649      	mov	r1, r9
  40225e:	e000      	b.n	402262 <_vfiprintf_r+0x976>
  402260:	4659      	mov	r1, fp
  402262:	08f2      	lsrs	r2, r6, #3
  402264:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402268:	08f8      	lsrs	r0, r7, #3
  40226a:	f006 0307 	and.w	r3, r6, #7
  40226e:	4607      	mov	r7, r0
  402270:	4616      	mov	r6, r2
  402272:	3330      	adds	r3, #48	; 0x30
  402274:	ea56 0207 	orrs.w	r2, r6, r7
  402278:	f801 3c01 	strb.w	r3, [r1, #-1]
  40227c:	f101 3bff 	add.w	fp, r1, #4294967295
  402280:	d1ee      	bne.n	402260 <_vfiprintf_r+0x974>
  402282:	9a02      	ldr	r2, [sp, #8]
  402284:	07d6      	lsls	r6, r2, #31
  402286:	f57f ad9d 	bpl.w	401dc4 <_vfiprintf_r+0x4d8>
  40228a:	2b30      	cmp	r3, #48	; 0x30
  40228c:	f43f ad9a 	beq.w	401dc4 <_vfiprintf_r+0x4d8>
  402290:	3902      	subs	r1, #2
  402292:	2330      	movs	r3, #48	; 0x30
  402294:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402298:	eba9 0301 	sub.w	r3, r9, r1
  40229c:	9305      	str	r3, [sp, #20]
  40229e:	468b      	mov	fp, r1
  4022a0:	e476      	b.n	401b90 <_vfiprintf_r+0x2a4>
  4022a2:	9b03      	ldr	r3, [sp, #12]
  4022a4:	9a08      	ldr	r2, [sp, #32]
  4022a6:	428a      	cmp	r2, r1
  4022a8:	bfac      	ite	ge
  4022aa:	189b      	addge	r3, r3, r2
  4022ac:	185b      	addlt	r3, r3, r1
  4022ae:	9303      	str	r3, [sp, #12]
  4022b0:	e798      	b.n	4021e4 <_vfiprintf_r+0x8f8>
  4022b2:	2202      	movs	r2, #2
  4022b4:	e44d      	b.n	401b52 <_vfiprintf_r+0x266>
  4022b6:	2f00      	cmp	r7, #0
  4022b8:	bf08      	it	eq
  4022ba:	2e0a      	cmpeq	r6, #10
  4022bc:	d352      	bcc.n	402364 <_vfiprintf_r+0xa78>
  4022be:	46cb      	mov	fp, r9
  4022c0:	4630      	mov	r0, r6
  4022c2:	4639      	mov	r1, r7
  4022c4:	220a      	movs	r2, #10
  4022c6:	2300      	movs	r3, #0
  4022c8:	f001 ffb6 	bl	404238 <__aeabi_uldivmod>
  4022cc:	3230      	adds	r2, #48	; 0x30
  4022ce:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4022d2:	4630      	mov	r0, r6
  4022d4:	4639      	mov	r1, r7
  4022d6:	2300      	movs	r3, #0
  4022d8:	220a      	movs	r2, #10
  4022da:	f001 ffad 	bl	404238 <__aeabi_uldivmod>
  4022de:	4606      	mov	r6, r0
  4022e0:	460f      	mov	r7, r1
  4022e2:	ea56 0307 	orrs.w	r3, r6, r7
  4022e6:	d1eb      	bne.n	4022c0 <_vfiprintf_r+0x9d4>
  4022e8:	e56c      	b.n	401dc4 <_vfiprintf_r+0x4d8>
  4022ea:	9405      	str	r4, [sp, #20]
  4022ec:	46cb      	mov	fp, r9
  4022ee:	e44f      	b.n	401b90 <_vfiprintf_r+0x2a4>
  4022f0:	aa0f      	add	r2, sp, #60	; 0x3c
  4022f2:	9904      	ldr	r1, [sp, #16]
  4022f4:	9806      	ldr	r0, [sp, #24]
  4022f6:	f7ff fab9 	bl	40186c <__sprint_r.part.0>
  4022fa:	2800      	cmp	r0, #0
  4022fc:	d1a8      	bne.n	402250 <_vfiprintf_r+0x964>
  4022fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402300:	46ca      	mov	sl, r9
  402302:	e75e      	b.n	4021c2 <_vfiprintf_r+0x8d6>
  402304:	aa0f      	add	r2, sp, #60	; 0x3c
  402306:	9904      	ldr	r1, [sp, #16]
  402308:	9806      	ldr	r0, [sp, #24]
  40230a:	f7ff faaf 	bl	40186c <__sprint_r.part.0>
  40230e:	2800      	cmp	r0, #0
  402310:	d19e      	bne.n	402250 <_vfiprintf_r+0x964>
  402312:	46ca      	mov	sl, r9
  402314:	f7ff bbc0 	b.w	401a98 <_vfiprintf_r+0x1ac>
  402318:	00404590 	.word	0x00404590
  40231c:	00404580 	.word	0x00404580
  402320:	3104      	adds	r1, #4
  402322:	6816      	ldr	r6, [r2, #0]
  402324:	9107      	str	r1, [sp, #28]
  402326:	2201      	movs	r2, #1
  402328:	2700      	movs	r7, #0
  40232a:	e412      	b.n	401b52 <_vfiprintf_r+0x266>
  40232c:	9807      	ldr	r0, [sp, #28]
  40232e:	4601      	mov	r1, r0
  402330:	3104      	adds	r1, #4
  402332:	6806      	ldr	r6, [r0, #0]
  402334:	9107      	str	r1, [sp, #28]
  402336:	2700      	movs	r7, #0
  402338:	e40b      	b.n	401b52 <_vfiprintf_r+0x266>
  40233a:	680e      	ldr	r6, [r1, #0]
  40233c:	3104      	adds	r1, #4
  40233e:	9107      	str	r1, [sp, #28]
  402340:	2700      	movs	r7, #0
  402342:	e591      	b.n	401e68 <_vfiprintf_r+0x57c>
  402344:	9907      	ldr	r1, [sp, #28]
  402346:	680e      	ldr	r6, [r1, #0]
  402348:	460a      	mov	r2, r1
  40234a:	17f7      	asrs	r7, r6, #31
  40234c:	3204      	adds	r2, #4
  40234e:	9207      	str	r2, [sp, #28]
  402350:	4630      	mov	r0, r6
  402352:	4639      	mov	r1, r7
  402354:	e50f      	b.n	401d76 <_vfiprintf_r+0x48a>
  402356:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40235a:	f000 fe7f 	bl	40305c <__retarget_lock_release_recursive>
  40235e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402362:	e71a      	b.n	40219a <_vfiprintf_r+0x8ae>
  402364:	9b02      	ldr	r3, [sp, #8]
  402366:	9302      	str	r3, [sp, #8]
  402368:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40236c:	3630      	adds	r6, #48	; 0x30
  40236e:	2301      	movs	r3, #1
  402370:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402374:	9305      	str	r3, [sp, #20]
  402376:	e40b      	b.n	401b90 <_vfiprintf_r+0x2a4>
  402378:	aa0f      	add	r2, sp, #60	; 0x3c
  40237a:	9904      	ldr	r1, [sp, #16]
  40237c:	9806      	ldr	r0, [sp, #24]
  40237e:	f7ff fa75 	bl	40186c <__sprint_r.part.0>
  402382:	2800      	cmp	r0, #0
  402384:	f47f af64 	bne.w	402250 <_vfiprintf_r+0x964>
  402388:	9910      	ldr	r1, [sp, #64]	; 0x40
  40238a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40238c:	1c48      	adds	r0, r1, #1
  40238e:	46ca      	mov	sl, r9
  402390:	e651      	b.n	402036 <_vfiprintf_r+0x74a>
  402392:	aa0f      	add	r2, sp, #60	; 0x3c
  402394:	9904      	ldr	r1, [sp, #16]
  402396:	9806      	ldr	r0, [sp, #24]
  402398:	f7ff fa68 	bl	40186c <__sprint_r.part.0>
  40239c:	2800      	cmp	r0, #0
  40239e:	f47f af57 	bne.w	402250 <_vfiprintf_r+0x964>
  4023a2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4023a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4023a6:	1c48      	adds	r0, r1, #1
  4023a8:	46ca      	mov	sl, r9
  4023aa:	e448      	b.n	401c3e <_vfiprintf_r+0x352>
  4023ac:	2a00      	cmp	r2, #0
  4023ae:	f040 8091 	bne.w	4024d4 <_vfiprintf_r+0xbe8>
  4023b2:	2001      	movs	r0, #1
  4023b4:	4611      	mov	r1, r2
  4023b6:	46ca      	mov	sl, r9
  4023b8:	e641      	b.n	40203e <_vfiprintf_r+0x752>
  4023ba:	aa0f      	add	r2, sp, #60	; 0x3c
  4023bc:	9904      	ldr	r1, [sp, #16]
  4023be:	9806      	ldr	r0, [sp, #24]
  4023c0:	f7ff fa54 	bl	40186c <__sprint_r.part.0>
  4023c4:	2800      	cmp	r0, #0
  4023c6:	f47f af43 	bne.w	402250 <_vfiprintf_r+0x964>
  4023ca:	9810      	ldr	r0, [sp, #64]	; 0x40
  4023cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4023ce:	3001      	adds	r0, #1
  4023d0:	46ca      	mov	sl, r9
  4023d2:	e667      	b.n	4020a4 <_vfiprintf_r+0x7b8>
  4023d4:	46d3      	mov	fp, sl
  4023d6:	e6d6      	b.n	402186 <_vfiprintf_r+0x89a>
  4023d8:	9e07      	ldr	r6, [sp, #28]
  4023da:	3607      	adds	r6, #7
  4023dc:	f026 0207 	bic.w	r2, r6, #7
  4023e0:	f102 0108 	add.w	r1, r2, #8
  4023e4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4023e8:	9107      	str	r1, [sp, #28]
  4023ea:	2201      	movs	r2, #1
  4023ec:	f7ff bbb1 	b.w	401b52 <_vfiprintf_r+0x266>
  4023f0:	9e07      	ldr	r6, [sp, #28]
  4023f2:	3607      	adds	r6, #7
  4023f4:	f026 0607 	bic.w	r6, r6, #7
  4023f8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4023fc:	f106 0208 	add.w	r2, r6, #8
  402400:	9207      	str	r2, [sp, #28]
  402402:	4606      	mov	r6, r0
  402404:	460f      	mov	r7, r1
  402406:	e4b6      	b.n	401d76 <_vfiprintf_r+0x48a>
  402408:	9e07      	ldr	r6, [sp, #28]
  40240a:	3607      	adds	r6, #7
  40240c:	f026 0207 	bic.w	r2, r6, #7
  402410:	f102 0108 	add.w	r1, r2, #8
  402414:	e9d2 6700 	ldrd	r6, r7, [r2]
  402418:	9107      	str	r1, [sp, #28]
  40241a:	2200      	movs	r2, #0
  40241c:	f7ff bb99 	b.w	401b52 <_vfiprintf_r+0x266>
  402420:	9e07      	ldr	r6, [sp, #28]
  402422:	3607      	adds	r6, #7
  402424:	f026 0107 	bic.w	r1, r6, #7
  402428:	f101 0008 	add.w	r0, r1, #8
  40242c:	9007      	str	r0, [sp, #28]
  40242e:	e9d1 6700 	ldrd	r6, r7, [r1]
  402432:	e519      	b.n	401e68 <_vfiprintf_r+0x57c>
  402434:	46cb      	mov	fp, r9
  402436:	f7ff bbab 	b.w	401b90 <_vfiprintf_r+0x2a4>
  40243a:	252d      	movs	r5, #45	; 0x2d
  40243c:	4276      	negs	r6, r6
  40243e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402442:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402446:	2201      	movs	r2, #1
  402448:	f7ff bb88 	b.w	401b5c <_vfiprintf_r+0x270>
  40244c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40244e:	b9b3      	cbnz	r3, 40247e <_vfiprintf_r+0xb92>
  402450:	4611      	mov	r1, r2
  402452:	2001      	movs	r0, #1
  402454:	46ca      	mov	sl, r9
  402456:	e5f2      	b.n	40203e <_vfiprintf_r+0x752>
  402458:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40245c:	f000 fdfe 	bl	40305c <__retarget_lock_release_recursive>
  402460:	f04f 33ff 	mov.w	r3, #4294967295
  402464:	9303      	str	r3, [sp, #12]
  402466:	f7ff bb50 	b.w	401b0a <_vfiprintf_r+0x21e>
  40246a:	aa0f      	add	r2, sp, #60	; 0x3c
  40246c:	9904      	ldr	r1, [sp, #16]
  40246e:	9806      	ldr	r0, [sp, #24]
  402470:	f7ff f9fc 	bl	40186c <__sprint_r.part.0>
  402474:	2800      	cmp	r0, #0
  402476:	f47f aeeb 	bne.w	402250 <_vfiprintf_r+0x964>
  40247a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40247c:	e6a9      	b.n	4021d2 <_vfiprintf_r+0x8e6>
  40247e:	ab0e      	add	r3, sp, #56	; 0x38
  402480:	2202      	movs	r2, #2
  402482:	931c      	str	r3, [sp, #112]	; 0x70
  402484:	921d      	str	r2, [sp, #116]	; 0x74
  402486:	2001      	movs	r0, #1
  402488:	46ca      	mov	sl, r9
  40248a:	e5d0      	b.n	40202e <_vfiprintf_r+0x742>
  40248c:	aa0f      	add	r2, sp, #60	; 0x3c
  40248e:	9904      	ldr	r1, [sp, #16]
  402490:	9806      	ldr	r0, [sp, #24]
  402492:	f7ff f9eb 	bl	40186c <__sprint_r.part.0>
  402496:	2800      	cmp	r0, #0
  402498:	f47f aeda 	bne.w	402250 <_vfiprintf_r+0x964>
  40249c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40249e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4024a0:	1c48      	adds	r0, r1, #1
  4024a2:	46ca      	mov	sl, r9
  4024a4:	e5a4      	b.n	401ff0 <_vfiprintf_r+0x704>
  4024a6:	9a07      	ldr	r2, [sp, #28]
  4024a8:	9903      	ldr	r1, [sp, #12]
  4024aa:	6813      	ldr	r3, [r2, #0]
  4024ac:	17cd      	asrs	r5, r1, #31
  4024ae:	4608      	mov	r0, r1
  4024b0:	3204      	adds	r2, #4
  4024b2:	4629      	mov	r1, r5
  4024b4:	9207      	str	r2, [sp, #28]
  4024b6:	e9c3 0100 	strd	r0, r1, [r3]
  4024ba:	f7ff ba54 	b.w	401966 <_vfiprintf_r+0x7a>
  4024be:	4658      	mov	r0, fp
  4024c0:	9607      	str	r6, [sp, #28]
  4024c2:	9302      	str	r3, [sp, #8]
  4024c4:	f001 fc7c 	bl	403dc0 <strlen>
  4024c8:	2400      	movs	r4, #0
  4024ca:	9005      	str	r0, [sp, #20]
  4024cc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4024d0:	f7ff bb5e 	b.w	401b90 <_vfiprintf_r+0x2a4>
  4024d4:	aa0f      	add	r2, sp, #60	; 0x3c
  4024d6:	9904      	ldr	r1, [sp, #16]
  4024d8:	9806      	ldr	r0, [sp, #24]
  4024da:	f7ff f9c7 	bl	40186c <__sprint_r.part.0>
  4024de:	2800      	cmp	r0, #0
  4024e0:	f47f aeb6 	bne.w	402250 <_vfiprintf_r+0x964>
  4024e4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4024e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4024e8:	1c48      	adds	r0, r1, #1
  4024ea:	46ca      	mov	sl, r9
  4024ec:	e5a7      	b.n	40203e <_vfiprintf_r+0x752>
  4024ee:	9910      	ldr	r1, [sp, #64]	; 0x40
  4024f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4024f2:	4e20      	ldr	r6, [pc, #128]	; (402574 <_vfiprintf_r+0xc88>)
  4024f4:	3101      	adds	r1, #1
  4024f6:	f7ff bb90 	b.w	401c1a <_vfiprintf_r+0x32e>
  4024fa:	2c06      	cmp	r4, #6
  4024fc:	bf28      	it	cs
  4024fe:	2406      	movcs	r4, #6
  402500:	9405      	str	r4, [sp, #20]
  402502:	9607      	str	r6, [sp, #28]
  402504:	9401      	str	r4, [sp, #4]
  402506:	f8df b070 	ldr.w	fp, [pc, #112]	; 402578 <_vfiprintf_r+0xc8c>
  40250a:	e4d5      	b.n	401eb8 <_vfiprintf_r+0x5cc>
  40250c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40250e:	4e19      	ldr	r6, [pc, #100]	; (402574 <_vfiprintf_r+0xc88>)
  402510:	3001      	adds	r0, #1
  402512:	e603      	b.n	40211c <_vfiprintf_r+0x830>
  402514:	9405      	str	r4, [sp, #20]
  402516:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40251a:	9607      	str	r6, [sp, #28]
  40251c:	9302      	str	r3, [sp, #8]
  40251e:	4604      	mov	r4, r0
  402520:	f7ff bb36 	b.w	401b90 <_vfiprintf_r+0x2a4>
  402524:	4686      	mov	lr, r0
  402526:	f7ff bbce 	b.w	401cc6 <_vfiprintf_r+0x3da>
  40252a:	9806      	ldr	r0, [sp, #24]
  40252c:	aa0f      	add	r2, sp, #60	; 0x3c
  40252e:	4659      	mov	r1, fp
  402530:	f7ff f99c 	bl	40186c <__sprint_r.part.0>
  402534:	2800      	cmp	r0, #0
  402536:	f43f ae24 	beq.w	402182 <_vfiprintf_r+0x896>
  40253a:	e624      	b.n	402186 <_vfiprintf_r+0x89a>
  40253c:	9907      	ldr	r1, [sp, #28]
  40253e:	f898 2001 	ldrb.w	r2, [r8, #1]
  402542:	680c      	ldr	r4, [r1, #0]
  402544:	3104      	adds	r1, #4
  402546:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40254a:	46b8      	mov	r8, r7
  40254c:	9107      	str	r1, [sp, #28]
  40254e:	f7ff ba3f 	b.w	4019d0 <_vfiprintf_r+0xe4>
  402552:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402556:	e43c      	b.n	401dd2 <_vfiprintf_r+0x4e6>
  402558:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40255c:	e521      	b.n	401fa2 <_vfiprintf_r+0x6b6>
  40255e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402562:	f7ff bbf4 	b.w	401d4e <_vfiprintf_r+0x462>
  402566:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40256a:	e491      	b.n	401e90 <_vfiprintf_r+0x5a4>
  40256c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402570:	e469      	b.n	401e46 <_vfiprintf_r+0x55a>
  402572:	bf00      	nop
  402574:	00404580 	.word	0x00404580
  402578:	00404578 	.word	0x00404578

0040257c <__sbprintf>:
  40257c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402580:	460c      	mov	r4, r1
  402582:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402586:	8989      	ldrh	r1, [r1, #12]
  402588:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40258a:	89e5      	ldrh	r5, [r4, #14]
  40258c:	9619      	str	r6, [sp, #100]	; 0x64
  40258e:	f021 0102 	bic.w	r1, r1, #2
  402592:	4606      	mov	r6, r0
  402594:	69e0      	ldr	r0, [r4, #28]
  402596:	f8ad 100c 	strh.w	r1, [sp, #12]
  40259a:	4617      	mov	r7, r2
  40259c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4025a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4025a2:	f8ad 500e 	strh.w	r5, [sp, #14]
  4025a6:	4698      	mov	r8, r3
  4025a8:	ad1a      	add	r5, sp, #104	; 0x68
  4025aa:	2300      	movs	r3, #0
  4025ac:	9007      	str	r0, [sp, #28]
  4025ae:	a816      	add	r0, sp, #88	; 0x58
  4025b0:	9209      	str	r2, [sp, #36]	; 0x24
  4025b2:	9306      	str	r3, [sp, #24]
  4025b4:	9500      	str	r5, [sp, #0]
  4025b6:	9504      	str	r5, [sp, #16]
  4025b8:	9102      	str	r1, [sp, #8]
  4025ba:	9105      	str	r1, [sp, #20]
  4025bc:	f000 fd48 	bl	403050 <__retarget_lock_init_recursive>
  4025c0:	4643      	mov	r3, r8
  4025c2:	463a      	mov	r2, r7
  4025c4:	4669      	mov	r1, sp
  4025c6:	4630      	mov	r0, r6
  4025c8:	f7ff f990 	bl	4018ec <_vfiprintf_r>
  4025cc:	1e05      	subs	r5, r0, #0
  4025ce:	db07      	blt.n	4025e0 <__sbprintf+0x64>
  4025d0:	4630      	mov	r0, r6
  4025d2:	4669      	mov	r1, sp
  4025d4:	f000 f928 	bl	402828 <_fflush_r>
  4025d8:	2800      	cmp	r0, #0
  4025da:	bf18      	it	ne
  4025dc:	f04f 35ff 	movne.w	r5, #4294967295
  4025e0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4025e4:	065b      	lsls	r3, r3, #25
  4025e6:	d503      	bpl.n	4025f0 <__sbprintf+0x74>
  4025e8:	89a3      	ldrh	r3, [r4, #12]
  4025ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4025ee:	81a3      	strh	r3, [r4, #12]
  4025f0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4025f2:	f000 fd2f 	bl	403054 <__retarget_lock_close_recursive>
  4025f6:	4628      	mov	r0, r5
  4025f8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4025fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402600 <__swsetup_r>:
  402600:	b538      	push	{r3, r4, r5, lr}
  402602:	4b30      	ldr	r3, [pc, #192]	; (4026c4 <__swsetup_r+0xc4>)
  402604:	681b      	ldr	r3, [r3, #0]
  402606:	4605      	mov	r5, r0
  402608:	460c      	mov	r4, r1
  40260a:	b113      	cbz	r3, 402612 <__swsetup_r+0x12>
  40260c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40260e:	2a00      	cmp	r2, #0
  402610:	d038      	beq.n	402684 <__swsetup_r+0x84>
  402612:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402616:	b293      	uxth	r3, r2
  402618:	0718      	lsls	r0, r3, #28
  40261a:	d50c      	bpl.n	402636 <__swsetup_r+0x36>
  40261c:	6920      	ldr	r0, [r4, #16]
  40261e:	b1a8      	cbz	r0, 40264c <__swsetup_r+0x4c>
  402620:	f013 0201 	ands.w	r2, r3, #1
  402624:	d01e      	beq.n	402664 <__swsetup_r+0x64>
  402626:	6963      	ldr	r3, [r4, #20]
  402628:	2200      	movs	r2, #0
  40262a:	425b      	negs	r3, r3
  40262c:	61a3      	str	r3, [r4, #24]
  40262e:	60a2      	str	r2, [r4, #8]
  402630:	b1f0      	cbz	r0, 402670 <__swsetup_r+0x70>
  402632:	2000      	movs	r0, #0
  402634:	bd38      	pop	{r3, r4, r5, pc}
  402636:	06d9      	lsls	r1, r3, #27
  402638:	d53c      	bpl.n	4026b4 <__swsetup_r+0xb4>
  40263a:	0758      	lsls	r0, r3, #29
  40263c:	d426      	bmi.n	40268c <__swsetup_r+0x8c>
  40263e:	6920      	ldr	r0, [r4, #16]
  402640:	f042 0308 	orr.w	r3, r2, #8
  402644:	81a3      	strh	r3, [r4, #12]
  402646:	b29b      	uxth	r3, r3
  402648:	2800      	cmp	r0, #0
  40264a:	d1e9      	bne.n	402620 <__swsetup_r+0x20>
  40264c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402650:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402654:	d0e4      	beq.n	402620 <__swsetup_r+0x20>
  402656:	4628      	mov	r0, r5
  402658:	4621      	mov	r1, r4
  40265a:	f000 fd2f 	bl	4030bc <__smakebuf_r>
  40265e:	89a3      	ldrh	r3, [r4, #12]
  402660:	6920      	ldr	r0, [r4, #16]
  402662:	e7dd      	b.n	402620 <__swsetup_r+0x20>
  402664:	0799      	lsls	r1, r3, #30
  402666:	bf58      	it	pl
  402668:	6962      	ldrpl	r2, [r4, #20]
  40266a:	60a2      	str	r2, [r4, #8]
  40266c:	2800      	cmp	r0, #0
  40266e:	d1e0      	bne.n	402632 <__swsetup_r+0x32>
  402670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402674:	061a      	lsls	r2, r3, #24
  402676:	d5dd      	bpl.n	402634 <__swsetup_r+0x34>
  402678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40267c:	81a3      	strh	r3, [r4, #12]
  40267e:	f04f 30ff 	mov.w	r0, #4294967295
  402682:	bd38      	pop	{r3, r4, r5, pc}
  402684:	4618      	mov	r0, r3
  402686:	f000 f927 	bl	4028d8 <__sinit>
  40268a:	e7c2      	b.n	402612 <__swsetup_r+0x12>
  40268c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40268e:	b151      	cbz	r1, 4026a6 <__swsetup_r+0xa6>
  402690:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402694:	4299      	cmp	r1, r3
  402696:	d004      	beq.n	4026a2 <__swsetup_r+0xa2>
  402698:	4628      	mov	r0, r5
  40269a:	f000 fa43 	bl	402b24 <_free_r>
  40269e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4026a2:	2300      	movs	r3, #0
  4026a4:	6323      	str	r3, [r4, #48]	; 0x30
  4026a6:	2300      	movs	r3, #0
  4026a8:	6920      	ldr	r0, [r4, #16]
  4026aa:	6063      	str	r3, [r4, #4]
  4026ac:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4026b0:	6020      	str	r0, [r4, #0]
  4026b2:	e7c5      	b.n	402640 <__swsetup_r+0x40>
  4026b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4026b8:	2309      	movs	r3, #9
  4026ba:	602b      	str	r3, [r5, #0]
  4026bc:	f04f 30ff 	mov.w	r0, #4294967295
  4026c0:	81a2      	strh	r2, [r4, #12]
  4026c2:	bd38      	pop	{r3, r4, r5, pc}
  4026c4:	20400010 	.word	0x20400010

004026c8 <register_fini>:
  4026c8:	4b02      	ldr	r3, [pc, #8]	; (4026d4 <register_fini+0xc>)
  4026ca:	b113      	cbz	r3, 4026d2 <register_fini+0xa>
  4026cc:	4802      	ldr	r0, [pc, #8]	; (4026d8 <register_fini+0x10>)
  4026ce:	f000 b805 	b.w	4026dc <atexit>
  4026d2:	4770      	bx	lr
  4026d4:	00000000 	.word	0x00000000
  4026d8:	00402949 	.word	0x00402949

004026dc <atexit>:
  4026dc:	2300      	movs	r3, #0
  4026de:	4601      	mov	r1, r0
  4026e0:	461a      	mov	r2, r3
  4026e2:	4618      	mov	r0, r3
  4026e4:	f001 bc80 	b.w	403fe8 <__register_exitproc>

004026e8 <__sflush_r>:
  4026e8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4026ec:	b29a      	uxth	r2, r3
  4026ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4026f2:	460d      	mov	r5, r1
  4026f4:	0711      	lsls	r1, r2, #28
  4026f6:	4680      	mov	r8, r0
  4026f8:	d43a      	bmi.n	402770 <__sflush_r+0x88>
  4026fa:	686a      	ldr	r2, [r5, #4]
  4026fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402700:	2a00      	cmp	r2, #0
  402702:	81ab      	strh	r3, [r5, #12]
  402704:	dd6f      	ble.n	4027e6 <__sflush_r+0xfe>
  402706:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402708:	2c00      	cmp	r4, #0
  40270a:	d049      	beq.n	4027a0 <__sflush_r+0xb8>
  40270c:	2200      	movs	r2, #0
  40270e:	b29b      	uxth	r3, r3
  402710:	f8d8 6000 	ldr.w	r6, [r8]
  402714:	f8c8 2000 	str.w	r2, [r8]
  402718:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40271c:	d067      	beq.n	4027ee <__sflush_r+0x106>
  40271e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402720:	075f      	lsls	r7, r3, #29
  402722:	d505      	bpl.n	402730 <__sflush_r+0x48>
  402724:	6869      	ldr	r1, [r5, #4]
  402726:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402728:	1a52      	subs	r2, r2, r1
  40272a:	b10b      	cbz	r3, 402730 <__sflush_r+0x48>
  40272c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40272e:	1ad2      	subs	r2, r2, r3
  402730:	2300      	movs	r3, #0
  402732:	69e9      	ldr	r1, [r5, #28]
  402734:	4640      	mov	r0, r8
  402736:	47a0      	blx	r4
  402738:	1c44      	adds	r4, r0, #1
  40273a:	d03c      	beq.n	4027b6 <__sflush_r+0xce>
  40273c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402740:	692a      	ldr	r2, [r5, #16]
  402742:	602a      	str	r2, [r5, #0]
  402744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402748:	2200      	movs	r2, #0
  40274a:	81ab      	strh	r3, [r5, #12]
  40274c:	04db      	lsls	r3, r3, #19
  40274e:	606a      	str	r2, [r5, #4]
  402750:	d447      	bmi.n	4027e2 <__sflush_r+0xfa>
  402752:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402754:	f8c8 6000 	str.w	r6, [r8]
  402758:	b311      	cbz	r1, 4027a0 <__sflush_r+0xb8>
  40275a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40275e:	4299      	cmp	r1, r3
  402760:	d002      	beq.n	402768 <__sflush_r+0x80>
  402762:	4640      	mov	r0, r8
  402764:	f000 f9de 	bl	402b24 <_free_r>
  402768:	2000      	movs	r0, #0
  40276a:	6328      	str	r0, [r5, #48]	; 0x30
  40276c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402770:	692e      	ldr	r6, [r5, #16]
  402772:	b1ae      	cbz	r6, 4027a0 <__sflush_r+0xb8>
  402774:	682c      	ldr	r4, [r5, #0]
  402776:	602e      	str	r6, [r5, #0]
  402778:	0791      	lsls	r1, r2, #30
  40277a:	bf0c      	ite	eq
  40277c:	696b      	ldreq	r3, [r5, #20]
  40277e:	2300      	movne	r3, #0
  402780:	1ba4      	subs	r4, r4, r6
  402782:	60ab      	str	r3, [r5, #8]
  402784:	e00a      	b.n	40279c <__sflush_r+0xb4>
  402786:	4623      	mov	r3, r4
  402788:	4632      	mov	r2, r6
  40278a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40278c:	69e9      	ldr	r1, [r5, #28]
  40278e:	4640      	mov	r0, r8
  402790:	47b8      	blx	r7
  402792:	2800      	cmp	r0, #0
  402794:	eba4 0400 	sub.w	r4, r4, r0
  402798:	4406      	add	r6, r0
  40279a:	dd04      	ble.n	4027a6 <__sflush_r+0xbe>
  40279c:	2c00      	cmp	r4, #0
  40279e:	dcf2      	bgt.n	402786 <__sflush_r+0x9e>
  4027a0:	2000      	movs	r0, #0
  4027a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4027a6:	89ab      	ldrh	r3, [r5, #12]
  4027a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4027ac:	81ab      	strh	r3, [r5, #12]
  4027ae:	f04f 30ff 	mov.w	r0, #4294967295
  4027b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4027b6:	f8d8 4000 	ldr.w	r4, [r8]
  4027ba:	2c1d      	cmp	r4, #29
  4027bc:	d8f3      	bhi.n	4027a6 <__sflush_r+0xbe>
  4027be:	4b19      	ldr	r3, [pc, #100]	; (402824 <__sflush_r+0x13c>)
  4027c0:	40e3      	lsrs	r3, r4
  4027c2:	43db      	mvns	r3, r3
  4027c4:	f013 0301 	ands.w	r3, r3, #1
  4027c8:	d1ed      	bne.n	4027a6 <__sflush_r+0xbe>
  4027ca:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4027ce:	606b      	str	r3, [r5, #4]
  4027d0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4027d4:	6929      	ldr	r1, [r5, #16]
  4027d6:	81ab      	strh	r3, [r5, #12]
  4027d8:	04da      	lsls	r2, r3, #19
  4027da:	6029      	str	r1, [r5, #0]
  4027dc:	d5b9      	bpl.n	402752 <__sflush_r+0x6a>
  4027de:	2c00      	cmp	r4, #0
  4027e0:	d1b7      	bne.n	402752 <__sflush_r+0x6a>
  4027e2:	6528      	str	r0, [r5, #80]	; 0x50
  4027e4:	e7b5      	b.n	402752 <__sflush_r+0x6a>
  4027e6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4027e8:	2a00      	cmp	r2, #0
  4027ea:	dc8c      	bgt.n	402706 <__sflush_r+0x1e>
  4027ec:	e7d8      	b.n	4027a0 <__sflush_r+0xb8>
  4027ee:	2301      	movs	r3, #1
  4027f0:	69e9      	ldr	r1, [r5, #28]
  4027f2:	4640      	mov	r0, r8
  4027f4:	47a0      	blx	r4
  4027f6:	1c43      	adds	r3, r0, #1
  4027f8:	4602      	mov	r2, r0
  4027fa:	d002      	beq.n	402802 <__sflush_r+0x11a>
  4027fc:	89ab      	ldrh	r3, [r5, #12]
  4027fe:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402800:	e78e      	b.n	402720 <__sflush_r+0x38>
  402802:	f8d8 3000 	ldr.w	r3, [r8]
  402806:	2b00      	cmp	r3, #0
  402808:	d0f8      	beq.n	4027fc <__sflush_r+0x114>
  40280a:	2b1d      	cmp	r3, #29
  40280c:	d001      	beq.n	402812 <__sflush_r+0x12a>
  40280e:	2b16      	cmp	r3, #22
  402810:	d102      	bne.n	402818 <__sflush_r+0x130>
  402812:	f8c8 6000 	str.w	r6, [r8]
  402816:	e7c3      	b.n	4027a0 <__sflush_r+0xb8>
  402818:	89ab      	ldrh	r3, [r5, #12]
  40281a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40281e:	81ab      	strh	r3, [r5, #12]
  402820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402824:	20400001 	.word	0x20400001

00402828 <_fflush_r>:
  402828:	b538      	push	{r3, r4, r5, lr}
  40282a:	460d      	mov	r5, r1
  40282c:	4604      	mov	r4, r0
  40282e:	b108      	cbz	r0, 402834 <_fflush_r+0xc>
  402830:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402832:	b1bb      	cbz	r3, 402864 <_fflush_r+0x3c>
  402834:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402838:	b188      	cbz	r0, 40285e <_fflush_r+0x36>
  40283a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40283c:	07db      	lsls	r3, r3, #31
  40283e:	d401      	bmi.n	402844 <_fflush_r+0x1c>
  402840:	0581      	lsls	r1, r0, #22
  402842:	d517      	bpl.n	402874 <_fflush_r+0x4c>
  402844:	4620      	mov	r0, r4
  402846:	4629      	mov	r1, r5
  402848:	f7ff ff4e 	bl	4026e8 <__sflush_r>
  40284c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40284e:	07da      	lsls	r2, r3, #31
  402850:	4604      	mov	r4, r0
  402852:	d402      	bmi.n	40285a <_fflush_r+0x32>
  402854:	89ab      	ldrh	r3, [r5, #12]
  402856:	059b      	lsls	r3, r3, #22
  402858:	d507      	bpl.n	40286a <_fflush_r+0x42>
  40285a:	4620      	mov	r0, r4
  40285c:	bd38      	pop	{r3, r4, r5, pc}
  40285e:	4604      	mov	r4, r0
  402860:	4620      	mov	r0, r4
  402862:	bd38      	pop	{r3, r4, r5, pc}
  402864:	f000 f838 	bl	4028d8 <__sinit>
  402868:	e7e4      	b.n	402834 <_fflush_r+0xc>
  40286a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40286c:	f000 fbf6 	bl	40305c <__retarget_lock_release_recursive>
  402870:	4620      	mov	r0, r4
  402872:	bd38      	pop	{r3, r4, r5, pc}
  402874:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402876:	f000 fbef 	bl	403058 <__retarget_lock_acquire_recursive>
  40287a:	e7e3      	b.n	402844 <_fflush_r+0x1c>

0040287c <_cleanup_r>:
  40287c:	4901      	ldr	r1, [pc, #4]	; (402884 <_cleanup_r+0x8>)
  40287e:	f000 bbaf 	b.w	402fe0 <_fwalk_reent>
  402882:	bf00      	nop
  402884:	004040d1 	.word	0x004040d1

00402888 <std.isra.0>:
  402888:	b510      	push	{r4, lr}
  40288a:	2300      	movs	r3, #0
  40288c:	4604      	mov	r4, r0
  40288e:	8181      	strh	r1, [r0, #12]
  402890:	81c2      	strh	r2, [r0, #14]
  402892:	6003      	str	r3, [r0, #0]
  402894:	6043      	str	r3, [r0, #4]
  402896:	6083      	str	r3, [r0, #8]
  402898:	6643      	str	r3, [r0, #100]	; 0x64
  40289a:	6103      	str	r3, [r0, #16]
  40289c:	6143      	str	r3, [r0, #20]
  40289e:	6183      	str	r3, [r0, #24]
  4028a0:	4619      	mov	r1, r3
  4028a2:	2208      	movs	r2, #8
  4028a4:	305c      	adds	r0, #92	; 0x5c
  4028a6:	f7fe fec3 	bl	401630 <memset>
  4028aa:	4807      	ldr	r0, [pc, #28]	; (4028c8 <std.isra.0+0x40>)
  4028ac:	4907      	ldr	r1, [pc, #28]	; (4028cc <std.isra.0+0x44>)
  4028ae:	4a08      	ldr	r2, [pc, #32]	; (4028d0 <std.isra.0+0x48>)
  4028b0:	4b08      	ldr	r3, [pc, #32]	; (4028d4 <std.isra.0+0x4c>)
  4028b2:	6220      	str	r0, [r4, #32]
  4028b4:	61e4      	str	r4, [r4, #28]
  4028b6:	6261      	str	r1, [r4, #36]	; 0x24
  4028b8:	62a2      	str	r2, [r4, #40]	; 0x28
  4028ba:	62e3      	str	r3, [r4, #44]	; 0x2c
  4028bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4028c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4028c4:	f000 bbc4 	b.w	403050 <__retarget_lock_init_recursive>
  4028c8:	00403d15 	.word	0x00403d15
  4028cc:	00403d39 	.word	0x00403d39
  4028d0:	00403d75 	.word	0x00403d75
  4028d4:	00403d95 	.word	0x00403d95

004028d8 <__sinit>:
  4028d8:	b510      	push	{r4, lr}
  4028da:	4604      	mov	r4, r0
  4028dc:	4812      	ldr	r0, [pc, #72]	; (402928 <__sinit+0x50>)
  4028de:	f000 fbbb 	bl	403058 <__retarget_lock_acquire_recursive>
  4028e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4028e4:	b9d2      	cbnz	r2, 40291c <__sinit+0x44>
  4028e6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4028ea:	4810      	ldr	r0, [pc, #64]	; (40292c <__sinit+0x54>)
  4028ec:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4028f0:	2103      	movs	r1, #3
  4028f2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4028f6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4028f8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4028fc:	6860      	ldr	r0, [r4, #4]
  4028fe:	2104      	movs	r1, #4
  402900:	f7ff ffc2 	bl	402888 <std.isra.0>
  402904:	2201      	movs	r2, #1
  402906:	2109      	movs	r1, #9
  402908:	68a0      	ldr	r0, [r4, #8]
  40290a:	f7ff ffbd 	bl	402888 <std.isra.0>
  40290e:	2202      	movs	r2, #2
  402910:	2112      	movs	r1, #18
  402912:	68e0      	ldr	r0, [r4, #12]
  402914:	f7ff ffb8 	bl	402888 <std.isra.0>
  402918:	2301      	movs	r3, #1
  40291a:	63a3      	str	r3, [r4, #56]	; 0x38
  40291c:	4802      	ldr	r0, [pc, #8]	; (402928 <__sinit+0x50>)
  40291e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402922:	f000 bb9b 	b.w	40305c <__retarget_lock_release_recursive>
  402926:	bf00      	nop
  402928:	20400b30 	.word	0x20400b30
  40292c:	0040287d 	.word	0x0040287d

00402930 <__sfp_lock_acquire>:
  402930:	4801      	ldr	r0, [pc, #4]	; (402938 <__sfp_lock_acquire+0x8>)
  402932:	f000 bb91 	b.w	403058 <__retarget_lock_acquire_recursive>
  402936:	bf00      	nop
  402938:	20400b44 	.word	0x20400b44

0040293c <__sfp_lock_release>:
  40293c:	4801      	ldr	r0, [pc, #4]	; (402944 <__sfp_lock_release+0x8>)
  40293e:	f000 bb8d 	b.w	40305c <__retarget_lock_release_recursive>
  402942:	bf00      	nop
  402944:	20400b44 	.word	0x20400b44

00402948 <__libc_fini_array>:
  402948:	b538      	push	{r3, r4, r5, lr}
  40294a:	4c0a      	ldr	r4, [pc, #40]	; (402974 <__libc_fini_array+0x2c>)
  40294c:	4d0a      	ldr	r5, [pc, #40]	; (402978 <__libc_fini_array+0x30>)
  40294e:	1b64      	subs	r4, r4, r5
  402950:	10a4      	asrs	r4, r4, #2
  402952:	d00a      	beq.n	40296a <__libc_fini_array+0x22>
  402954:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402958:	3b01      	subs	r3, #1
  40295a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40295e:	3c01      	subs	r4, #1
  402960:	f855 3904 	ldr.w	r3, [r5], #-4
  402964:	4798      	blx	r3
  402966:	2c00      	cmp	r4, #0
  402968:	d1f9      	bne.n	40295e <__libc_fini_array+0x16>
  40296a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40296e:	f001 beab 	b.w	4046c8 <_fini>
  402972:	bf00      	nop
  402974:	004046d8 	.word	0x004046d8
  402978:	004046d4 	.word	0x004046d4

0040297c <__fputwc>:
  40297c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402980:	b082      	sub	sp, #8
  402982:	4680      	mov	r8, r0
  402984:	4689      	mov	r9, r1
  402986:	4614      	mov	r4, r2
  402988:	f000 fb54 	bl	403034 <__locale_mb_cur_max>
  40298c:	2801      	cmp	r0, #1
  40298e:	d036      	beq.n	4029fe <__fputwc+0x82>
  402990:	464a      	mov	r2, r9
  402992:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402996:	a901      	add	r1, sp, #4
  402998:	4640      	mov	r0, r8
  40299a:	f001 fad7 	bl	403f4c <_wcrtomb_r>
  40299e:	1c42      	adds	r2, r0, #1
  4029a0:	4606      	mov	r6, r0
  4029a2:	d025      	beq.n	4029f0 <__fputwc+0x74>
  4029a4:	b3a8      	cbz	r0, 402a12 <__fputwc+0x96>
  4029a6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4029aa:	2500      	movs	r5, #0
  4029ac:	f10d 0a04 	add.w	sl, sp, #4
  4029b0:	e009      	b.n	4029c6 <__fputwc+0x4a>
  4029b2:	6823      	ldr	r3, [r4, #0]
  4029b4:	1c5a      	adds	r2, r3, #1
  4029b6:	6022      	str	r2, [r4, #0]
  4029b8:	f883 e000 	strb.w	lr, [r3]
  4029bc:	3501      	adds	r5, #1
  4029be:	42b5      	cmp	r5, r6
  4029c0:	d227      	bcs.n	402a12 <__fputwc+0x96>
  4029c2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4029c6:	68a3      	ldr	r3, [r4, #8]
  4029c8:	3b01      	subs	r3, #1
  4029ca:	2b00      	cmp	r3, #0
  4029cc:	60a3      	str	r3, [r4, #8]
  4029ce:	daf0      	bge.n	4029b2 <__fputwc+0x36>
  4029d0:	69a7      	ldr	r7, [r4, #24]
  4029d2:	42bb      	cmp	r3, r7
  4029d4:	4671      	mov	r1, lr
  4029d6:	4622      	mov	r2, r4
  4029d8:	4640      	mov	r0, r8
  4029da:	db02      	blt.n	4029e2 <__fputwc+0x66>
  4029dc:	f1be 0f0a 	cmp.w	lr, #10
  4029e0:	d1e7      	bne.n	4029b2 <__fputwc+0x36>
  4029e2:	f001 fa5b 	bl	403e9c <__swbuf_r>
  4029e6:	1c43      	adds	r3, r0, #1
  4029e8:	d1e8      	bne.n	4029bc <__fputwc+0x40>
  4029ea:	b002      	add	sp, #8
  4029ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4029f0:	89a3      	ldrh	r3, [r4, #12]
  4029f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4029f6:	81a3      	strh	r3, [r4, #12]
  4029f8:	b002      	add	sp, #8
  4029fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4029fe:	f109 33ff 	add.w	r3, r9, #4294967295
  402a02:	2bfe      	cmp	r3, #254	; 0xfe
  402a04:	d8c4      	bhi.n	402990 <__fputwc+0x14>
  402a06:	fa5f fe89 	uxtb.w	lr, r9
  402a0a:	4606      	mov	r6, r0
  402a0c:	f88d e004 	strb.w	lr, [sp, #4]
  402a10:	e7cb      	b.n	4029aa <__fputwc+0x2e>
  402a12:	4648      	mov	r0, r9
  402a14:	b002      	add	sp, #8
  402a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a1a:	bf00      	nop

00402a1c <_fputwc_r>:
  402a1c:	b530      	push	{r4, r5, lr}
  402a1e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402a20:	f013 0f01 	tst.w	r3, #1
  402a24:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402a28:	4614      	mov	r4, r2
  402a2a:	b083      	sub	sp, #12
  402a2c:	4605      	mov	r5, r0
  402a2e:	b29a      	uxth	r2, r3
  402a30:	d101      	bne.n	402a36 <_fputwc_r+0x1a>
  402a32:	0590      	lsls	r0, r2, #22
  402a34:	d51c      	bpl.n	402a70 <_fputwc_r+0x54>
  402a36:	0490      	lsls	r0, r2, #18
  402a38:	d406      	bmi.n	402a48 <_fputwc_r+0x2c>
  402a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402a3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402a44:	81a3      	strh	r3, [r4, #12]
  402a46:	6662      	str	r2, [r4, #100]	; 0x64
  402a48:	4628      	mov	r0, r5
  402a4a:	4622      	mov	r2, r4
  402a4c:	f7ff ff96 	bl	40297c <__fputwc>
  402a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402a52:	07da      	lsls	r2, r3, #31
  402a54:	4605      	mov	r5, r0
  402a56:	d402      	bmi.n	402a5e <_fputwc_r+0x42>
  402a58:	89a3      	ldrh	r3, [r4, #12]
  402a5a:	059b      	lsls	r3, r3, #22
  402a5c:	d502      	bpl.n	402a64 <_fputwc_r+0x48>
  402a5e:	4628      	mov	r0, r5
  402a60:	b003      	add	sp, #12
  402a62:	bd30      	pop	{r4, r5, pc}
  402a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402a66:	f000 faf9 	bl	40305c <__retarget_lock_release_recursive>
  402a6a:	4628      	mov	r0, r5
  402a6c:	b003      	add	sp, #12
  402a6e:	bd30      	pop	{r4, r5, pc}
  402a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402a72:	9101      	str	r1, [sp, #4]
  402a74:	f000 faf0 	bl	403058 <__retarget_lock_acquire_recursive>
  402a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a7c:	9901      	ldr	r1, [sp, #4]
  402a7e:	b29a      	uxth	r2, r3
  402a80:	e7d9      	b.n	402a36 <_fputwc_r+0x1a>
  402a82:	bf00      	nop

00402a84 <_malloc_trim_r>:
  402a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402a86:	4f24      	ldr	r7, [pc, #144]	; (402b18 <_malloc_trim_r+0x94>)
  402a88:	460c      	mov	r4, r1
  402a8a:	4606      	mov	r6, r0
  402a8c:	f000 ff7e 	bl	40398c <__malloc_lock>
  402a90:	68bb      	ldr	r3, [r7, #8]
  402a92:	685d      	ldr	r5, [r3, #4]
  402a94:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402a98:	310f      	adds	r1, #15
  402a9a:	f025 0503 	bic.w	r5, r5, #3
  402a9e:	4429      	add	r1, r5
  402aa0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402aa4:	f021 010f 	bic.w	r1, r1, #15
  402aa8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402aac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402ab0:	db07      	blt.n	402ac2 <_malloc_trim_r+0x3e>
  402ab2:	2100      	movs	r1, #0
  402ab4:	4630      	mov	r0, r6
  402ab6:	f001 f91b 	bl	403cf0 <_sbrk_r>
  402aba:	68bb      	ldr	r3, [r7, #8]
  402abc:	442b      	add	r3, r5
  402abe:	4298      	cmp	r0, r3
  402ac0:	d004      	beq.n	402acc <_malloc_trim_r+0x48>
  402ac2:	4630      	mov	r0, r6
  402ac4:	f000 ff68 	bl	403998 <__malloc_unlock>
  402ac8:	2000      	movs	r0, #0
  402aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402acc:	4261      	negs	r1, r4
  402ace:	4630      	mov	r0, r6
  402ad0:	f001 f90e 	bl	403cf0 <_sbrk_r>
  402ad4:	3001      	adds	r0, #1
  402ad6:	d00d      	beq.n	402af4 <_malloc_trim_r+0x70>
  402ad8:	4b10      	ldr	r3, [pc, #64]	; (402b1c <_malloc_trim_r+0x98>)
  402ada:	68ba      	ldr	r2, [r7, #8]
  402adc:	6819      	ldr	r1, [r3, #0]
  402ade:	1b2d      	subs	r5, r5, r4
  402ae0:	f045 0501 	orr.w	r5, r5, #1
  402ae4:	4630      	mov	r0, r6
  402ae6:	1b09      	subs	r1, r1, r4
  402ae8:	6055      	str	r5, [r2, #4]
  402aea:	6019      	str	r1, [r3, #0]
  402aec:	f000 ff54 	bl	403998 <__malloc_unlock>
  402af0:	2001      	movs	r0, #1
  402af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402af4:	2100      	movs	r1, #0
  402af6:	4630      	mov	r0, r6
  402af8:	f001 f8fa 	bl	403cf0 <_sbrk_r>
  402afc:	68ba      	ldr	r2, [r7, #8]
  402afe:	1a83      	subs	r3, r0, r2
  402b00:	2b0f      	cmp	r3, #15
  402b02:	ddde      	ble.n	402ac2 <_malloc_trim_r+0x3e>
  402b04:	4c06      	ldr	r4, [pc, #24]	; (402b20 <_malloc_trim_r+0x9c>)
  402b06:	4905      	ldr	r1, [pc, #20]	; (402b1c <_malloc_trim_r+0x98>)
  402b08:	6824      	ldr	r4, [r4, #0]
  402b0a:	f043 0301 	orr.w	r3, r3, #1
  402b0e:	1b00      	subs	r0, r0, r4
  402b10:	6053      	str	r3, [r2, #4]
  402b12:	6008      	str	r0, [r1, #0]
  402b14:	e7d5      	b.n	402ac2 <_malloc_trim_r+0x3e>
  402b16:	bf00      	nop
  402b18:	204005b0 	.word	0x204005b0
  402b1c:	20400a5c 	.word	0x20400a5c
  402b20:	204009b8 	.word	0x204009b8

00402b24 <_free_r>:
  402b24:	2900      	cmp	r1, #0
  402b26:	d044      	beq.n	402bb2 <_free_r+0x8e>
  402b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b2c:	460d      	mov	r5, r1
  402b2e:	4680      	mov	r8, r0
  402b30:	f000 ff2c 	bl	40398c <__malloc_lock>
  402b34:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402b38:	4969      	ldr	r1, [pc, #420]	; (402ce0 <_free_r+0x1bc>)
  402b3a:	f027 0301 	bic.w	r3, r7, #1
  402b3e:	f1a5 0408 	sub.w	r4, r5, #8
  402b42:	18e2      	adds	r2, r4, r3
  402b44:	688e      	ldr	r6, [r1, #8]
  402b46:	6850      	ldr	r0, [r2, #4]
  402b48:	42b2      	cmp	r2, r6
  402b4a:	f020 0003 	bic.w	r0, r0, #3
  402b4e:	d05e      	beq.n	402c0e <_free_r+0xea>
  402b50:	07fe      	lsls	r6, r7, #31
  402b52:	6050      	str	r0, [r2, #4]
  402b54:	d40b      	bmi.n	402b6e <_free_r+0x4a>
  402b56:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402b5a:	1be4      	subs	r4, r4, r7
  402b5c:	f101 0e08 	add.w	lr, r1, #8
  402b60:	68a5      	ldr	r5, [r4, #8]
  402b62:	4575      	cmp	r5, lr
  402b64:	443b      	add	r3, r7
  402b66:	d06d      	beq.n	402c44 <_free_r+0x120>
  402b68:	68e7      	ldr	r7, [r4, #12]
  402b6a:	60ef      	str	r7, [r5, #12]
  402b6c:	60bd      	str	r5, [r7, #8]
  402b6e:	1815      	adds	r5, r2, r0
  402b70:	686d      	ldr	r5, [r5, #4]
  402b72:	07ed      	lsls	r5, r5, #31
  402b74:	d53e      	bpl.n	402bf4 <_free_r+0xd0>
  402b76:	f043 0201 	orr.w	r2, r3, #1
  402b7a:	6062      	str	r2, [r4, #4]
  402b7c:	50e3      	str	r3, [r4, r3]
  402b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402b82:	d217      	bcs.n	402bb4 <_free_r+0x90>
  402b84:	08db      	lsrs	r3, r3, #3
  402b86:	1c58      	adds	r0, r3, #1
  402b88:	109a      	asrs	r2, r3, #2
  402b8a:	684d      	ldr	r5, [r1, #4]
  402b8c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402b90:	60a7      	str	r7, [r4, #8]
  402b92:	2301      	movs	r3, #1
  402b94:	4093      	lsls	r3, r2
  402b96:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402b9a:	432b      	orrs	r3, r5
  402b9c:	3a08      	subs	r2, #8
  402b9e:	60e2      	str	r2, [r4, #12]
  402ba0:	604b      	str	r3, [r1, #4]
  402ba2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402ba6:	60fc      	str	r4, [r7, #12]
  402ba8:	4640      	mov	r0, r8
  402baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402bae:	f000 bef3 	b.w	403998 <__malloc_unlock>
  402bb2:	4770      	bx	lr
  402bb4:	0a5a      	lsrs	r2, r3, #9
  402bb6:	2a04      	cmp	r2, #4
  402bb8:	d852      	bhi.n	402c60 <_free_r+0x13c>
  402bba:	099a      	lsrs	r2, r3, #6
  402bbc:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402bc0:	00ff      	lsls	r7, r7, #3
  402bc2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402bc6:	19c8      	adds	r0, r1, r7
  402bc8:	59ca      	ldr	r2, [r1, r7]
  402bca:	3808      	subs	r0, #8
  402bcc:	4290      	cmp	r0, r2
  402bce:	d04f      	beq.n	402c70 <_free_r+0x14c>
  402bd0:	6851      	ldr	r1, [r2, #4]
  402bd2:	f021 0103 	bic.w	r1, r1, #3
  402bd6:	428b      	cmp	r3, r1
  402bd8:	d232      	bcs.n	402c40 <_free_r+0x11c>
  402bda:	6892      	ldr	r2, [r2, #8]
  402bdc:	4290      	cmp	r0, r2
  402bde:	d1f7      	bne.n	402bd0 <_free_r+0xac>
  402be0:	68c3      	ldr	r3, [r0, #12]
  402be2:	60a0      	str	r0, [r4, #8]
  402be4:	60e3      	str	r3, [r4, #12]
  402be6:	609c      	str	r4, [r3, #8]
  402be8:	60c4      	str	r4, [r0, #12]
  402bea:	4640      	mov	r0, r8
  402bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402bf0:	f000 bed2 	b.w	403998 <__malloc_unlock>
  402bf4:	6895      	ldr	r5, [r2, #8]
  402bf6:	4f3b      	ldr	r7, [pc, #236]	; (402ce4 <_free_r+0x1c0>)
  402bf8:	42bd      	cmp	r5, r7
  402bfa:	4403      	add	r3, r0
  402bfc:	d040      	beq.n	402c80 <_free_r+0x15c>
  402bfe:	68d0      	ldr	r0, [r2, #12]
  402c00:	60e8      	str	r0, [r5, #12]
  402c02:	f043 0201 	orr.w	r2, r3, #1
  402c06:	6085      	str	r5, [r0, #8]
  402c08:	6062      	str	r2, [r4, #4]
  402c0a:	50e3      	str	r3, [r4, r3]
  402c0c:	e7b7      	b.n	402b7e <_free_r+0x5a>
  402c0e:	07ff      	lsls	r7, r7, #31
  402c10:	4403      	add	r3, r0
  402c12:	d407      	bmi.n	402c24 <_free_r+0x100>
  402c14:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402c18:	1aa4      	subs	r4, r4, r2
  402c1a:	4413      	add	r3, r2
  402c1c:	68a0      	ldr	r0, [r4, #8]
  402c1e:	68e2      	ldr	r2, [r4, #12]
  402c20:	60c2      	str	r2, [r0, #12]
  402c22:	6090      	str	r0, [r2, #8]
  402c24:	4a30      	ldr	r2, [pc, #192]	; (402ce8 <_free_r+0x1c4>)
  402c26:	6812      	ldr	r2, [r2, #0]
  402c28:	f043 0001 	orr.w	r0, r3, #1
  402c2c:	4293      	cmp	r3, r2
  402c2e:	6060      	str	r0, [r4, #4]
  402c30:	608c      	str	r4, [r1, #8]
  402c32:	d3b9      	bcc.n	402ba8 <_free_r+0x84>
  402c34:	4b2d      	ldr	r3, [pc, #180]	; (402cec <_free_r+0x1c8>)
  402c36:	4640      	mov	r0, r8
  402c38:	6819      	ldr	r1, [r3, #0]
  402c3a:	f7ff ff23 	bl	402a84 <_malloc_trim_r>
  402c3e:	e7b3      	b.n	402ba8 <_free_r+0x84>
  402c40:	4610      	mov	r0, r2
  402c42:	e7cd      	b.n	402be0 <_free_r+0xbc>
  402c44:	1811      	adds	r1, r2, r0
  402c46:	6849      	ldr	r1, [r1, #4]
  402c48:	07c9      	lsls	r1, r1, #31
  402c4a:	d444      	bmi.n	402cd6 <_free_r+0x1b2>
  402c4c:	6891      	ldr	r1, [r2, #8]
  402c4e:	68d2      	ldr	r2, [r2, #12]
  402c50:	60ca      	str	r2, [r1, #12]
  402c52:	4403      	add	r3, r0
  402c54:	f043 0001 	orr.w	r0, r3, #1
  402c58:	6091      	str	r1, [r2, #8]
  402c5a:	6060      	str	r0, [r4, #4]
  402c5c:	50e3      	str	r3, [r4, r3]
  402c5e:	e7a3      	b.n	402ba8 <_free_r+0x84>
  402c60:	2a14      	cmp	r2, #20
  402c62:	d816      	bhi.n	402c92 <_free_r+0x16e>
  402c64:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402c68:	00ff      	lsls	r7, r7, #3
  402c6a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402c6e:	e7aa      	b.n	402bc6 <_free_r+0xa2>
  402c70:	10aa      	asrs	r2, r5, #2
  402c72:	2301      	movs	r3, #1
  402c74:	684d      	ldr	r5, [r1, #4]
  402c76:	4093      	lsls	r3, r2
  402c78:	432b      	orrs	r3, r5
  402c7a:	604b      	str	r3, [r1, #4]
  402c7c:	4603      	mov	r3, r0
  402c7e:	e7b0      	b.n	402be2 <_free_r+0xbe>
  402c80:	f043 0201 	orr.w	r2, r3, #1
  402c84:	614c      	str	r4, [r1, #20]
  402c86:	610c      	str	r4, [r1, #16]
  402c88:	60e5      	str	r5, [r4, #12]
  402c8a:	60a5      	str	r5, [r4, #8]
  402c8c:	6062      	str	r2, [r4, #4]
  402c8e:	50e3      	str	r3, [r4, r3]
  402c90:	e78a      	b.n	402ba8 <_free_r+0x84>
  402c92:	2a54      	cmp	r2, #84	; 0x54
  402c94:	d806      	bhi.n	402ca4 <_free_r+0x180>
  402c96:	0b1a      	lsrs	r2, r3, #12
  402c98:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402c9c:	00ff      	lsls	r7, r7, #3
  402c9e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402ca2:	e790      	b.n	402bc6 <_free_r+0xa2>
  402ca4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402ca8:	d806      	bhi.n	402cb8 <_free_r+0x194>
  402caa:	0bda      	lsrs	r2, r3, #15
  402cac:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402cb0:	00ff      	lsls	r7, r7, #3
  402cb2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402cb6:	e786      	b.n	402bc6 <_free_r+0xa2>
  402cb8:	f240 5054 	movw	r0, #1364	; 0x554
  402cbc:	4282      	cmp	r2, r0
  402cbe:	d806      	bhi.n	402cce <_free_r+0x1aa>
  402cc0:	0c9a      	lsrs	r2, r3, #18
  402cc2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402cc6:	00ff      	lsls	r7, r7, #3
  402cc8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402ccc:	e77b      	b.n	402bc6 <_free_r+0xa2>
  402cce:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402cd2:	257e      	movs	r5, #126	; 0x7e
  402cd4:	e777      	b.n	402bc6 <_free_r+0xa2>
  402cd6:	f043 0101 	orr.w	r1, r3, #1
  402cda:	6061      	str	r1, [r4, #4]
  402cdc:	6013      	str	r3, [r2, #0]
  402cde:	e763      	b.n	402ba8 <_free_r+0x84>
  402ce0:	204005b0 	.word	0x204005b0
  402ce4:	204005b8 	.word	0x204005b8
  402ce8:	204009bc 	.word	0x204009bc
  402cec:	20400a8c 	.word	0x20400a8c

00402cf0 <__sfvwrite_r>:
  402cf0:	6893      	ldr	r3, [r2, #8]
  402cf2:	2b00      	cmp	r3, #0
  402cf4:	d073      	beq.n	402dde <__sfvwrite_r+0xee>
  402cf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402cfa:	898b      	ldrh	r3, [r1, #12]
  402cfc:	b083      	sub	sp, #12
  402cfe:	460c      	mov	r4, r1
  402d00:	0719      	lsls	r1, r3, #28
  402d02:	9000      	str	r0, [sp, #0]
  402d04:	4616      	mov	r6, r2
  402d06:	d526      	bpl.n	402d56 <__sfvwrite_r+0x66>
  402d08:	6922      	ldr	r2, [r4, #16]
  402d0a:	b322      	cbz	r2, 402d56 <__sfvwrite_r+0x66>
  402d0c:	f013 0002 	ands.w	r0, r3, #2
  402d10:	6835      	ldr	r5, [r6, #0]
  402d12:	d02c      	beq.n	402d6e <__sfvwrite_r+0x7e>
  402d14:	f04f 0900 	mov.w	r9, #0
  402d18:	4fb0      	ldr	r7, [pc, #704]	; (402fdc <__sfvwrite_r+0x2ec>)
  402d1a:	46c8      	mov	r8, r9
  402d1c:	46b2      	mov	sl, r6
  402d1e:	45b8      	cmp	r8, r7
  402d20:	4643      	mov	r3, r8
  402d22:	464a      	mov	r2, r9
  402d24:	bf28      	it	cs
  402d26:	463b      	movcs	r3, r7
  402d28:	9800      	ldr	r0, [sp, #0]
  402d2a:	f1b8 0f00 	cmp.w	r8, #0
  402d2e:	d050      	beq.n	402dd2 <__sfvwrite_r+0xe2>
  402d30:	69e1      	ldr	r1, [r4, #28]
  402d32:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402d34:	47b0      	blx	r6
  402d36:	2800      	cmp	r0, #0
  402d38:	dd58      	ble.n	402dec <__sfvwrite_r+0xfc>
  402d3a:	f8da 3008 	ldr.w	r3, [sl, #8]
  402d3e:	1a1b      	subs	r3, r3, r0
  402d40:	4481      	add	r9, r0
  402d42:	eba8 0800 	sub.w	r8, r8, r0
  402d46:	f8ca 3008 	str.w	r3, [sl, #8]
  402d4a:	2b00      	cmp	r3, #0
  402d4c:	d1e7      	bne.n	402d1e <__sfvwrite_r+0x2e>
  402d4e:	2000      	movs	r0, #0
  402d50:	b003      	add	sp, #12
  402d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d56:	4621      	mov	r1, r4
  402d58:	9800      	ldr	r0, [sp, #0]
  402d5a:	f7ff fc51 	bl	402600 <__swsetup_r>
  402d5e:	2800      	cmp	r0, #0
  402d60:	f040 8133 	bne.w	402fca <__sfvwrite_r+0x2da>
  402d64:	89a3      	ldrh	r3, [r4, #12]
  402d66:	6835      	ldr	r5, [r6, #0]
  402d68:	f013 0002 	ands.w	r0, r3, #2
  402d6c:	d1d2      	bne.n	402d14 <__sfvwrite_r+0x24>
  402d6e:	f013 0901 	ands.w	r9, r3, #1
  402d72:	d145      	bne.n	402e00 <__sfvwrite_r+0x110>
  402d74:	464f      	mov	r7, r9
  402d76:	9601      	str	r6, [sp, #4]
  402d78:	b337      	cbz	r7, 402dc8 <__sfvwrite_r+0xd8>
  402d7a:	059a      	lsls	r2, r3, #22
  402d7c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402d80:	f140 8083 	bpl.w	402e8a <__sfvwrite_r+0x19a>
  402d84:	4547      	cmp	r7, r8
  402d86:	46c3      	mov	fp, r8
  402d88:	f0c0 80ab 	bcc.w	402ee2 <__sfvwrite_r+0x1f2>
  402d8c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402d90:	f040 80ac 	bne.w	402eec <__sfvwrite_r+0x1fc>
  402d94:	6820      	ldr	r0, [r4, #0]
  402d96:	46ba      	mov	sl, r7
  402d98:	465a      	mov	r2, fp
  402d9a:	4649      	mov	r1, r9
  402d9c:	f000 fd92 	bl	4038c4 <memmove>
  402da0:	68a2      	ldr	r2, [r4, #8]
  402da2:	6823      	ldr	r3, [r4, #0]
  402da4:	eba2 0208 	sub.w	r2, r2, r8
  402da8:	445b      	add	r3, fp
  402daa:	60a2      	str	r2, [r4, #8]
  402dac:	6023      	str	r3, [r4, #0]
  402dae:	9a01      	ldr	r2, [sp, #4]
  402db0:	6893      	ldr	r3, [r2, #8]
  402db2:	eba3 030a 	sub.w	r3, r3, sl
  402db6:	44d1      	add	r9, sl
  402db8:	eba7 070a 	sub.w	r7, r7, sl
  402dbc:	6093      	str	r3, [r2, #8]
  402dbe:	2b00      	cmp	r3, #0
  402dc0:	d0c5      	beq.n	402d4e <__sfvwrite_r+0x5e>
  402dc2:	89a3      	ldrh	r3, [r4, #12]
  402dc4:	2f00      	cmp	r7, #0
  402dc6:	d1d8      	bne.n	402d7a <__sfvwrite_r+0x8a>
  402dc8:	f8d5 9000 	ldr.w	r9, [r5]
  402dcc:	686f      	ldr	r7, [r5, #4]
  402dce:	3508      	adds	r5, #8
  402dd0:	e7d2      	b.n	402d78 <__sfvwrite_r+0x88>
  402dd2:	f8d5 9000 	ldr.w	r9, [r5]
  402dd6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402dda:	3508      	adds	r5, #8
  402ddc:	e79f      	b.n	402d1e <__sfvwrite_r+0x2e>
  402dde:	2000      	movs	r0, #0
  402de0:	4770      	bx	lr
  402de2:	4621      	mov	r1, r4
  402de4:	9800      	ldr	r0, [sp, #0]
  402de6:	f7ff fd1f 	bl	402828 <_fflush_r>
  402dea:	b370      	cbz	r0, 402e4a <__sfvwrite_r+0x15a>
  402dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402df4:	f04f 30ff 	mov.w	r0, #4294967295
  402df8:	81a3      	strh	r3, [r4, #12]
  402dfa:	b003      	add	sp, #12
  402dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e00:	4681      	mov	r9, r0
  402e02:	4633      	mov	r3, r6
  402e04:	464e      	mov	r6, r9
  402e06:	46a8      	mov	r8, r5
  402e08:	469a      	mov	sl, r3
  402e0a:	464d      	mov	r5, r9
  402e0c:	b34e      	cbz	r6, 402e62 <__sfvwrite_r+0x172>
  402e0e:	b380      	cbz	r0, 402e72 <__sfvwrite_r+0x182>
  402e10:	6820      	ldr	r0, [r4, #0]
  402e12:	6923      	ldr	r3, [r4, #16]
  402e14:	6962      	ldr	r2, [r4, #20]
  402e16:	45b1      	cmp	r9, r6
  402e18:	46cb      	mov	fp, r9
  402e1a:	bf28      	it	cs
  402e1c:	46b3      	movcs	fp, r6
  402e1e:	4298      	cmp	r0, r3
  402e20:	465f      	mov	r7, fp
  402e22:	d904      	bls.n	402e2e <__sfvwrite_r+0x13e>
  402e24:	68a3      	ldr	r3, [r4, #8]
  402e26:	4413      	add	r3, r2
  402e28:	459b      	cmp	fp, r3
  402e2a:	f300 80a6 	bgt.w	402f7a <__sfvwrite_r+0x28a>
  402e2e:	4593      	cmp	fp, r2
  402e30:	db4b      	blt.n	402eca <__sfvwrite_r+0x1da>
  402e32:	4613      	mov	r3, r2
  402e34:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402e36:	69e1      	ldr	r1, [r4, #28]
  402e38:	9800      	ldr	r0, [sp, #0]
  402e3a:	462a      	mov	r2, r5
  402e3c:	47b8      	blx	r7
  402e3e:	1e07      	subs	r7, r0, #0
  402e40:	ddd4      	ble.n	402dec <__sfvwrite_r+0xfc>
  402e42:	ebb9 0907 	subs.w	r9, r9, r7
  402e46:	d0cc      	beq.n	402de2 <__sfvwrite_r+0xf2>
  402e48:	2001      	movs	r0, #1
  402e4a:	f8da 3008 	ldr.w	r3, [sl, #8]
  402e4e:	1bdb      	subs	r3, r3, r7
  402e50:	443d      	add	r5, r7
  402e52:	1bf6      	subs	r6, r6, r7
  402e54:	f8ca 3008 	str.w	r3, [sl, #8]
  402e58:	2b00      	cmp	r3, #0
  402e5a:	f43f af78 	beq.w	402d4e <__sfvwrite_r+0x5e>
  402e5e:	2e00      	cmp	r6, #0
  402e60:	d1d5      	bne.n	402e0e <__sfvwrite_r+0x11e>
  402e62:	f108 0308 	add.w	r3, r8, #8
  402e66:	e913 0060 	ldmdb	r3, {r5, r6}
  402e6a:	4698      	mov	r8, r3
  402e6c:	3308      	adds	r3, #8
  402e6e:	2e00      	cmp	r6, #0
  402e70:	d0f9      	beq.n	402e66 <__sfvwrite_r+0x176>
  402e72:	4632      	mov	r2, r6
  402e74:	210a      	movs	r1, #10
  402e76:	4628      	mov	r0, r5
  402e78:	f000 fc3a 	bl	4036f0 <memchr>
  402e7c:	2800      	cmp	r0, #0
  402e7e:	f000 80a1 	beq.w	402fc4 <__sfvwrite_r+0x2d4>
  402e82:	3001      	adds	r0, #1
  402e84:	eba0 0905 	sub.w	r9, r0, r5
  402e88:	e7c2      	b.n	402e10 <__sfvwrite_r+0x120>
  402e8a:	6820      	ldr	r0, [r4, #0]
  402e8c:	6923      	ldr	r3, [r4, #16]
  402e8e:	4298      	cmp	r0, r3
  402e90:	d802      	bhi.n	402e98 <__sfvwrite_r+0x1a8>
  402e92:	6963      	ldr	r3, [r4, #20]
  402e94:	429f      	cmp	r7, r3
  402e96:	d25d      	bcs.n	402f54 <__sfvwrite_r+0x264>
  402e98:	45b8      	cmp	r8, r7
  402e9a:	bf28      	it	cs
  402e9c:	46b8      	movcs	r8, r7
  402e9e:	4642      	mov	r2, r8
  402ea0:	4649      	mov	r1, r9
  402ea2:	f000 fd0f 	bl	4038c4 <memmove>
  402ea6:	68a3      	ldr	r3, [r4, #8]
  402ea8:	6822      	ldr	r2, [r4, #0]
  402eaa:	eba3 0308 	sub.w	r3, r3, r8
  402eae:	4442      	add	r2, r8
  402eb0:	60a3      	str	r3, [r4, #8]
  402eb2:	6022      	str	r2, [r4, #0]
  402eb4:	b10b      	cbz	r3, 402eba <__sfvwrite_r+0x1ca>
  402eb6:	46c2      	mov	sl, r8
  402eb8:	e779      	b.n	402dae <__sfvwrite_r+0xbe>
  402eba:	4621      	mov	r1, r4
  402ebc:	9800      	ldr	r0, [sp, #0]
  402ebe:	f7ff fcb3 	bl	402828 <_fflush_r>
  402ec2:	2800      	cmp	r0, #0
  402ec4:	d192      	bne.n	402dec <__sfvwrite_r+0xfc>
  402ec6:	46c2      	mov	sl, r8
  402ec8:	e771      	b.n	402dae <__sfvwrite_r+0xbe>
  402eca:	465a      	mov	r2, fp
  402ecc:	4629      	mov	r1, r5
  402ece:	f000 fcf9 	bl	4038c4 <memmove>
  402ed2:	68a2      	ldr	r2, [r4, #8]
  402ed4:	6823      	ldr	r3, [r4, #0]
  402ed6:	eba2 020b 	sub.w	r2, r2, fp
  402eda:	445b      	add	r3, fp
  402edc:	60a2      	str	r2, [r4, #8]
  402ede:	6023      	str	r3, [r4, #0]
  402ee0:	e7af      	b.n	402e42 <__sfvwrite_r+0x152>
  402ee2:	6820      	ldr	r0, [r4, #0]
  402ee4:	46b8      	mov	r8, r7
  402ee6:	46ba      	mov	sl, r7
  402ee8:	46bb      	mov	fp, r7
  402eea:	e755      	b.n	402d98 <__sfvwrite_r+0xa8>
  402eec:	6962      	ldr	r2, [r4, #20]
  402eee:	6820      	ldr	r0, [r4, #0]
  402ef0:	6921      	ldr	r1, [r4, #16]
  402ef2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402ef6:	eba0 0a01 	sub.w	sl, r0, r1
  402efa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402efe:	f10a 0001 	add.w	r0, sl, #1
  402f02:	ea4f 0868 	mov.w	r8, r8, asr #1
  402f06:	4438      	add	r0, r7
  402f08:	4540      	cmp	r0, r8
  402f0a:	4642      	mov	r2, r8
  402f0c:	bf84      	itt	hi
  402f0e:	4680      	movhi	r8, r0
  402f10:	4642      	movhi	r2, r8
  402f12:	055b      	lsls	r3, r3, #21
  402f14:	d544      	bpl.n	402fa0 <__sfvwrite_r+0x2b0>
  402f16:	4611      	mov	r1, r2
  402f18:	9800      	ldr	r0, [sp, #0]
  402f1a:	f000 f921 	bl	403160 <_malloc_r>
  402f1e:	4683      	mov	fp, r0
  402f20:	2800      	cmp	r0, #0
  402f22:	d055      	beq.n	402fd0 <__sfvwrite_r+0x2e0>
  402f24:	4652      	mov	r2, sl
  402f26:	6921      	ldr	r1, [r4, #16]
  402f28:	f000 fc32 	bl	403790 <memcpy>
  402f2c:	89a3      	ldrh	r3, [r4, #12]
  402f2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402f36:	81a3      	strh	r3, [r4, #12]
  402f38:	eb0b 000a 	add.w	r0, fp, sl
  402f3c:	eba8 030a 	sub.w	r3, r8, sl
  402f40:	f8c4 b010 	str.w	fp, [r4, #16]
  402f44:	f8c4 8014 	str.w	r8, [r4, #20]
  402f48:	6020      	str	r0, [r4, #0]
  402f4a:	60a3      	str	r3, [r4, #8]
  402f4c:	46b8      	mov	r8, r7
  402f4e:	46ba      	mov	sl, r7
  402f50:	46bb      	mov	fp, r7
  402f52:	e721      	b.n	402d98 <__sfvwrite_r+0xa8>
  402f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402f58:	42b9      	cmp	r1, r7
  402f5a:	bf28      	it	cs
  402f5c:	4639      	movcs	r1, r7
  402f5e:	464a      	mov	r2, r9
  402f60:	fb91 f1f3 	sdiv	r1, r1, r3
  402f64:	9800      	ldr	r0, [sp, #0]
  402f66:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402f68:	fb03 f301 	mul.w	r3, r3, r1
  402f6c:	69e1      	ldr	r1, [r4, #28]
  402f6e:	47b0      	blx	r6
  402f70:	f1b0 0a00 	subs.w	sl, r0, #0
  402f74:	f73f af1b 	bgt.w	402dae <__sfvwrite_r+0xbe>
  402f78:	e738      	b.n	402dec <__sfvwrite_r+0xfc>
  402f7a:	461a      	mov	r2, r3
  402f7c:	4629      	mov	r1, r5
  402f7e:	9301      	str	r3, [sp, #4]
  402f80:	f000 fca0 	bl	4038c4 <memmove>
  402f84:	6822      	ldr	r2, [r4, #0]
  402f86:	9b01      	ldr	r3, [sp, #4]
  402f88:	9800      	ldr	r0, [sp, #0]
  402f8a:	441a      	add	r2, r3
  402f8c:	6022      	str	r2, [r4, #0]
  402f8e:	4621      	mov	r1, r4
  402f90:	f7ff fc4a 	bl	402828 <_fflush_r>
  402f94:	9b01      	ldr	r3, [sp, #4]
  402f96:	2800      	cmp	r0, #0
  402f98:	f47f af28 	bne.w	402dec <__sfvwrite_r+0xfc>
  402f9c:	461f      	mov	r7, r3
  402f9e:	e750      	b.n	402e42 <__sfvwrite_r+0x152>
  402fa0:	9800      	ldr	r0, [sp, #0]
  402fa2:	f000 fcff 	bl	4039a4 <_realloc_r>
  402fa6:	4683      	mov	fp, r0
  402fa8:	2800      	cmp	r0, #0
  402faa:	d1c5      	bne.n	402f38 <__sfvwrite_r+0x248>
  402fac:	9d00      	ldr	r5, [sp, #0]
  402fae:	6921      	ldr	r1, [r4, #16]
  402fb0:	4628      	mov	r0, r5
  402fb2:	f7ff fdb7 	bl	402b24 <_free_r>
  402fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402fba:	220c      	movs	r2, #12
  402fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402fc0:	602a      	str	r2, [r5, #0]
  402fc2:	e715      	b.n	402df0 <__sfvwrite_r+0x100>
  402fc4:	f106 0901 	add.w	r9, r6, #1
  402fc8:	e722      	b.n	402e10 <__sfvwrite_r+0x120>
  402fca:	f04f 30ff 	mov.w	r0, #4294967295
  402fce:	e6bf      	b.n	402d50 <__sfvwrite_r+0x60>
  402fd0:	9a00      	ldr	r2, [sp, #0]
  402fd2:	230c      	movs	r3, #12
  402fd4:	6013      	str	r3, [r2, #0]
  402fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402fda:	e709      	b.n	402df0 <__sfvwrite_r+0x100>
  402fdc:	7ffffc00 	.word	0x7ffffc00

00402fe0 <_fwalk_reent>:
  402fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402fe4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402fe8:	d01f      	beq.n	40302a <_fwalk_reent+0x4a>
  402fea:	4688      	mov	r8, r1
  402fec:	4606      	mov	r6, r0
  402fee:	f04f 0900 	mov.w	r9, #0
  402ff2:	687d      	ldr	r5, [r7, #4]
  402ff4:	68bc      	ldr	r4, [r7, #8]
  402ff6:	3d01      	subs	r5, #1
  402ff8:	d411      	bmi.n	40301e <_fwalk_reent+0x3e>
  402ffa:	89a3      	ldrh	r3, [r4, #12]
  402ffc:	2b01      	cmp	r3, #1
  402ffe:	f105 35ff 	add.w	r5, r5, #4294967295
  403002:	d908      	bls.n	403016 <_fwalk_reent+0x36>
  403004:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403008:	3301      	adds	r3, #1
  40300a:	4621      	mov	r1, r4
  40300c:	4630      	mov	r0, r6
  40300e:	d002      	beq.n	403016 <_fwalk_reent+0x36>
  403010:	47c0      	blx	r8
  403012:	ea49 0900 	orr.w	r9, r9, r0
  403016:	1c6b      	adds	r3, r5, #1
  403018:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40301c:	d1ed      	bne.n	402ffa <_fwalk_reent+0x1a>
  40301e:	683f      	ldr	r7, [r7, #0]
  403020:	2f00      	cmp	r7, #0
  403022:	d1e6      	bne.n	402ff2 <_fwalk_reent+0x12>
  403024:	4648      	mov	r0, r9
  403026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40302a:	46b9      	mov	r9, r7
  40302c:	4648      	mov	r0, r9
  40302e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403032:	bf00      	nop

00403034 <__locale_mb_cur_max>:
  403034:	4b04      	ldr	r3, [pc, #16]	; (403048 <__locale_mb_cur_max+0x14>)
  403036:	4a05      	ldr	r2, [pc, #20]	; (40304c <__locale_mb_cur_max+0x18>)
  403038:	681b      	ldr	r3, [r3, #0]
  40303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40303c:	2b00      	cmp	r3, #0
  40303e:	bf08      	it	eq
  403040:	4613      	moveq	r3, r2
  403042:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  403046:	4770      	bx	lr
  403048:	20400010 	.word	0x20400010
  40304c:	20400444 	.word	0x20400444

00403050 <__retarget_lock_init_recursive>:
  403050:	4770      	bx	lr
  403052:	bf00      	nop

00403054 <__retarget_lock_close_recursive>:
  403054:	4770      	bx	lr
  403056:	bf00      	nop

00403058 <__retarget_lock_acquire_recursive>:
  403058:	4770      	bx	lr
  40305a:	bf00      	nop

0040305c <__retarget_lock_release_recursive>:
  40305c:	4770      	bx	lr
  40305e:	bf00      	nop

00403060 <__swhatbuf_r>:
  403060:	b570      	push	{r4, r5, r6, lr}
  403062:	460c      	mov	r4, r1
  403064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403068:	2900      	cmp	r1, #0
  40306a:	b090      	sub	sp, #64	; 0x40
  40306c:	4615      	mov	r5, r2
  40306e:	461e      	mov	r6, r3
  403070:	db14      	blt.n	40309c <__swhatbuf_r+0x3c>
  403072:	aa01      	add	r2, sp, #4
  403074:	f001 f88e 	bl	404194 <_fstat_r>
  403078:	2800      	cmp	r0, #0
  40307a:	db0f      	blt.n	40309c <__swhatbuf_r+0x3c>
  40307c:	9a02      	ldr	r2, [sp, #8]
  40307e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403082:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403086:	fab2 f282 	clz	r2, r2
  40308a:	0952      	lsrs	r2, r2, #5
  40308c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403090:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403094:	6032      	str	r2, [r6, #0]
  403096:	602b      	str	r3, [r5, #0]
  403098:	b010      	add	sp, #64	; 0x40
  40309a:	bd70      	pop	{r4, r5, r6, pc}
  40309c:	89a2      	ldrh	r2, [r4, #12]
  40309e:	2300      	movs	r3, #0
  4030a0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4030a4:	6033      	str	r3, [r6, #0]
  4030a6:	d004      	beq.n	4030b2 <__swhatbuf_r+0x52>
  4030a8:	2240      	movs	r2, #64	; 0x40
  4030aa:	4618      	mov	r0, r3
  4030ac:	602a      	str	r2, [r5, #0]
  4030ae:	b010      	add	sp, #64	; 0x40
  4030b0:	bd70      	pop	{r4, r5, r6, pc}
  4030b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4030b6:	602b      	str	r3, [r5, #0]
  4030b8:	b010      	add	sp, #64	; 0x40
  4030ba:	bd70      	pop	{r4, r5, r6, pc}

004030bc <__smakebuf_r>:
  4030bc:	898a      	ldrh	r2, [r1, #12]
  4030be:	0792      	lsls	r2, r2, #30
  4030c0:	460b      	mov	r3, r1
  4030c2:	d506      	bpl.n	4030d2 <__smakebuf_r+0x16>
  4030c4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4030c8:	2101      	movs	r1, #1
  4030ca:	601a      	str	r2, [r3, #0]
  4030cc:	611a      	str	r2, [r3, #16]
  4030ce:	6159      	str	r1, [r3, #20]
  4030d0:	4770      	bx	lr
  4030d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4030d4:	b083      	sub	sp, #12
  4030d6:	ab01      	add	r3, sp, #4
  4030d8:	466a      	mov	r2, sp
  4030da:	460c      	mov	r4, r1
  4030dc:	4606      	mov	r6, r0
  4030de:	f7ff ffbf 	bl	403060 <__swhatbuf_r>
  4030e2:	9900      	ldr	r1, [sp, #0]
  4030e4:	4605      	mov	r5, r0
  4030e6:	4630      	mov	r0, r6
  4030e8:	f000 f83a 	bl	403160 <_malloc_r>
  4030ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4030f0:	b1d8      	cbz	r0, 40312a <__smakebuf_r+0x6e>
  4030f2:	9a01      	ldr	r2, [sp, #4]
  4030f4:	4f15      	ldr	r7, [pc, #84]	; (40314c <__smakebuf_r+0x90>)
  4030f6:	9900      	ldr	r1, [sp, #0]
  4030f8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4030fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4030fe:	81a3      	strh	r3, [r4, #12]
  403100:	6020      	str	r0, [r4, #0]
  403102:	6120      	str	r0, [r4, #16]
  403104:	6161      	str	r1, [r4, #20]
  403106:	b91a      	cbnz	r2, 403110 <__smakebuf_r+0x54>
  403108:	432b      	orrs	r3, r5
  40310a:	81a3      	strh	r3, [r4, #12]
  40310c:	b003      	add	sp, #12
  40310e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403110:	4630      	mov	r0, r6
  403112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403116:	f001 f851 	bl	4041bc <_isatty_r>
  40311a:	b1a0      	cbz	r0, 403146 <__smakebuf_r+0x8a>
  40311c:	89a3      	ldrh	r3, [r4, #12]
  40311e:	f023 0303 	bic.w	r3, r3, #3
  403122:	f043 0301 	orr.w	r3, r3, #1
  403126:	b21b      	sxth	r3, r3
  403128:	e7ee      	b.n	403108 <__smakebuf_r+0x4c>
  40312a:	059a      	lsls	r2, r3, #22
  40312c:	d4ee      	bmi.n	40310c <__smakebuf_r+0x50>
  40312e:	f023 0303 	bic.w	r3, r3, #3
  403132:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403136:	f043 0302 	orr.w	r3, r3, #2
  40313a:	2101      	movs	r1, #1
  40313c:	81a3      	strh	r3, [r4, #12]
  40313e:	6022      	str	r2, [r4, #0]
  403140:	6122      	str	r2, [r4, #16]
  403142:	6161      	str	r1, [r4, #20]
  403144:	e7e2      	b.n	40310c <__smakebuf_r+0x50>
  403146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40314a:	e7dd      	b.n	403108 <__smakebuf_r+0x4c>
  40314c:	0040287d 	.word	0x0040287d

00403150 <malloc>:
  403150:	4b02      	ldr	r3, [pc, #8]	; (40315c <malloc+0xc>)
  403152:	4601      	mov	r1, r0
  403154:	6818      	ldr	r0, [r3, #0]
  403156:	f000 b803 	b.w	403160 <_malloc_r>
  40315a:	bf00      	nop
  40315c:	20400010 	.word	0x20400010

00403160 <_malloc_r>:
  403160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403164:	f101 060b 	add.w	r6, r1, #11
  403168:	2e16      	cmp	r6, #22
  40316a:	b083      	sub	sp, #12
  40316c:	4605      	mov	r5, r0
  40316e:	f240 809e 	bls.w	4032ae <_malloc_r+0x14e>
  403172:	f036 0607 	bics.w	r6, r6, #7
  403176:	f100 80bd 	bmi.w	4032f4 <_malloc_r+0x194>
  40317a:	42b1      	cmp	r1, r6
  40317c:	f200 80ba 	bhi.w	4032f4 <_malloc_r+0x194>
  403180:	f000 fc04 	bl	40398c <__malloc_lock>
  403184:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403188:	f0c0 8293 	bcc.w	4036b2 <_malloc_r+0x552>
  40318c:	0a73      	lsrs	r3, r6, #9
  40318e:	f000 80b8 	beq.w	403302 <_malloc_r+0x1a2>
  403192:	2b04      	cmp	r3, #4
  403194:	f200 8179 	bhi.w	40348a <_malloc_r+0x32a>
  403198:	09b3      	lsrs	r3, r6, #6
  40319a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40319e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4031a2:	00c3      	lsls	r3, r0, #3
  4031a4:	4fbf      	ldr	r7, [pc, #764]	; (4034a4 <_malloc_r+0x344>)
  4031a6:	443b      	add	r3, r7
  4031a8:	f1a3 0108 	sub.w	r1, r3, #8
  4031ac:	685c      	ldr	r4, [r3, #4]
  4031ae:	42a1      	cmp	r1, r4
  4031b0:	d106      	bne.n	4031c0 <_malloc_r+0x60>
  4031b2:	e00c      	b.n	4031ce <_malloc_r+0x6e>
  4031b4:	2a00      	cmp	r2, #0
  4031b6:	f280 80aa 	bge.w	40330e <_malloc_r+0x1ae>
  4031ba:	68e4      	ldr	r4, [r4, #12]
  4031bc:	42a1      	cmp	r1, r4
  4031be:	d006      	beq.n	4031ce <_malloc_r+0x6e>
  4031c0:	6863      	ldr	r3, [r4, #4]
  4031c2:	f023 0303 	bic.w	r3, r3, #3
  4031c6:	1b9a      	subs	r2, r3, r6
  4031c8:	2a0f      	cmp	r2, #15
  4031ca:	ddf3      	ble.n	4031b4 <_malloc_r+0x54>
  4031cc:	4670      	mov	r0, lr
  4031ce:	693c      	ldr	r4, [r7, #16]
  4031d0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4034b8 <_malloc_r+0x358>
  4031d4:	4574      	cmp	r4, lr
  4031d6:	f000 81ab 	beq.w	403530 <_malloc_r+0x3d0>
  4031da:	6863      	ldr	r3, [r4, #4]
  4031dc:	f023 0303 	bic.w	r3, r3, #3
  4031e0:	1b9a      	subs	r2, r3, r6
  4031e2:	2a0f      	cmp	r2, #15
  4031e4:	f300 8190 	bgt.w	403508 <_malloc_r+0x3a8>
  4031e8:	2a00      	cmp	r2, #0
  4031ea:	f8c7 e014 	str.w	lr, [r7, #20]
  4031ee:	f8c7 e010 	str.w	lr, [r7, #16]
  4031f2:	f280 809d 	bge.w	403330 <_malloc_r+0x1d0>
  4031f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4031fa:	f080 8161 	bcs.w	4034c0 <_malloc_r+0x360>
  4031fe:	08db      	lsrs	r3, r3, #3
  403200:	f103 0c01 	add.w	ip, r3, #1
  403204:	1099      	asrs	r1, r3, #2
  403206:	687a      	ldr	r2, [r7, #4]
  403208:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40320c:	f8c4 8008 	str.w	r8, [r4, #8]
  403210:	2301      	movs	r3, #1
  403212:	408b      	lsls	r3, r1
  403214:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403218:	4313      	orrs	r3, r2
  40321a:	3908      	subs	r1, #8
  40321c:	60e1      	str	r1, [r4, #12]
  40321e:	607b      	str	r3, [r7, #4]
  403220:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403224:	f8c8 400c 	str.w	r4, [r8, #12]
  403228:	1082      	asrs	r2, r0, #2
  40322a:	2401      	movs	r4, #1
  40322c:	4094      	lsls	r4, r2
  40322e:	429c      	cmp	r4, r3
  403230:	f200 808b 	bhi.w	40334a <_malloc_r+0x1ea>
  403234:	421c      	tst	r4, r3
  403236:	d106      	bne.n	403246 <_malloc_r+0xe6>
  403238:	f020 0003 	bic.w	r0, r0, #3
  40323c:	0064      	lsls	r4, r4, #1
  40323e:	421c      	tst	r4, r3
  403240:	f100 0004 	add.w	r0, r0, #4
  403244:	d0fa      	beq.n	40323c <_malloc_r+0xdc>
  403246:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40324a:	46cc      	mov	ip, r9
  40324c:	4680      	mov	r8, r0
  40324e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403252:	459c      	cmp	ip, r3
  403254:	d107      	bne.n	403266 <_malloc_r+0x106>
  403256:	e16d      	b.n	403534 <_malloc_r+0x3d4>
  403258:	2a00      	cmp	r2, #0
  40325a:	f280 817b 	bge.w	403554 <_malloc_r+0x3f4>
  40325e:	68db      	ldr	r3, [r3, #12]
  403260:	459c      	cmp	ip, r3
  403262:	f000 8167 	beq.w	403534 <_malloc_r+0x3d4>
  403266:	6859      	ldr	r1, [r3, #4]
  403268:	f021 0103 	bic.w	r1, r1, #3
  40326c:	1b8a      	subs	r2, r1, r6
  40326e:	2a0f      	cmp	r2, #15
  403270:	ddf2      	ble.n	403258 <_malloc_r+0xf8>
  403272:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403276:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40327a:	9300      	str	r3, [sp, #0]
  40327c:	199c      	adds	r4, r3, r6
  40327e:	4628      	mov	r0, r5
  403280:	f046 0601 	orr.w	r6, r6, #1
  403284:	f042 0501 	orr.w	r5, r2, #1
  403288:	605e      	str	r6, [r3, #4]
  40328a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40328e:	f8cc 8008 	str.w	r8, [ip, #8]
  403292:	617c      	str	r4, [r7, #20]
  403294:	613c      	str	r4, [r7, #16]
  403296:	f8c4 e00c 	str.w	lr, [r4, #12]
  40329a:	f8c4 e008 	str.w	lr, [r4, #8]
  40329e:	6065      	str	r5, [r4, #4]
  4032a0:	505a      	str	r2, [r3, r1]
  4032a2:	f000 fb79 	bl	403998 <__malloc_unlock>
  4032a6:	9b00      	ldr	r3, [sp, #0]
  4032a8:	f103 0408 	add.w	r4, r3, #8
  4032ac:	e01e      	b.n	4032ec <_malloc_r+0x18c>
  4032ae:	2910      	cmp	r1, #16
  4032b0:	d820      	bhi.n	4032f4 <_malloc_r+0x194>
  4032b2:	f000 fb6b 	bl	40398c <__malloc_lock>
  4032b6:	2610      	movs	r6, #16
  4032b8:	2318      	movs	r3, #24
  4032ba:	2002      	movs	r0, #2
  4032bc:	4f79      	ldr	r7, [pc, #484]	; (4034a4 <_malloc_r+0x344>)
  4032be:	443b      	add	r3, r7
  4032c0:	f1a3 0208 	sub.w	r2, r3, #8
  4032c4:	685c      	ldr	r4, [r3, #4]
  4032c6:	4294      	cmp	r4, r2
  4032c8:	f000 813d 	beq.w	403546 <_malloc_r+0x3e6>
  4032cc:	6863      	ldr	r3, [r4, #4]
  4032ce:	68e1      	ldr	r1, [r4, #12]
  4032d0:	68a6      	ldr	r6, [r4, #8]
  4032d2:	f023 0303 	bic.w	r3, r3, #3
  4032d6:	4423      	add	r3, r4
  4032d8:	4628      	mov	r0, r5
  4032da:	685a      	ldr	r2, [r3, #4]
  4032dc:	60f1      	str	r1, [r6, #12]
  4032de:	f042 0201 	orr.w	r2, r2, #1
  4032e2:	608e      	str	r6, [r1, #8]
  4032e4:	605a      	str	r2, [r3, #4]
  4032e6:	f000 fb57 	bl	403998 <__malloc_unlock>
  4032ea:	3408      	adds	r4, #8
  4032ec:	4620      	mov	r0, r4
  4032ee:	b003      	add	sp, #12
  4032f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032f4:	2400      	movs	r4, #0
  4032f6:	230c      	movs	r3, #12
  4032f8:	4620      	mov	r0, r4
  4032fa:	602b      	str	r3, [r5, #0]
  4032fc:	b003      	add	sp, #12
  4032fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403302:	2040      	movs	r0, #64	; 0x40
  403304:	f44f 7300 	mov.w	r3, #512	; 0x200
  403308:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40330c:	e74a      	b.n	4031a4 <_malloc_r+0x44>
  40330e:	4423      	add	r3, r4
  403310:	68e1      	ldr	r1, [r4, #12]
  403312:	685a      	ldr	r2, [r3, #4]
  403314:	68a6      	ldr	r6, [r4, #8]
  403316:	f042 0201 	orr.w	r2, r2, #1
  40331a:	60f1      	str	r1, [r6, #12]
  40331c:	4628      	mov	r0, r5
  40331e:	608e      	str	r6, [r1, #8]
  403320:	605a      	str	r2, [r3, #4]
  403322:	f000 fb39 	bl	403998 <__malloc_unlock>
  403326:	3408      	adds	r4, #8
  403328:	4620      	mov	r0, r4
  40332a:	b003      	add	sp, #12
  40332c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403330:	4423      	add	r3, r4
  403332:	4628      	mov	r0, r5
  403334:	685a      	ldr	r2, [r3, #4]
  403336:	f042 0201 	orr.w	r2, r2, #1
  40333a:	605a      	str	r2, [r3, #4]
  40333c:	f000 fb2c 	bl	403998 <__malloc_unlock>
  403340:	3408      	adds	r4, #8
  403342:	4620      	mov	r0, r4
  403344:	b003      	add	sp, #12
  403346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40334a:	68bc      	ldr	r4, [r7, #8]
  40334c:	6863      	ldr	r3, [r4, #4]
  40334e:	f023 0803 	bic.w	r8, r3, #3
  403352:	45b0      	cmp	r8, r6
  403354:	d304      	bcc.n	403360 <_malloc_r+0x200>
  403356:	eba8 0306 	sub.w	r3, r8, r6
  40335a:	2b0f      	cmp	r3, #15
  40335c:	f300 8085 	bgt.w	40346a <_malloc_r+0x30a>
  403360:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4034bc <_malloc_r+0x35c>
  403364:	4b50      	ldr	r3, [pc, #320]	; (4034a8 <_malloc_r+0x348>)
  403366:	f8d9 2000 	ldr.w	r2, [r9]
  40336a:	681b      	ldr	r3, [r3, #0]
  40336c:	3201      	adds	r2, #1
  40336e:	4433      	add	r3, r6
  403370:	eb04 0a08 	add.w	sl, r4, r8
  403374:	f000 8155 	beq.w	403622 <_malloc_r+0x4c2>
  403378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40337c:	330f      	adds	r3, #15
  40337e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403382:	f02b 0b0f 	bic.w	fp, fp, #15
  403386:	4659      	mov	r1, fp
  403388:	4628      	mov	r0, r5
  40338a:	f000 fcb1 	bl	403cf0 <_sbrk_r>
  40338e:	1c41      	adds	r1, r0, #1
  403390:	4602      	mov	r2, r0
  403392:	f000 80fc 	beq.w	40358e <_malloc_r+0x42e>
  403396:	4582      	cmp	sl, r0
  403398:	f200 80f7 	bhi.w	40358a <_malloc_r+0x42a>
  40339c:	4b43      	ldr	r3, [pc, #268]	; (4034ac <_malloc_r+0x34c>)
  40339e:	6819      	ldr	r1, [r3, #0]
  4033a0:	4459      	add	r1, fp
  4033a2:	6019      	str	r1, [r3, #0]
  4033a4:	f000 814d 	beq.w	403642 <_malloc_r+0x4e2>
  4033a8:	f8d9 0000 	ldr.w	r0, [r9]
  4033ac:	3001      	adds	r0, #1
  4033ae:	bf1b      	ittet	ne
  4033b0:	eba2 0a0a 	subne.w	sl, r2, sl
  4033b4:	4451      	addne	r1, sl
  4033b6:	f8c9 2000 	streq.w	r2, [r9]
  4033ba:	6019      	strne	r1, [r3, #0]
  4033bc:	f012 0107 	ands.w	r1, r2, #7
  4033c0:	f000 8115 	beq.w	4035ee <_malloc_r+0x48e>
  4033c4:	f1c1 0008 	rsb	r0, r1, #8
  4033c8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4033cc:	4402      	add	r2, r0
  4033ce:	3108      	adds	r1, #8
  4033d0:	eb02 090b 	add.w	r9, r2, fp
  4033d4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4033d8:	eba1 0909 	sub.w	r9, r1, r9
  4033dc:	4649      	mov	r1, r9
  4033de:	4628      	mov	r0, r5
  4033e0:	9301      	str	r3, [sp, #4]
  4033e2:	9200      	str	r2, [sp, #0]
  4033e4:	f000 fc84 	bl	403cf0 <_sbrk_r>
  4033e8:	1c43      	adds	r3, r0, #1
  4033ea:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4033ee:	f000 8143 	beq.w	403678 <_malloc_r+0x518>
  4033f2:	1a80      	subs	r0, r0, r2
  4033f4:	4448      	add	r0, r9
  4033f6:	f040 0001 	orr.w	r0, r0, #1
  4033fa:	6819      	ldr	r1, [r3, #0]
  4033fc:	60ba      	str	r2, [r7, #8]
  4033fe:	4449      	add	r1, r9
  403400:	42bc      	cmp	r4, r7
  403402:	6050      	str	r0, [r2, #4]
  403404:	6019      	str	r1, [r3, #0]
  403406:	d017      	beq.n	403438 <_malloc_r+0x2d8>
  403408:	f1b8 0f0f 	cmp.w	r8, #15
  40340c:	f240 80fb 	bls.w	403606 <_malloc_r+0x4a6>
  403410:	6860      	ldr	r0, [r4, #4]
  403412:	f1a8 020c 	sub.w	r2, r8, #12
  403416:	f022 0207 	bic.w	r2, r2, #7
  40341a:	eb04 0e02 	add.w	lr, r4, r2
  40341e:	f000 0001 	and.w	r0, r0, #1
  403422:	f04f 0c05 	mov.w	ip, #5
  403426:	4310      	orrs	r0, r2
  403428:	2a0f      	cmp	r2, #15
  40342a:	6060      	str	r0, [r4, #4]
  40342c:	f8ce c004 	str.w	ip, [lr, #4]
  403430:	f8ce c008 	str.w	ip, [lr, #8]
  403434:	f200 8117 	bhi.w	403666 <_malloc_r+0x506>
  403438:	4b1d      	ldr	r3, [pc, #116]	; (4034b0 <_malloc_r+0x350>)
  40343a:	68bc      	ldr	r4, [r7, #8]
  40343c:	681a      	ldr	r2, [r3, #0]
  40343e:	4291      	cmp	r1, r2
  403440:	bf88      	it	hi
  403442:	6019      	strhi	r1, [r3, #0]
  403444:	4b1b      	ldr	r3, [pc, #108]	; (4034b4 <_malloc_r+0x354>)
  403446:	681a      	ldr	r2, [r3, #0]
  403448:	4291      	cmp	r1, r2
  40344a:	6862      	ldr	r2, [r4, #4]
  40344c:	bf88      	it	hi
  40344e:	6019      	strhi	r1, [r3, #0]
  403450:	f022 0203 	bic.w	r2, r2, #3
  403454:	4296      	cmp	r6, r2
  403456:	eba2 0306 	sub.w	r3, r2, r6
  40345a:	d801      	bhi.n	403460 <_malloc_r+0x300>
  40345c:	2b0f      	cmp	r3, #15
  40345e:	dc04      	bgt.n	40346a <_malloc_r+0x30a>
  403460:	4628      	mov	r0, r5
  403462:	f000 fa99 	bl	403998 <__malloc_unlock>
  403466:	2400      	movs	r4, #0
  403468:	e740      	b.n	4032ec <_malloc_r+0x18c>
  40346a:	19a2      	adds	r2, r4, r6
  40346c:	f043 0301 	orr.w	r3, r3, #1
  403470:	f046 0601 	orr.w	r6, r6, #1
  403474:	6066      	str	r6, [r4, #4]
  403476:	4628      	mov	r0, r5
  403478:	60ba      	str	r2, [r7, #8]
  40347a:	6053      	str	r3, [r2, #4]
  40347c:	f000 fa8c 	bl	403998 <__malloc_unlock>
  403480:	3408      	adds	r4, #8
  403482:	4620      	mov	r0, r4
  403484:	b003      	add	sp, #12
  403486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40348a:	2b14      	cmp	r3, #20
  40348c:	d971      	bls.n	403572 <_malloc_r+0x412>
  40348e:	2b54      	cmp	r3, #84	; 0x54
  403490:	f200 80a3 	bhi.w	4035da <_malloc_r+0x47a>
  403494:	0b33      	lsrs	r3, r6, #12
  403496:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40349a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40349e:	00c3      	lsls	r3, r0, #3
  4034a0:	e680      	b.n	4031a4 <_malloc_r+0x44>
  4034a2:	bf00      	nop
  4034a4:	204005b0 	.word	0x204005b0
  4034a8:	20400a8c 	.word	0x20400a8c
  4034ac:	20400a5c 	.word	0x20400a5c
  4034b0:	20400a84 	.word	0x20400a84
  4034b4:	20400a88 	.word	0x20400a88
  4034b8:	204005b8 	.word	0x204005b8
  4034bc:	204009b8 	.word	0x204009b8
  4034c0:	0a5a      	lsrs	r2, r3, #9
  4034c2:	2a04      	cmp	r2, #4
  4034c4:	d95b      	bls.n	40357e <_malloc_r+0x41e>
  4034c6:	2a14      	cmp	r2, #20
  4034c8:	f200 80ae 	bhi.w	403628 <_malloc_r+0x4c8>
  4034cc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4034d0:	00c9      	lsls	r1, r1, #3
  4034d2:	325b      	adds	r2, #91	; 0x5b
  4034d4:	eb07 0c01 	add.w	ip, r7, r1
  4034d8:	5879      	ldr	r1, [r7, r1]
  4034da:	f1ac 0c08 	sub.w	ip, ip, #8
  4034de:	458c      	cmp	ip, r1
  4034e0:	f000 8088 	beq.w	4035f4 <_malloc_r+0x494>
  4034e4:	684a      	ldr	r2, [r1, #4]
  4034e6:	f022 0203 	bic.w	r2, r2, #3
  4034ea:	4293      	cmp	r3, r2
  4034ec:	d273      	bcs.n	4035d6 <_malloc_r+0x476>
  4034ee:	6889      	ldr	r1, [r1, #8]
  4034f0:	458c      	cmp	ip, r1
  4034f2:	d1f7      	bne.n	4034e4 <_malloc_r+0x384>
  4034f4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4034f8:	687b      	ldr	r3, [r7, #4]
  4034fa:	60e2      	str	r2, [r4, #12]
  4034fc:	f8c4 c008 	str.w	ip, [r4, #8]
  403500:	6094      	str	r4, [r2, #8]
  403502:	f8cc 400c 	str.w	r4, [ip, #12]
  403506:	e68f      	b.n	403228 <_malloc_r+0xc8>
  403508:	19a1      	adds	r1, r4, r6
  40350a:	f046 0c01 	orr.w	ip, r6, #1
  40350e:	f042 0601 	orr.w	r6, r2, #1
  403512:	f8c4 c004 	str.w	ip, [r4, #4]
  403516:	4628      	mov	r0, r5
  403518:	6179      	str	r1, [r7, #20]
  40351a:	6139      	str	r1, [r7, #16]
  40351c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403520:	f8c1 e008 	str.w	lr, [r1, #8]
  403524:	604e      	str	r6, [r1, #4]
  403526:	50e2      	str	r2, [r4, r3]
  403528:	f000 fa36 	bl	403998 <__malloc_unlock>
  40352c:	3408      	adds	r4, #8
  40352e:	e6dd      	b.n	4032ec <_malloc_r+0x18c>
  403530:	687b      	ldr	r3, [r7, #4]
  403532:	e679      	b.n	403228 <_malloc_r+0xc8>
  403534:	f108 0801 	add.w	r8, r8, #1
  403538:	f018 0f03 	tst.w	r8, #3
  40353c:	f10c 0c08 	add.w	ip, ip, #8
  403540:	f47f ae85 	bne.w	40324e <_malloc_r+0xee>
  403544:	e02d      	b.n	4035a2 <_malloc_r+0x442>
  403546:	68dc      	ldr	r4, [r3, #12]
  403548:	42a3      	cmp	r3, r4
  40354a:	bf08      	it	eq
  40354c:	3002      	addeq	r0, #2
  40354e:	f43f ae3e 	beq.w	4031ce <_malloc_r+0x6e>
  403552:	e6bb      	b.n	4032cc <_malloc_r+0x16c>
  403554:	4419      	add	r1, r3
  403556:	461c      	mov	r4, r3
  403558:	684a      	ldr	r2, [r1, #4]
  40355a:	68db      	ldr	r3, [r3, #12]
  40355c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403560:	f042 0201 	orr.w	r2, r2, #1
  403564:	604a      	str	r2, [r1, #4]
  403566:	4628      	mov	r0, r5
  403568:	60f3      	str	r3, [r6, #12]
  40356a:	609e      	str	r6, [r3, #8]
  40356c:	f000 fa14 	bl	403998 <__malloc_unlock>
  403570:	e6bc      	b.n	4032ec <_malloc_r+0x18c>
  403572:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403576:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40357a:	00c3      	lsls	r3, r0, #3
  40357c:	e612      	b.n	4031a4 <_malloc_r+0x44>
  40357e:	099a      	lsrs	r2, r3, #6
  403580:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403584:	00c9      	lsls	r1, r1, #3
  403586:	3238      	adds	r2, #56	; 0x38
  403588:	e7a4      	b.n	4034d4 <_malloc_r+0x374>
  40358a:	42bc      	cmp	r4, r7
  40358c:	d054      	beq.n	403638 <_malloc_r+0x4d8>
  40358e:	68bc      	ldr	r4, [r7, #8]
  403590:	6862      	ldr	r2, [r4, #4]
  403592:	f022 0203 	bic.w	r2, r2, #3
  403596:	e75d      	b.n	403454 <_malloc_r+0x2f4>
  403598:	f859 3908 	ldr.w	r3, [r9], #-8
  40359c:	4599      	cmp	r9, r3
  40359e:	f040 8086 	bne.w	4036ae <_malloc_r+0x54e>
  4035a2:	f010 0f03 	tst.w	r0, #3
  4035a6:	f100 30ff 	add.w	r0, r0, #4294967295
  4035aa:	d1f5      	bne.n	403598 <_malloc_r+0x438>
  4035ac:	687b      	ldr	r3, [r7, #4]
  4035ae:	ea23 0304 	bic.w	r3, r3, r4
  4035b2:	607b      	str	r3, [r7, #4]
  4035b4:	0064      	lsls	r4, r4, #1
  4035b6:	429c      	cmp	r4, r3
  4035b8:	f63f aec7 	bhi.w	40334a <_malloc_r+0x1ea>
  4035bc:	2c00      	cmp	r4, #0
  4035be:	f43f aec4 	beq.w	40334a <_malloc_r+0x1ea>
  4035c2:	421c      	tst	r4, r3
  4035c4:	4640      	mov	r0, r8
  4035c6:	f47f ae3e 	bne.w	403246 <_malloc_r+0xe6>
  4035ca:	0064      	lsls	r4, r4, #1
  4035cc:	421c      	tst	r4, r3
  4035ce:	f100 0004 	add.w	r0, r0, #4
  4035d2:	d0fa      	beq.n	4035ca <_malloc_r+0x46a>
  4035d4:	e637      	b.n	403246 <_malloc_r+0xe6>
  4035d6:	468c      	mov	ip, r1
  4035d8:	e78c      	b.n	4034f4 <_malloc_r+0x394>
  4035da:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4035de:	d815      	bhi.n	40360c <_malloc_r+0x4ac>
  4035e0:	0bf3      	lsrs	r3, r6, #15
  4035e2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4035e6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4035ea:	00c3      	lsls	r3, r0, #3
  4035ec:	e5da      	b.n	4031a4 <_malloc_r+0x44>
  4035ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4035f2:	e6ed      	b.n	4033d0 <_malloc_r+0x270>
  4035f4:	687b      	ldr	r3, [r7, #4]
  4035f6:	1092      	asrs	r2, r2, #2
  4035f8:	2101      	movs	r1, #1
  4035fa:	fa01 f202 	lsl.w	r2, r1, r2
  4035fe:	4313      	orrs	r3, r2
  403600:	607b      	str	r3, [r7, #4]
  403602:	4662      	mov	r2, ip
  403604:	e779      	b.n	4034fa <_malloc_r+0x39a>
  403606:	2301      	movs	r3, #1
  403608:	6053      	str	r3, [r2, #4]
  40360a:	e729      	b.n	403460 <_malloc_r+0x300>
  40360c:	f240 5254 	movw	r2, #1364	; 0x554
  403610:	4293      	cmp	r3, r2
  403612:	d822      	bhi.n	40365a <_malloc_r+0x4fa>
  403614:	0cb3      	lsrs	r3, r6, #18
  403616:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40361a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40361e:	00c3      	lsls	r3, r0, #3
  403620:	e5c0      	b.n	4031a4 <_malloc_r+0x44>
  403622:	f103 0b10 	add.w	fp, r3, #16
  403626:	e6ae      	b.n	403386 <_malloc_r+0x226>
  403628:	2a54      	cmp	r2, #84	; 0x54
  40362a:	d829      	bhi.n	403680 <_malloc_r+0x520>
  40362c:	0b1a      	lsrs	r2, r3, #12
  40362e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403632:	00c9      	lsls	r1, r1, #3
  403634:	326e      	adds	r2, #110	; 0x6e
  403636:	e74d      	b.n	4034d4 <_malloc_r+0x374>
  403638:	4b20      	ldr	r3, [pc, #128]	; (4036bc <_malloc_r+0x55c>)
  40363a:	6819      	ldr	r1, [r3, #0]
  40363c:	4459      	add	r1, fp
  40363e:	6019      	str	r1, [r3, #0]
  403640:	e6b2      	b.n	4033a8 <_malloc_r+0x248>
  403642:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403646:	2800      	cmp	r0, #0
  403648:	f47f aeae 	bne.w	4033a8 <_malloc_r+0x248>
  40364c:	eb08 030b 	add.w	r3, r8, fp
  403650:	68ba      	ldr	r2, [r7, #8]
  403652:	f043 0301 	orr.w	r3, r3, #1
  403656:	6053      	str	r3, [r2, #4]
  403658:	e6ee      	b.n	403438 <_malloc_r+0x2d8>
  40365a:	207f      	movs	r0, #127	; 0x7f
  40365c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403660:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403664:	e59e      	b.n	4031a4 <_malloc_r+0x44>
  403666:	f104 0108 	add.w	r1, r4, #8
  40366a:	4628      	mov	r0, r5
  40366c:	9300      	str	r3, [sp, #0]
  40366e:	f7ff fa59 	bl	402b24 <_free_r>
  403672:	9b00      	ldr	r3, [sp, #0]
  403674:	6819      	ldr	r1, [r3, #0]
  403676:	e6df      	b.n	403438 <_malloc_r+0x2d8>
  403678:	2001      	movs	r0, #1
  40367a:	f04f 0900 	mov.w	r9, #0
  40367e:	e6bc      	b.n	4033fa <_malloc_r+0x29a>
  403680:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403684:	d805      	bhi.n	403692 <_malloc_r+0x532>
  403686:	0bda      	lsrs	r2, r3, #15
  403688:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40368c:	00c9      	lsls	r1, r1, #3
  40368e:	3277      	adds	r2, #119	; 0x77
  403690:	e720      	b.n	4034d4 <_malloc_r+0x374>
  403692:	f240 5154 	movw	r1, #1364	; 0x554
  403696:	428a      	cmp	r2, r1
  403698:	d805      	bhi.n	4036a6 <_malloc_r+0x546>
  40369a:	0c9a      	lsrs	r2, r3, #18
  40369c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4036a0:	00c9      	lsls	r1, r1, #3
  4036a2:	327c      	adds	r2, #124	; 0x7c
  4036a4:	e716      	b.n	4034d4 <_malloc_r+0x374>
  4036a6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4036aa:	227e      	movs	r2, #126	; 0x7e
  4036ac:	e712      	b.n	4034d4 <_malloc_r+0x374>
  4036ae:	687b      	ldr	r3, [r7, #4]
  4036b0:	e780      	b.n	4035b4 <_malloc_r+0x454>
  4036b2:	08f0      	lsrs	r0, r6, #3
  4036b4:	f106 0308 	add.w	r3, r6, #8
  4036b8:	e600      	b.n	4032bc <_malloc_r+0x15c>
  4036ba:	bf00      	nop
  4036bc:	20400a5c 	.word	0x20400a5c

004036c0 <__ascii_mbtowc>:
  4036c0:	b082      	sub	sp, #8
  4036c2:	b149      	cbz	r1, 4036d8 <__ascii_mbtowc+0x18>
  4036c4:	b15a      	cbz	r2, 4036de <__ascii_mbtowc+0x1e>
  4036c6:	b16b      	cbz	r3, 4036e4 <__ascii_mbtowc+0x24>
  4036c8:	7813      	ldrb	r3, [r2, #0]
  4036ca:	600b      	str	r3, [r1, #0]
  4036cc:	7812      	ldrb	r2, [r2, #0]
  4036ce:	1c10      	adds	r0, r2, #0
  4036d0:	bf18      	it	ne
  4036d2:	2001      	movne	r0, #1
  4036d4:	b002      	add	sp, #8
  4036d6:	4770      	bx	lr
  4036d8:	a901      	add	r1, sp, #4
  4036da:	2a00      	cmp	r2, #0
  4036dc:	d1f3      	bne.n	4036c6 <__ascii_mbtowc+0x6>
  4036de:	4610      	mov	r0, r2
  4036e0:	b002      	add	sp, #8
  4036e2:	4770      	bx	lr
  4036e4:	f06f 0001 	mvn.w	r0, #1
  4036e8:	e7f4      	b.n	4036d4 <__ascii_mbtowc+0x14>
  4036ea:	bf00      	nop
  4036ec:	0000      	movs	r0, r0
	...

004036f0 <memchr>:
  4036f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4036f4:	2a10      	cmp	r2, #16
  4036f6:	db2b      	blt.n	403750 <memchr+0x60>
  4036f8:	f010 0f07 	tst.w	r0, #7
  4036fc:	d008      	beq.n	403710 <memchr+0x20>
  4036fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  403702:	3a01      	subs	r2, #1
  403704:	428b      	cmp	r3, r1
  403706:	d02d      	beq.n	403764 <memchr+0x74>
  403708:	f010 0f07 	tst.w	r0, #7
  40370c:	b342      	cbz	r2, 403760 <memchr+0x70>
  40370e:	d1f6      	bne.n	4036fe <memchr+0xe>
  403710:	b4f0      	push	{r4, r5, r6, r7}
  403712:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403716:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40371a:	f022 0407 	bic.w	r4, r2, #7
  40371e:	f07f 0700 	mvns.w	r7, #0
  403722:	2300      	movs	r3, #0
  403724:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403728:	3c08      	subs	r4, #8
  40372a:	ea85 0501 	eor.w	r5, r5, r1
  40372e:	ea86 0601 	eor.w	r6, r6, r1
  403732:	fa85 f547 	uadd8	r5, r5, r7
  403736:	faa3 f587 	sel	r5, r3, r7
  40373a:	fa86 f647 	uadd8	r6, r6, r7
  40373e:	faa5 f687 	sel	r6, r5, r7
  403742:	b98e      	cbnz	r6, 403768 <memchr+0x78>
  403744:	d1ee      	bne.n	403724 <memchr+0x34>
  403746:	bcf0      	pop	{r4, r5, r6, r7}
  403748:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40374c:	f002 0207 	and.w	r2, r2, #7
  403750:	b132      	cbz	r2, 403760 <memchr+0x70>
  403752:	f810 3b01 	ldrb.w	r3, [r0], #1
  403756:	3a01      	subs	r2, #1
  403758:	ea83 0301 	eor.w	r3, r3, r1
  40375c:	b113      	cbz	r3, 403764 <memchr+0x74>
  40375e:	d1f8      	bne.n	403752 <memchr+0x62>
  403760:	2000      	movs	r0, #0
  403762:	4770      	bx	lr
  403764:	3801      	subs	r0, #1
  403766:	4770      	bx	lr
  403768:	2d00      	cmp	r5, #0
  40376a:	bf06      	itte	eq
  40376c:	4635      	moveq	r5, r6
  40376e:	3803      	subeq	r0, #3
  403770:	3807      	subne	r0, #7
  403772:	f015 0f01 	tst.w	r5, #1
  403776:	d107      	bne.n	403788 <memchr+0x98>
  403778:	3001      	adds	r0, #1
  40377a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40377e:	bf02      	ittt	eq
  403780:	3001      	addeq	r0, #1
  403782:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403786:	3001      	addeq	r0, #1
  403788:	bcf0      	pop	{r4, r5, r6, r7}
  40378a:	3801      	subs	r0, #1
  40378c:	4770      	bx	lr
  40378e:	bf00      	nop

00403790 <memcpy>:
  403790:	4684      	mov	ip, r0
  403792:	ea41 0300 	orr.w	r3, r1, r0
  403796:	f013 0303 	ands.w	r3, r3, #3
  40379a:	d16d      	bne.n	403878 <memcpy+0xe8>
  40379c:	3a40      	subs	r2, #64	; 0x40
  40379e:	d341      	bcc.n	403824 <memcpy+0x94>
  4037a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4037a4:	f840 3b04 	str.w	r3, [r0], #4
  4037a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4037ac:	f840 3b04 	str.w	r3, [r0], #4
  4037b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4037b4:	f840 3b04 	str.w	r3, [r0], #4
  4037b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4037bc:	f840 3b04 	str.w	r3, [r0], #4
  4037c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4037c4:	f840 3b04 	str.w	r3, [r0], #4
  4037c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4037cc:	f840 3b04 	str.w	r3, [r0], #4
  4037d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4037d4:	f840 3b04 	str.w	r3, [r0], #4
  4037d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4037dc:	f840 3b04 	str.w	r3, [r0], #4
  4037e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4037e4:	f840 3b04 	str.w	r3, [r0], #4
  4037e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4037ec:	f840 3b04 	str.w	r3, [r0], #4
  4037f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4037f4:	f840 3b04 	str.w	r3, [r0], #4
  4037f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4037fc:	f840 3b04 	str.w	r3, [r0], #4
  403800:	f851 3b04 	ldr.w	r3, [r1], #4
  403804:	f840 3b04 	str.w	r3, [r0], #4
  403808:	f851 3b04 	ldr.w	r3, [r1], #4
  40380c:	f840 3b04 	str.w	r3, [r0], #4
  403810:	f851 3b04 	ldr.w	r3, [r1], #4
  403814:	f840 3b04 	str.w	r3, [r0], #4
  403818:	f851 3b04 	ldr.w	r3, [r1], #4
  40381c:	f840 3b04 	str.w	r3, [r0], #4
  403820:	3a40      	subs	r2, #64	; 0x40
  403822:	d2bd      	bcs.n	4037a0 <memcpy+0x10>
  403824:	3230      	adds	r2, #48	; 0x30
  403826:	d311      	bcc.n	40384c <memcpy+0xbc>
  403828:	f851 3b04 	ldr.w	r3, [r1], #4
  40382c:	f840 3b04 	str.w	r3, [r0], #4
  403830:	f851 3b04 	ldr.w	r3, [r1], #4
  403834:	f840 3b04 	str.w	r3, [r0], #4
  403838:	f851 3b04 	ldr.w	r3, [r1], #4
  40383c:	f840 3b04 	str.w	r3, [r0], #4
  403840:	f851 3b04 	ldr.w	r3, [r1], #4
  403844:	f840 3b04 	str.w	r3, [r0], #4
  403848:	3a10      	subs	r2, #16
  40384a:	d2ed      	bcs.n	403828 <memcpy+0x98>
  40384c:	320c      	adds	r2, #12
  40384e:	d305      	bcc.n	40385c <memcpy+0xcc>
  403850:	f851 3b04 	ldr.w	r3, [r1], #4
  403854:	f840 3b04 	str.w	r3, [r0], #4
  403858:	3a04      	subs	r2, #4
  40385a:	d2f9      	bcs.n	403850 <memcpy+0xc0>
  40385c:	3204      	adds	r2, #4
  40385e:	d008      	beq.n	403872 <memcpy+0xe2>
  403860:	07d2      	lsls	r2, r2, #31
  403862:	bf1c      	itt	ne
  403864:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403868:	f800 3b01 	strbne.w	r3, [r0], #1
  40386c:	d301      	bcc.n	403872 <memcpy+0xe2>
  40386e:	880b      	ldrh	r3, [r1, #0]
  403870:	8003      	strh	r3, [r0, #0]
  403872:	4660      	mov	r0, ip
  403874:	4770      	bx	lr
  403876:	bf00      	nop
  403878:	2a08      	cmp	r2, #8
  40387a:	d313      	bcc.n	4038a4 <memcpy+0x114>
  40387c:	078b      	lsls	r3, r1, #30
  40387e:	d08d      	beq.n	40379c <memcpy+0xc>
  403880:	f010 0303 	ands.w	r3, r0, #3
  403884:	d08a      	beq.n	40379c <memcpy+0xc>
  403886:	f1c3 0304 	rsb	r3, r3, #4
  40388a:	1ad2      	subs	r2, r2, r3
  40388c:	07db      	lsls	r3, r3, #31
  40388e:	bf1c      	itt	ne
  403890:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403894:	f800 3b01 	strbne.w	r3, [r0], #1
  403898:	d380      	bcc.n	40379c <memcpy+0xc>
  40389a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40389e:	f820 3b02 	strh.w	r3, [r0], #2
  4038a2:	e77b      	b.n	40379c <memcpy+0xc>
  4038a4:	3a04      	subs	r2, #4
  4038a6:	d3d9      	bcc.n	40385c <memcpy+0xcc>
  4038a8:	3a01      	subs	r2, #1
  4038aa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4038ae:	f800 3b01 	strb.w	r3, [r0], #1
  4038b2:	d2f9      	bcs.n	4038a8 <memcpy+0x118>
  4038b4:	780b      	ldrb	r3, [r1, #0]
  4038b6:	7003      	strb	r3, [r0, #0]
  4038b8:	784b      	ldrb	r3, [r1, #1]
  4038ba:	7043      	strb	r3, [r0, #1]
  4038bc:	788b      	ldrb	r3, [r1, #2]
  4038be:	7083      	strb	r3, [r0, #2]
  4038c0:	4660      	mov	r0, ip
  4038c2:	4770      	bx	lr

004038c4 <memmove>:
  4038c4:	4288      	cmp	r0, r1
  4038c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4038c8:	d90d      	bls.n	4038e6 <memmove+0x22>
  4038ca:	188b      	adds	r3, r1, r2
  4038cc:	4298      	cmp	r0, r3
  4038ce:	d20a      	bcs.n	4038e6 <memmove+0x22>
  4038d0:	1884      	adds	r4, r0, r2
  4038d2:	2a00      	cmp	r2, #0
  4038d4:	d051      	beq.n	40397a <memmove+0xb6>
  4038d6:	4622      	mov	r2, r4
  4038d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4038dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4038e0:	4299      	cmp	r1, r3
  4038e2:	d1f9      	bne.n	4038d8 <memmove+0x14>
  4038e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4038e6:	2a0f      	cmp	r2, #15
  4038e8:	d948      	bls.n	40397c <memmove+0xb8>
  4038ea:	ea41 0300 	orr.w	r3, r1, r0
  4038ee:	079b      	lsls	r3, r3, #30
  4038f0:	d146      	bne.n	403980 <memmove+0xbc>
  4038f2:	f100 0410 	add.w	r4, r0, #16
  4038f6:	f101 0310 	add.w	r3, r1, #16
  4038fa:	4615      	mov	r5, r2
  4038fc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403900:	f844 6c10 	str.w	r6, [r4, #-16]
  403904:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403908:	f844 6c0c 	str.w	r6, [r4, #-12]
  40390c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403910:	f844 6c08 	str.w	r6, [r4, #-8]
  403914:	3d10      	subs	r5, #16
  403916:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40391a:	f844 6c04 	str.w	r6, [r4, #-4]
  40391e:	2d0f      	cmp	r5, #15
  403920:	f103 0310 	add.w	r3, r3, #16
  403924:	f104 0410 	add.w	r4, r4, #16
  403928:	d8e8      	bhi.n	4038fc <memmove+0x38>
  40392a:	f1a2 0310 	sub.w	r3, r2, #16
  40392e:	f023 030f 	bic.w	r3, r3, #15
  403932:	f002 0e0f 	and.w	lr, r2, #15
  403936:	3310      	adds	r3, #16
  403938:	f1be 0f03 	cmp.w	lr, #3
  40393c:	4419      	add	r1, r3
  40393e:	4403      	add	r3, r0
  403940:	d921      	bls.n	403986 <memmove+0xc2>
  403942:	1f1e      	subs	r6, r3, #4
  403944:	460d      	mov	r5, r1
  403946:	4674      	mov	r4, lr
  403948:	3c04      	subs	r4, #4
  40394a:	f855 7b04 	ldr.w	r7, [r5], #4
  40394e:	f846 7f04 	str.w	r7, [r6, #4]!
  403952:	2c03      	cmp	r4, #3
  403954:	d8f8      	bhi.n	403948 <memmove+0x84>
  403956:	f1ae 0404 	sub.w	r4, lr, #4
  40395a:	f024 0403 	bic.w	r4, r4, #3
  40395e:	3404      	adds	r4, #4
  403960:	4421      	add	r1, r4
  403962:	4423      	add	r3, r4
  403964:	f002 0203 	and.w	r2, r2, #3
  403968:	b162      	cbz	r2, 403984 <memmove+0xc0>
  40396a:	3b01      	subs	r3, #1
  40396c:	440a      	add	r2, r1
  40396e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403972:	f803 4f01 	strb.w	r4, [r3, #1]!
  403976:	428a      	cmp	r2, r1
  403978:	d1f9      	bne.n	40396e <memmove+0xaa>
  40397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40397c:	4603      	mov	r3, r0
  40397e:	e7f3      	b.n	403968 <memmove+0xa4>
  403980:	4603      	mov	r3, r0
  403982:	e7f2      	b.n	40396a <memmove+0xa6>
  403984:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403986:	4672      	mov	r2, lr
  403988:	e7ee      	b.n	403968 <memmove+0xa4>
  40398a:	bf00      	nop

0040398c <__malloc_lock>:
  40398c:	4801      	ldr	r0, [pc, #4]	; (403994 <__malloc_lock+0x8>)
  40398e:	f7ff bb63 	b.w	403058 <__retarget_lock_acquire_recursive>
  403992:	bf00      	nop
  403994:	20400b34 	.word	0x20400b34

00403998 <__malloc_unlock>:
  403998:	4801      	ldr	r0, [pc, #4]	; (4039a0 <__malloc_unlock+0x8>)
  40399a:	f7ff bb5f 	b.w	40305c <__retarget_lock_release_recursive>
  40399e:	bf00      	nop
  4039a0:	20400b34 	.word	0x20400b34

004039a4 <_realloc_r>:
  4039a4:	2900      	cmp	r1, #0
  4039a6:	f000 8095 	beq.w	403ad4 <_realloc_r+0x130>
  4039aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4039ae:	460d      	mov	r5, r1
  4039b0:	4616      	mov	r6, r2
  4039b2:	b083      	sub	sp, #12
  4039b4:	4680      	mov	r8, r0
  4039b6:	f106 070b 	add.w	r7, r6, #11
  4039ba:	f7ff ffe7 	bl	40398c <__malloc_lock>
  4039be:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4039c2:	2f16      	cmp	r7, #22
  4039c4:	f02e 0403 	bic.w	r4, lr, #3
  4039c8:	f1a5 0908 	sub.w	r9, r5, #8
  4039cc:	d83c      	bhi.n	403a48 <_realloc_r+0xa4>
  4039ce:	2210      	movs	r2, #16
  4039d0:	4617      	mov	r7, r2
  4039d2:	42be      	cmp	r6, r7
  4039d4:	d83d      	bhi.n	403a52 <_realloc_r+0xae>
  4039d6:	4294      	cmp	r4, r2
  4039d8:	da43      	bge.n	403a62 <_realloc_r+0xbe>
  4039da:	4bc4      	ldr	r3, [pc, #784]	; (403cec <_realloc_r+0x348>)
  4039dc:	6899      	ldr	r1, [r3, #8]
  4039de:	eb09 0004 	add.w	r0, r9, r4
  4039e2:	4288      	cmp	r0, r1
  4039e4:	f000 80b4 	beq.w	403b50 <_realloc_r+0x1ac>
  4039e8:	6843      	ldr	r3, [r0, #4]
  4039ea:	f023 0101 	bic.w	r1, r3, #1
  4039ee:	4401      	add	r1, r0
  4039f0:	6849      	ldr	r1, [r1, #4]
  4039f2:	07c9      	lsls	r1, r1, #31
  4039f4:	d54c      	bpl.n	403a90 <_realloc_r+0xec>
  4039f6:	f01e 0f01 	tst.w	lr, #1
  4039fa:	f000 809b 	beq.w	403b34 <_realloc_r+0x190>
  4039fe:	4631      	mov	r1, r6
  403a00:	4640      	mov	r0, r8
  403a02:	f7ff fbad 	bl	403160 <_malloc_r>
  403a06:	4606      	mov	r6, r0
  403a08:	2800      	cmp	r0, #0
  403a0a:	d03a      	beq.n	403a82 <_realloc_r+0xde>
  403a0c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403a10:	f023 0301 	bic.w	r3, r3, #1
  403a14:	444b      	add	r3, r9
  403a16:	f1a0 0208 	sub.w	r2, r0, #8
  403a1a:	429a      	cmp	r2, r3
  403a1c:	f000 8121 	beq.w	403c62 <_realloc_r+0x2be>
  403a20:	1f22      	subs	r2, r4, #4
  403a22:	2a24      	cmp	r2, #36	; 0x24
  403a24:	f200 8107 	bhi.w	403c36 <_realloc_r+0x292>
  403a28:	2a13      	cmp	r2, #19
  403a2a:	f200 80db 	bhi.w	403be4 <_realloc_r+0x240>
  403a2e:	4603      	mov	r3, r0
  403a30:	462a      	mov	r2, r5
  403a32:	6811      	ldr	r1, [r2, #0]
  403a34:	6019      	str	r1, [r3, #0]
  403a36:	6851      	ldr	r1, [r2, #4]
  403a38:	6059      	str	r1, [r3, #4]
  403a3a:	6892      	ldr	r2, [r2, #8]
  403a3c:	609a      	str	r2, [r3, #8]
  403a3e:	4629      	mov	r1, r5
  403a40:	4640      	mov	r0, r8
  403a42:	f7ff f86f 	bl	402b24 <_free_r>
  403a46:	e01c      	b.n	403a82 <_realloc_r+0xde>
  403a48:	f027 0707 	bic.w	r7, r7, #7
  403a4c:	2f00      	cmp	r7, #0
  403a4e:	463a      	mov	r2, r7
  403a50:	dabf      	bge.n	4039d2 <_realloc_r+0x2e>
  403a52:	2600      	movs	r6, #0
  403a54:	230c      	movs	r3, #12
  403a56:	4630      	mov	r0, r6
  403a58:	f8c8 3000 	str.w	r3, [r8]
  403a5c:	b003      	add	sp, #12
  403a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a62:	462e      	mov	r6, r5
  403a64:	1be3      	subs	r3, r4, r7
  403a66:	2b0f      	cmp	r3, #15
  403a68:	d81e      	bhi.n	403aa8 <_realloc_r+0x104>
  403a6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403a6e:	f003 0301 	and.w	r3, r3, #1
  403a72:	4323      	orrs	r3, r4
  403a74:	444c      	add	r4, r9
  403a76:	f8c9 3004 	str.w	r3, [r9, #4]
  403a7a:	6863      	ldr	r3, [r4, #4]
  403a7c:	f043 0301 	orr.w	r3, r3, #1
  403a80:	6063      	str	r3, [r4, #4]
  403a82:	4640      	mov	r0, r8
  403a84:	f7ff ff88 	bl	403998 <__malloc_unlock>
  403a88:	4630      	mov	r0, r6
  403a8a:	b003      	add	sp, #12
  403a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a90:	f023 0303 	bic.w	r3, r3, #3
  403a94:	18e1      	adds	r1, r4, r3
  403a96:	4291      	cmp	r1, r2
  403a98:	db1f      	blt.n	403ada <_realloc_r+0x136>
  403a9a:	68c3      	ldr	r3, [r0, #12]
  403a9c:	6882      	ldr	r2, [r0, #8]
  403a9e:	462e      	mov	r6, r5
  403aa0:	60d3      	str	r3, [r2, #12]
  403aa2:	460c      	mov	r4, r1
  403aa4:	609a      	str	r2, [r3, #8]
  403aa6:	e7dd      	b.n	403a64 <_realloc_r+0xc0>
  403aa8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403aac:	eb09 0107 	add.w	r1, r9, r7
  403ab0:	f002 0201 	and.w	r2, r2, #1
  403ab4:	444c      	add	r4, r9
  403ab6:	f043 0301 	orr.w	r3, r3, #1
  403aba:	4317      	orrs	r7, r2
  403abc:	f8c9 7004 	str.w	r7, [r9, #4]
  403ac0:	604b      	str	r3, [r1, #4]
  403ac2:	6863      	ldr	r3, [r4, #4]
  403ac4:	f043 0301 	orr.w	r3, r3, #1
  403ac8:	3108      	adds	r1, #8
  403aca:	6063      	str	r3, [r4, #4]
  403acc:	4640      	mov	r0, r8
  403ace:	f7ff f829 	bl	402b24 <_free_r>
  403ad2:	e7d6      	b.n	403a82 <_realloc_r+0xde>
  403ad4:	4611      	mov	r1, r2
  403ad6:	f7ff bb43 	b.w	403160 <_malloc_r>
  403ada:	f01e 0f01 	tst.w	lr, #1
  403ade:	d18e      	bne.n	4039fe <_realloc_r+0x5a>
  403ae0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403ae4:	eba9 0a01 	sub.w	sl, r9, r1
  403ae8:	f8da 1004 	ldr.w	r1, [sl, #4]
  403aec:	f021 0103 	bic.w	r1, r1, #3
  403af0:	440b      	add	r3, r1
  403af2:	4423      	add	r3, r4
  403af4:	4293      	cmp	r3, r2
  403af6:	db25      	blt.n	403b44 <_realloc_r+0x1a0>
  403af8:	68c2      	ldr	r2, [r0, #12]
  403afa:	6881      	ldr	r1, [r0, #8]
  403afc:	4656      	mov	r6, sl
  403afe:	60ca      	str	r2, [r1, #12]
  403b00:	6091      	str	r1, [r2, #8]
  403b02:	f8da 100c 	ldr.w	r1, [sl, #12]
  403b06:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403b0a:	1f22      	subs	r2, r4, #4
  403b0c:	2a24      	cmp	r2, #36	; 0x24
  403b0e:	60c1      	str	r1, [r0, #12]
  403b10:	6088      	str	r0, [r1, #8]
  403b12:	f200 8094 	bhi.w	403c3e <_realloc_r+0x29a>
  403b16:	2a13      	cmp	r2, #19
  403b18:	d96f      	bls.n	403bfa <_realloc_r+0x256>
  403b1a:	6829      	ldr	r1, [r5, #0]
  403b1c:	f8ca 1008 	str.w	r1, [sl, #8]
  403b20:	6869      	ldr	r1, [r5, #4]
  403b22:	f8ca 100c 	str.w	r1, [sl, #12]
  403b26:	2a1b      	cmp	r2, #27
  403b28:	f200 80a2 	bhi.w	403c70 <_realloc_r+0x2cc>
  403b2c:	3508      	adds	r5, #8
  403b2e:	f10a 0210 	add.w	r2, sl, #16
  403b32:	e063      	b.n	403bfc <_realloc_r+0x258>
  403b34:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403b38:	eba9 0a03 	sub.w	sl, r9, r3
  403b3c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403b40:	f021 0103 	bic.w	r1, r1, #3
  403b44:	1863      	adds	r3, r4, r1
  403b46:	4293      	cmp	r3, r2
  403b48:	f6ff af59 	blt.w	4039fe <_realloc_r+0x5a>
  403b4c:	4656      	mov	r6, sl
  403b4e:	e7d8      	b.n	403b02 <_realloc_r+0x15e>
  403b50:	6841      	ldr	r1, [r0, #4]
  403b52:	f021 0b03 	bic.w	fp, r1, #3
  403b56:	44a3      	add	fp, r4
  403b58:	f107 0010 	add.w	r0, r7, #16
  403b5c:	4583      	cmp	fp, r0
  403b5e:	da56      	bge.n	403c0e <_realloc_r+0x26a>
  403b60:	f01e 0f01 	tst.w	lr, #1
  403b64:	f47f af4b 	bne.w	4039fe <_realloc_r+0x5a>
  403b68:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403b6c:	eba9 0a01 	sub.w	sl, r9, r1
  403b70:	f8da 1004 	ldr.w	r1, [sl, #4]
  403b74:	f021 0103 	bic.w	r1, r1, #3
  403b78:	448b      	add	fp, r1
  403b7a:	4558      	cmp	r0, fp
  403b7c:	dce2      	bgt.n	403b44 <_realloc_r+0x1a0>
  403b7e:	4656      	mov	r6, sl
  403b80:	f8da 100c 	ldr.w	r1, [sl, #12]
  403b84:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403b88:	1f22      	subs	r2, r4, #4
  403b8a:	2a24      	cmp	r2, #36	; 0x24
  403b8c:	60c1      	str	r1, [r0, #12]
  403b8e:	6088      	str	r0, [r1, #8]
  403b90:	f200 808f 	bhi.w	403cb2 <_realloc_r+0x30e>
  403b94:	2a13      	cmp	r2, #19
  403b96:	f240 808a 	bls.w	403cae <_realloc_r+0x30a>
  403b9a:	6829      	ldr	r1, [r5, #0]
  403b9c:	f8ca 1008 	str.w	r1, [sl, #8]
  403ba0:	6869      	ldr	r1, [r5, #4]
  403ba2:	f8ca 100c 	str.w	r1, [sl, #12]
  403ba6:	2a1b      	cmp	r2, #27
  403ba8:	f200 808a 	bhi.w	403cc0 <_realloc_r+0x31c>
  403bac:	3508      	adds	r5, #8
  403bae:	f10a 0210 	add.w	r2, sl, #16
  403bb2:	6829      	ldr	r1, [r5, #0]
  403bb4:	6011      	str	r1, [r2, #0]
  403bb6:	6869      	ldr	r1, [r5, #4]
  403bb8:	6051      	str	r1, [r2, #4]
  403bba:	68a9      	ldr	r1, [r5, #8]
  403bbc:	6091      	str	r1, [r2, #8]
  403bbe:	eb0a 0107 	add.w	r1, sl, r7
  403bc2:	ebab 0207 	sub.w	r2, fp, r7
  403bc6:	f042 0201 	orr.w	r2, r2, #1
  403bca:	6099      	str	r1, [r3, #8]
  403bcc:	604a      	str	r2, [r1, #4]
  403bce:	f8da 3004 	ldr.w	r3, [sl, #4]
  403bd2:	f003 0301 	and.w	r3, r3, #1
  403bd6:	431f      	orrs	r7, r3
  403bd8:	4640      	mov	r0, r8
  403bda:	f8ca 7004 	str.w	r7, [sl, #4]
  403bde:	f7ff fedb 	bl	403998 <__malloc_unlock>
  403be2:	e751      	b.n	403a88 <_realloc_r+0xe4>
  403be4:	682b      	ldr	r3, [r5, #0]
  403be6:	6003      	str	r3, [r0, #0]
  403be8:	686b      	ldr	r3, [r5, #4]
  403bea:	6043      	str	r3, [r0, #4]
  403bec:	2a1b      	cmp	r2, #27
  403bee:	d82d      	bhi.n	403c4c <_realloc_r+0x2a8>
  403bf0:	f100 0308 	add.w	r3, r0, #8
  403bf4:	f105 0208 	add.w	r2, r5, #8
  403bf8:	e71b      	b.n	403a32 <_realloc_r+0x8e>
  403bfa:	4632      	mov	r2, r6
  403bfc:	6829      	ldr	r1, [r5, #0]
  403bfe:	6011      	str	r1, [r2, #0]
  403c00:	6869      	ldr	r1, [r5, #4]
  403c02:	6051      	str	r1, [r2, #4]
  403c04:	68a9      	ldr	r1, [r5, #8]
  403c06:	6091      	str	r1, [r2, #8]
  403c08:	461c      	mov	r4, r3
  403c0a:	46d1      	mov	r9, sl
  403c0c:	e72a      	b.n	403a64 <_realloc_r+0xc0>
  403c0e:	eb09 0107 	add.w	r1, r9, r7
  403c12:	ebab 0b07 	sub.w	fp, fp, r7
  403c16:	f04b 0201 	orr.w	r2, fp, #1
  403c1a:	6099      	str	r1, [r3, #8]
  403c1c:	604a      	str	r2, [r1, #4]
  403c1e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403c22:	f003 0301 	and.w	r3, r3, #1
  403c26:	431f      	orrs	r7, r3
  403c28:	4640      	mov	r0, r8
  403c2a:	f845 7c04 	str.w	r7, [r5, #-4]
  403c2e:	f7ff feb3 	bl	403998 <__malloc_unlock>
  403c32:	462e      	mov	r6, r5
  403c34:	e728      	b.n	403a88 <_realloc_r+0xe4>
  403c36:	4629      	mov	r1, r5
  403c38:	f7ff fe44 	bl	4038c4 <memmove>
  403c3c:	e6ff      	b.n	403a3e <_realloc_r+0x9a>
  403c3e:	4629      	mov	r1, r5
  403c40:	4630      	mov	r0, r6
  403c42:	461c      	mov	r4, r3
  403c44:	46d1      	mov	r9, sl
  403c46:	f7ff fe3d 	bl	4038c4 <memmove>
  403c4a:	e70b      	b.n	403a64 <_realloc_r+0xc0>
  403c4c:	68ab      	ldr	r3, [r5, #8]
  403c4e:	6083      	str	r3, [r0, #8]
  403c50:	68eb      	ldr	r3, [r5, #12]
  403c52:	60c3      	str	r3, [r0, #12]
  403c54:	2a24      	cmp	r2, #36	; 0x24
  403c56:	d017      	beq.n	403c88 <_realloc_r+0x2e4>
  403c58:	f100 0310 	add.w	r3, r0, #16
  403c5c:	f105 0210 	add.w	r2, r5, #16
  403c60:	e6e7      	b.n	403a32 <_realloc_r+0x8e>
  403c62:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403c66:	f023 0303 	bic.w	r3, r3, #3
  403c6a:	441c      	add	r4, r3
  403c6c:	462e      	mov	r6, r5
  403c6e:	e6f9      	b.n	403a64 <_realloc_r+0xc0>
  403c70:	68a9      	ldr	r1, [r5, #8]
  403c72:	f8ca 1010 	str.w	r1, [sl, #16]
  403c76:	68e9      	ldr	r1, [r5, #12]
  403c78:	f8ca 1014 	str.w	r1, [sl, #20]
  403c7c:	2a24      	cmp	r2, #36	; 0x24
  403c7e:	d00c      	beq.n	403c9a <_realloc_r+0x2f6>
  403c80:	3510      	adds	r5, #16
  403c82:	f10a 0218 	add.w	r2, sl, #24
  403c86:	e7b9      	b.n	403bfc <_realloc_r+0x258>
  403c88:	692b      	ldr	r3, [r5, #16]
  403c8a:	6103      	str	r3, [r0, #16]
  403c8c:	696b      	ldr	r3, [r5, #20]
  403c8e:	6143      	str	r3, [r0, #20]
  403c90:	f105 0218 	add.w	r2, r5, #24
  403c94:	f100 0318 	add.w	r3, r0, #24
  403c98:	e6cb      	b.n	403a32 <_realloc_r+0x8e>
  403c9a:	692a      	ldr	r2, [r5, #16]
  403c9c:	f8ca 2018 	str.w	r2, [sl, #24]
  403ca0:	696a      	ldr	r2, [r5, #20]
  403ca2:	f8ca 201c 	str.w	r2, [sl, #28]
  403ca6:	3518      	adds	r5, #24
  403ca8:	f10a 0220 	add.w	r2, sl, #32
  403cac:	e7a6      	b.n	403bfc <_realloc_r+0x258>
  403cae:	4632      	mov	r2, r6
  403cb0:	e77f      	b.n	403bb2 <_realloc_r+0x20e>
  403cb2:	4629      	mov	r1, r5
  403cb4:	4630      	mov	r0, r6
  403cb6:	9301      	str	r3, [sp, #4]
  403cb8:	f7ff fe04 	bl	4038c4 <memmove>
  403cbc:	9b01      	ldr	r3, [sp, #4]
  403cbe:	e77e      	b.n	403bbe <_realloc_r+0x21a>
  403cc0:	68a9      	ldr	r1, [r5, #8]
  403cc2:	f8ca 1010 	str.w	r1, [sl, #16]
  403cc6:	68e9      	ldr	r1, [r5, #12]
  403cc8:	f8ca 1014 	str.w	r1, [sl, #20]
  403ccc:	2a24      	cmp	r2, #36	; 0x24
  403cce:	d003      	beq.n	403cd8 <_realloc_r+0x334>
  403cd0:	3510      	adds	r5, #16
  403cd2:	f10a 0218 	add.w	r2, sl, #24
  403cd6:	e76c      	b.n	403bb2 <_realloc_r+0x20e>
  403cd8:	692a      	ldr	r2, [r5, #16]
  403cda:	f8ca 2018 	str.w	r2, [sl, #24]
  403cde:	696a      	ldr	r2, [r5, #20]
  403ce0:	f8ca 201c 	str.w	r2, [sl, #28]
  403ce4:	3518      	adds	r5, #24
  403ce6:	f10a 0220 	add.w	r2, sl, #32
  403cea:	e762      	b.n	403bb2 <_realloc_r+0x20e>
  403cec:	204005b0 	.word	0x204005b0

00403cf0 <_sbrk_r>:
  403cf0:	b538      	push	{r3, r4, r5, lr}
  403cf2:	4c07      	ldr	r4, [pc, #28]	; (403d10 <_sbrk_r+0x20>)
  403cf4:	2300      	movs	r3, #0
  403cf6:	4605      	mov	r5, r0
  403cf8:	4608      	mov	r0, r1
  403cfa:	6023      	str	r3, [r4, #0]
  403cfc:	f7fd fa92 	bl	401224 <_sbrk>
  403d00:	1c43      	adds	r3, r0, #1
  403d02:	d000      	beq.n	403d06 <_sbrk_r+0x16>
  403d04:	bd38      	pop	{r3, r4, r5, pc}
  403d06:	6823      	ldr	r3, [r4, #0]
  403d08:	2b00      	cmp	r3, #0
  403d0a:	d0fb      	beq.n	403d04 <_sbrk_r+0x14>
  403d0c:	602b      	str	r3, [r5, #0]
  403d0e:	bd38      	pop	{r3, r4, r5, pc}
  403d10:	20400b48 	.word	0x20400b48

00403d14 <__sread>:
  403d14:	b510      	push	{r4, lr}
  403d16:	460c      	mov	r4, r1
  403d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403d1c:	f000 fa76 	bl	40420c <_read_r>
  403d20:	2800      	cmp	r0, #0
  403d22:	db03      	blt.n	403d2c <__sread+0x18>
  403d24:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403d26:	4403      	add	r3, r0
  403d28:	6523      	str	r3, [r4, #80]	; 0x50
  403d2a:	bd10      	pop	{r4, pc}
  403d2c:	89a3      	ldrh	r3, [r4, #12]
  403d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403d32:	81a3      	strh	r3, [r4, #12]
  403d34:	bd10      	pop	{r4, pc}
  403d36:	bf00      	nop

00403d38 <__swrite>:
  403d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d3c:	4616      	mov	r6, r2
  403d3e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403d42:	461f      	mov	r7, r3
  403d44:	05d3      	lsls	r3, r2, #23
  403d46:	460c      	mov	r4, r1
  403d48:	4605      	mov	r5, r0
  403d4a:	d507      	bpl.n	403d5c <__swrite+0x24>
  403d4c:	2200      	movs	r2, #0
  403d4e:	2302      	movs	r3, #2
  403d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403d54:	f000 fa44 	bl	4041e0 <_lseek_r>
  403d58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403d60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403d64:	81a2      	strh	r2, [r4, #12]
  403d66:	463b      	mov	r3, r7
  403d68:	4632      	mov	r2, r6
  403d6a:	4628      	mov	r0, r5
  403d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403d70:	f000 b924 	b.w	403fbc <_write_r>

00403d74 <__sseek>:
  403d74:	b510      	push	{r4, lr}
  403d76:	460c      	mov	r4, r1
  403d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403d7c:	f000 fa30 	bl	4041e0 <_lseek_r>
  403d80:	89a3      	ldrh	r3, [r4, #12]
  403d82:	1c42      	adds	r2, r0, #1
  403d84:	bf0e      	itee	eq
  403d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403d8e:	6520      	strne	r0, [r4, #80]	; 0x50
  403d90:	81a3      	strh	r3, [r4, #12]
  403d92:	bd10      	pop	{r4, pc}

00403d94 <__sclose>:
  403d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403d98:	f000 b988 	b.w	4040ac <_close_r>
	...

00403dc0 <strlen>:
  403dc0:	f890 f000 	pld	[r0]
  403dc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403dc8:	f020 0107 	bic.w	r1, r0, #7
  403dcc:	f06f 0c00 	mvn.w	ip, #0
  403dd0:	f010 0407 	ands.w	r4, r0, #7
  403dd4:	f891 f020 	pld	[r1, #32]
  403dd8:	f040 8049 	bne.w	403e6e <strlen+0xae>
  403ddc:	f04f 0400 	mov.w	r4, #0
  403de0:	f06f 0007 	mvn.w	r0, #7
  403de4:	e9d1 2300 	ldrd	r2, r3, [r1]
  403de8:	f891 f040 	pld	[r1, #64]	; 0x40
  403dec:	f100 0008 	add.w	r0, r0, #8
  403df0:	fa82 f24c 	uadd8	r2, r2, ip
  403df4:	faa4 f28c 	sel	r2, r4, ip
  403df8:	fa83 f34c 	uadd8	r3, r3, ip
  403dfc:	faa2 f38c 	sel	r3, r2, ip
  403e00:	bb4b      	cbnz	r3, 403e56 <strlen+0x96>
  403e02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403e06:	fa82 f24c 	uadd8	r2, r2, ip
  403e0a:	f100 0008 	add.w	r0, r0, #8
  403e0e:	faa4 f28c 	sel	r2, r4, ip
  403e12:	fa83 f34c 	uadd8	r3, r3, ip
  403e16:	faa2 f38c 	sel	r3, r2, ip
  403e1a:	b9e3      	cbnz	r3, 403e56 <strlen+0x96>
  403e1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403e20:	fa82 f24c 	uadd8	r2, r2, ip
  403e24:	f100 0008 	add.w	r0, r0, #8
  403e28:	faa4 f28c 	sel	r2, r4, ip
  403e2c:	fa83 f34c 	uadd8	r3, r3, ip
  403e30:	faa2 f38c 	sel	r3, r2, ip
  403e34:	b97b      	cbnz	r3, 403e56 <strlen+0x96>
  403e36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403e3a:	f101 0120 	add.w	r1, r1, #32
  403e3e:	fa82 f24c 	uadd8	r2, r2, ip
  403e42:	f100 0008 	add.w	r0, r0, #8
  403e46:	faa4 f28c 	sel	r2, r4, ip
  403e4a:	fa83 f34c 	uadd8	r3, r3, ip
  403e4e:	faa2 f38c 	sel	r3, r2, ip
  403e52:	2b00      	cmp	r3, #0
  403e54:	d0c6      	beq.n	403de4 <strlen+0x24>
  403e56:	2a00      	cmp	r2, #0
  403e58:	bf04      	itt	eq
  403e5a:	3004      	addeq	r0, #4
  403e5c:	461a      	moveq	r2, r3
  403e5e:	ba12      	rev	r2, r2
  403e60:	fab2 f282 	clz	r2, r2
  403e64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403e68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403e6c:	4770      	bx	lr
  403e6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403e72:	f004 0503 	and.w	r5, r4, #3
  403e76:	f1c4 0000 	rsb	r0, r4, #0
  403e7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403e7e:	f014 0f04 	tst.w	r4, #4
  403e82:	f891 f040 	pld	[r1, #64]	; 0x40
  403e86:	fa0c f505 	lsl.w	r5, ip, r5
  403e8a:	ea62 0205 	orn	r2, r2, r5
  403e8e:	bf1c      	itt	ne
  403e90:	ea63 0305 	ornne	r3, r3, r5
  403e94:	4662      	movne	r2, ip
  403e96:	f04f 0400 	mov.w	r4, #0
  403e9a:	e7a9      	b.n	403df0 <strlen+0x30>

00403e9c <__swbuf_r>:
  403e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403e9e:	460d      	mov	r5, r1
  403ea0:	4614      	mov	r4, r2
  403ea2:	4606      	mov	r6, r0
  403ea4:	b110      	cbz	r0, 403eac <__swbuf_r+0x10>
  403ea6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403ea8:	2b00      	cmp	r3, #0
  403eaa:	d04b      	beq.n	403f44 <__swbuf_r+0xa8>
  403eac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403eb0:	69a3      	ldr	r3, [r4, #24]
  403eb2:	60a3      	str	r3, [r4, #8]
  403eb4:	b291      	uxth	r1, r2
  403eb6:	0708      	lsls	r0, r1, #28
  403eb8:	d539      	bpl.n	403f2e <__swbuf_r+0x92>
  403eba:	6923      	ldr	r3, [r4, #16]
  403ebc:	2b00      	cmp	r3, #0
  403ebe:	d036      	beq.n	403f2e <__swbuf_r+0x92>
  403ec0:	b2ed      	uxtb	r5, r5
  403ec2:	0489      	lsls	r1, r1, #18
  403ec4:	462f      	mov	r7, r5
  403ec6:	d515      	bpl.n	403ef4 <__swbuf_r+0x58>
  403ec8:	6822      	ldr	r2, [r4, #0]
  403eca:	6961      	ldr	r1, [r4, #20]
  403ecc:	1ad3      	subs	r3, r2, r3
  403ece:	428b      	cmp	r3, r1
  403ed0:	da1c      	bge.n	403f0c <__swbuf_r+0x70>
  403ed2:	3301      	adds	r3, #1
  403ed4:	68a1      	ldr	r1, [r4, #8]
  403ed6:	1c50      	adds	r0, r2, #1
  403ed8:	3901      	subs	r1, #1
  403eda:	60a1      	str	r1, [r4, #8]
  403edc:	6020      	str	r0, [r4, #0]
  403ede:	7015      	strb	r5, [r2, #0]
  403ee0:	6962      	ldr	r2, [r4, #20]
  403ee2:	429a      	cmp	r2, r3
  403ee4:	d01a      	beq.n	403f1c <__swbuf_r+0x80>
  403ee6:	89a3      	ldrh	r3, [r4, #12]
  403ee8:	07db      	lsls	r3, r3, #31
  403eea:	d501      	bpl.n	403ef0 <__swbuf_r+0x54>
  403eec:	2d0a      	cmp	r5, #10
  403eee:	d015      	beq.n	403f1c <__swbuf_r+0x80>
  403ef0:	4638      	mov	r0, r7
  403ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403ef4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403ef6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403efa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403efe:	81a2      	strh	r2, [r4, #12]
  403f00:	6822      	ldr	r2, [r4, #0]
  403f02:	6661      	str	r1, [r4, #100]	; 0x64
  403f04:	6961      	ldr	r1, [r4, #20]
  403f06:	1ad3      	subs	r3, r2, r3
  403f08:	428b      	cmp	r3, r1
  403f0a:	dbe2      	blt.n	403ed2 <__swbuf_r+0x36>
  403f0c:	4621      	mov	r1, r4
  403f0e:	4630      	mov	r0, r6
  403f10:	f7fe fc8a 	bl	402828 <_fflush_r>
  403f14:	b940      	cbnz	r0, 403f28 <__swbuf_r+0x8c>
  403f16:	6822      	ldr	r2, [r4, #0]
  403f18:	2301      	movs	r3, #1
  403f1a:	e7db      	b.n	403ed4 <__swbuf_r+0x38>
  403f1c:	4621      	mov	r1, r4
  403f1e:	4630      	mov	r0, r6
  403f20:	f7fe fc82 	bl	402828 <_fflush_r>
  403f24:	2800      	cmp	r0, #0
  403f26:	d0e3      	beq.n	403ef0 <__swbuf_r+0x54>
  403f28:	f04f 37ff 	mov.w	r7, #4294967295
  403f2c:	e7e0      	b.n	403ef0 <__swbuf_r+0x54>
  403f2e:	4621      	mov	r1, r4
  403f30:	4630      	mov	r0, r6
  403f32:	f7fe fb65 	bl	402600 <__swsetup_r>
  403f36:	2800      	cmp	r0, #0
  403f38:	d1f6      	bne.n	403f28 <__swbuf_r+0x8c>
  403f3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403f3e:	6923      	ldr	r3, [r4, #16]
  403f40:	b291      	uxth	r1, r2
  403f42:	e7bd      	b.n	403ec0 <__swbuf_r+0x24>
  403f44:	f7fe fcc8 	bl	4028d8 <__sinit>
  403f48:	e7b0      	b.n	403eac <__swbuf_r+0x10>
  403f4a:	bf00      	nop

00403f4c <_wcrtomb_r>:
  403f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f4e:	4606      	mov	r6, r0
  403f50:	b085      	sub	sp, #20
  403f52:	461f      	mov	r7, r3
  403f54:	b189      	cbz	r1, 403f7a <_wcrtomb_r+0x2e>
  403f56:	4c10      	ldr	r4, [pc, #64]	; (403f98 <_wcrtomb_r+0x4c>)
  403f58:	4d10      	ldr	r5, [pc, #64]	; (403f9c <_wcrtomb_r+0x50>)
  403f5a:	6824      	ldr	r4, [r4, #0]
  403f5c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  403f5e:	2c00      	cmp	r4, #0
  403f60:	bf08      	it	eq
  403f62:	462c      	moveq	r4, r5
  403f64:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403f68:	47a0      	blx	r4
  403f6a:	1c43      	adds	r3, r0, #1
  403f6c:	d103      	bne.n	403f76 <_wcrtomb_r+0x2a>
  403f6e:	2200      	movs	r2, #0
  403f70:	238a      	movs	r3, #138	; 0x8a
  403f72:	603a      	str	r2, [r7, #0]
  403f74:	6033      	str	r3, [r6, #0]
  403f76:	b005      	add	sp, #20
  403f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403f7a:	460c      	mov	r4, r1
  403f7c:	4906      	ldr	r1, [pc, #24]	; (403f98 <_wcrtomb_r+0x4c>)
  403f7e:	4a07      	ldr	r2, [pc, #28]	; (403f9c <_wcrtomb_r+0x50>)
  403f80:	6809      	ldr	r1, [r1, #0]
  403f82:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403f84:	2900      	cmp	r1, #0
  403f86:	bf08      	it	eq
  403f88:	4611      	moveq	r1, r2
  403f8a:	4622      	mov	r2, r4
  403f8c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403f90:	a901      	add	r1, sp, #4
  403f92:	47a0      	blx	r4
  403f94:	e7e9      	b.n	403f6a <_wcrtomb_r+0x1e>
  403f96:	bf00      	nop
  403f98:	20400010 	.word	0x20400010
  403f9c:	20400444 	.word	0x20400444

00403fa0 <__ascii_wctomb>:
  403fa0:	b121      	cbz	r1, 403fac <__ascii_wctomb+0xc>
  403fa2:	2aff      	cmp	r2, #255	; 0xff
  403fa4:	d804      	bhi.n	403fb0 <__ascii_wctomb+0x10>
  403fa6:	700a      	strb	r2, [r1, #0]
  403fa8:	2001      	movs	r0, #1
  403faa:	4770      	bx	lr
  403fac:	4608      	mov	r0, r1
  403fae:	4770      	bx	lr
  403fb0:	238a      	movs	r3, #138	; 0x8a
  403fb2:	6003      	str	r3, [r0, #0]
  403fb4:	f04f 30ff 	mov.w	r0, #4294967295
  403fb8:	4770      	bx	lr
  403fba:	bf00      	nop

00403fbc <_write_r>:
  403fbc:	b570      	push	{r4, r5, r6, lr}
  403fbe:	460d      	mov	r5, r1
  403fc0:	4c08      	ldr	r4, [pc, #32]	; (403fe4 <_write_r+0x28>)
  403fc2:	4611      	mov	r1, r2
  403fc4:	4606      	mov	r6, r0
  403fc6:	461a      	mov	r2, r3
  403fc8:	4628      	mov	r0, r5
  403fca:	2300      	movs	r3, #0
  403fcc:	6023      	str	r3, [r4, #0]
  403fce:	f7fc f959 	bl	400284 <_write>
  403fd2:	1c43      	adds	r3, r0, #1
  403fd4:	d000      	beq.n	403fd8 <_write_r+0x1c>
  403fd6:	bd70      	pop	{r4, r5, r6, pc}
  403fd8:	6823      	ldr	r3, [r4, #0]
  403fda:	2b00      	cmp	r3, #0
  403fdc:	d0fb      	beq.n	403fd6 <_write_r+0x1a>
  403fde:	6033      	str	r3, [r6, #0]
  403fe0:	bd70      	pop	{r4, r5, r6, pc}
  403fe2:	bf00      	nop
  403fe4:	20400b48 	.word	0x20400b48

00403fe8 <__register_exitproc>:
  403fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403fec:	4d2c      	ldr	r5, [pc, #176]	; (4040a0 <__register_exitproc+0xb8>)
  403fee:	4606      	mov	r6, r0
  403ff0:	6828      	ldr	r0, [r5, #0]
  403ff2:	4698      	mov	r8, r3
  403ff4:	460f      	mov	r7, r1
  403ff6:	4691      	mov	r9, r2
  403ff8:	f7ff f82e 	bl	403058 <__retarget_lock_acquire_recursive>
  403ffc:	4b29      	ldr	r3, [pc, #164]	; (4040a4 <__register_exitproc+0xbc>)
  403ffe:	681c      	ldr	r4, [r3, #0]
  404000:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404004:	2b00      	cmp	r3, #0
  404006:	d03e      	beq.n	404086 <__register_exitproc+0x9e>
  404008:	685a      	ldr	r2, [r3, #4]
  40400a:	2a1f      	cmp	r2, #31
  40400c:	dc1c      	bgt.n	404048 <__register_exitproc+0x60>
  40400e:	f102 0e01 	add.w	lr, r2, #1
  404012:	b176      	cbz	r6, 404032 <__register_exitproc+0x4a>
  404014:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404018:	2401      	movs	r4, #1
  40401a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40401e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  404022:	4094      	lsls	r4, r2
  404024:	4320      	orrs	r0, r4
  404026:	2e02      	cmp	r6, #2
  404028:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40402c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  404030:	d023      	beq.n	40407a <__register_exitproc+0x92>
  404032:	3202      	adds	r2, #2
  404034:	f8c3 e004 	str.w	lr, [r3, #4]
  404038:	6828      	ldr	r0, [r5, #0]
  40403a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40403e:	f7ff f80d 	bl	40305c <__retarget_lock_release_recursive>
  404042:	2000      	movs	r0, #0
  404044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404048:	4b17      	ldr	r3, [pc, #92]	; (4040a8 <__register_exitproc+0xc0>)
  40404a:	b30b      	cbz	r3, 404090 <__register_exitproc+0xa8>
  40404c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404050:	f7ff f87e 	bl	403150 <malloc>
  404054:	4603      	mov	r3, r0
  404056:	b1d8      	cbz	r0, 404090 <__register_exitproc+0xa8>
  404058:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40405c:	6002      	str	r2, [r0, #0]
  40405e:	2100      	movs	r1, #0
  404060:	6041      	str	r1, [r0, #4]
  404062:	460a      	mov	r2, r1
  404064:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404068:	f04f 0e01 	mov.w	lr, #1
  40406c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404070:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404074:	2e00      	cmp	r6, #0
  404076:	d0dc      	beq.n	404032 <__register_exitproc+0x4a>
  404078:	e7cc      	b.n	404014 <__register_exitproc+0x2c>
  40407a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40407e:	430c      	orrs	r4, r1
  404080:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404084:	e7d5      	b.n	404032 <__register_exitproc+0x4a>
  404086:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40408a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40408e:	e7bb      	b.n	404008 <__register_exitproc+0x20>
  404090:	6828      	ldr	r0, [r5, #0]
  404092:	f7fe ffe3 	bl	40305c <__retarget_lock_release_recursive>
  404096:	f04f 30ff 	mov.w	r0, #4294967295
  40409a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40409e:	bf00      	nop
  4040a0:	20400440 	.word	0x20400440
  4040a4:	0040454c 	.word	0x0040454c
  4040a8:	00403151 	.word	0x00403151

004040ac <_close_r>:
  4040ac:	b538      	push	{r3, r4, r5, lr}
  4040ae:	4c07      	ldr	r4, [pc, #28]	; (4040cc <_close_r+0x20>)
  4040b0:	2300      	movs	r3, #0
  4040b2:	4605      	mov	r5, r0
  4040b4:	4608      	mov	r0, r1
  4040b6:	6023      	str	r3, [r4, #0]
  4040b8:	f7fd f8d0 	bl	40125c <_close>
  4040bc:	1c43      	adds	r3, r0, #1
  4040be:	d000      	beq.n	4040c2 <_close_r+0x16>
  4040c0:	bd38      	pop	{r3, r4, r5, pc}
  4040c2:	6823      	ldr	r3, [r4, #0]
  4040c4:	2b00      	cmp	r3, #0
  4040c6:	d0fb      	beq.n	4040c0 <_close_r+0x14>
  4040c8:	602b      	str	r3, [r5, #0]
  4040ca:	bd38      	pop	{r3, r4, r5, pc}
  4040cc:	20400b48 	.word	0x20400b48

004040d0 <_fclose_r>:
  4040d0:	b570      	push	{r4, r5, r6, lr}
  4040d2:	b159      	cbz	r1, 4040ec <_fclose_r+0x1c>
  4040d4:	4605      	mov	r5, r0
  4040d6:	460c      	mov	r4, r1
  4040d8:	b110      	cbz	r0, 4040e0 <_fclose_r+0x10>
  4040da:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4040dc:	2b00      	cmp	r3, #0
  4040de:	d03c      	beq.n	40415a <_fclose_r+0x8a>
  4040e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4040e2:	07d8      	lsls	r0, r3, #31
  4040e4:	d505      	bpl.n	4040f2 <_fclose_r+0x22>
  4040e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4040ea:	b92b      	cbnz	r3, 4040f8 <_fclose_r+0x28>
  4040ec:	2600      	movs	r6, #0
  4040ee:	4630      	mov	r0, r6
  4040f0:	bd70      	pop	{r4, r5, r6, pc}
  4040f2:	89a3      	ldrh	r3, [r4, #12]
  4040f4:	0599      	lsls	r1, r3, #22
  4040f6:	d53c      	bpl.n	404172 <_fclose_r+0xa2>
  4040f8:	4621      	mov	r1, r4
  4040fa:	4628      	mov	r0, r5
  4040fc:	f7fe faf4 	bl	4026e8 <__sflush_r>
  404100:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404102:	4606      	mov	r6, r0
  404104:	b133      	cbz	r3, 404114 <_fclose_r+0x44>
  404106:	69e1      	ldr	r1, [r4, #28]
  404108:	4628      	mov	r0, r5
  40410a:	4798      	blx	r3
  40410c:	2800      	cmp	r0, #0
  40410e:	bfb8      	it	lt
  404110:	f04f 36ff 	movlt.w	r6, #4294967295
  404114:	89a3      	ldrh	r3, [r4, #12]
  404116:	061a      	lsls	r2, r3, #24
  404118:	d422      	bmi.n	404160 <_fclose_r+0x90>
  40411a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40411c:	b141      	cbz	r1, 404130 <_fclose_r+0x60>
  40411e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404122:	4299      	cmp	r1, r3
  404124:	d002      	beq.n	40412c <_fclose_r+0x5c>
  404126:	4628      	mov	r0, r5
  404128:	f7fe fcfc 	bl	402b24 <_free_r>
  40412c:	2300      	movs	r3, #0
  40412e:	6323      	str	r3, [r4, #48]	; 0x30
  404130:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404132:	b121      	cbz	r1, 40413e <_fclose_r+0x6e>
  404134:	4628      	mov	r0, r5
  404136:	f7fe fcf5 	bl	402b24 <_free_r>
  40413a:	2300      	movs	r3, #0
  40413c:	6463      	str	r3, [r4, #68]	; 0x44
  40413e:	f7fe fbf7 	bl	402930 <__sfp_lock_acquire>
  404142:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404144:	2200      	movs	r2, #0
  404146:	07db      	lsls	r3, r3, #31
  404148:	81a2      	strh	r2, [r4, #12]
  40414a:	d50e      	bpl.n	40416a <_fclose_r+0x9a>
  40414c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40414e:	f7fe ff81 	bl	403054 <__retarget_lock_close_recursive>
  404152:	f7fe fbf3 	bl	40293c <__sfp_lock_release>
  404156:	4630      	mov	r0, r6
  404158:	bd70      	pop	{r4, r5, r6, pc}
  40415a:	f7fe fbbd 	bl	4028d8 <__sinit>
  40415e:	e7bf      	b.n	4040e0 <_fclose_r+0x10>
  404160:	6921      	ldr	r1, [r4, #16]
  404162:	4628      	mov	r0, r5
  404164:	f7fe fcde 	bl	402b24 <_free_r>
  404168:	e7d7      	b.n	40411a <_fclose_r+0x4a>
  40416a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40416c:	f7fe ff76 	bl	40305c <__retarget_lock_release_recursive>
  404170:	e7ec      	b.n	40414c <_fclose_r+0x7c>
  404172:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404174:	f7fe ff70 	bl	403058 <__retarget_lock_acquire_recursive>
  404178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40417c:	2b00      	cmp	r3, #0
  40417e:	d1bb      	bne.n	4040f8 <_fclose_r+0x28>
  404180:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404182:	f016 0601 	ands.w	r6, r6, #1
  404186:	d1b1      	bne.n	4040ec <_fclose_r+0x1c>
  404188:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40418a:	f7fe ff67 	bl	40305c <__retarget_lock_release_recursive>
  40418e:	4630      	mov	r0, r6
  404190:	bd70      	pop	{r4, r5, r6, pc}
  404192:	bf00      	nop

00404194 <_fstat_r>:
  404194:	b538      	push	{r3, r4, r5, lr}
  404196:	460b      	mov	r3, r1
  404198:	4c07      	ldr	r4, [pc, #28]	; (4041b8 <_fstat_r+0x24>)
  40419a:	4605      	mov	r5, r0
  40419c:	4611      	mov	r1, r2
  40419e:	4618      	mov	r0, r3
  4041a0:	2300      	movs	r3, #0
  4041a2:	6023      	str	r3, [r4, #0]
  4041a4:	f7fd f85d 	bl	401262 <_fstat>
  4041a8:	1c43      	adds	r3, r0, #1
  4041aa:	d000      	beq.n	4041ae <_fstat_r+0x1a>
  4041ac:	bd38      	pop	{r3, r4, r5, pc}
  4041ae:	6823      	ldr	r3, [r4, #0]
  4041b0:	2b00      	cmp	r3, #0
  4041b2:	d0fb      	beq.n	4041ac <_fstat_r+0x18>
  4041b4:	602b      	str	r3, [r5, #0]
  4041b6:	bd38      	pop	{r3, r4, r5, pc}
  4041b8:	20400b48 	.word	0x20400b48

004041bc <_isatty_r>:
  4041bc:	b538      	push	{r3, r4, r5, lr}
  4041be:	4c07      	ldr	r4, [pc, #28]	; (4041dc <_isatty_r+0x20>)
  4041c0:	2300      	movs	r3, #0
  4041c2:	4605      	mov	r5, r0
  4041c4:	4608      	mov	r0, r1
  4041c6:	6023      	str	r3, [r4, #0]
  4041c8:	f7fd f850 	bl	40126c <_isatty>
  4041cc:	1c43      	adds	r3, r0, #1
  4041ce:	d000      	beq.n	4041d2 <_isatty_r+0x16>
  4041d0:	bd38      	pop	{r3, r4, r5, pc}
  4041d2:	6823      	ldr	r3, [r4, #0]
  4041d4:	2b00      	cmp	r3, #0
  4041d6:	d0fb      	beq.n	4041d0 <_isatty_r+0x14>
  4041d8:	602b      	str	r3, [r5, #0]
  4041da:	bd38      	pop	{r3, r4, r5, pc}
  4041dc:	20400b48 	.word	0x20400b48

004041e0 <_lseek_r>:
  4041e0:	b570      	push	{r4, r5, r6, lr}
  4041e2:	460d      	mov	r5, r1
  4041e4:	4c08      	ldr	r4, [pc, #32]	; (404208 <_lseek_r+0x28>)
  4041e6:	4611      	mov	r1, r2
  4041e8:	4606      	mov	r6, r0
  4041ea:	461a      	mov	r2, r3
  4041ec:	4628      	mov	r0, r5
  4041ee:	2300      	movs	r3, #0
  4041f0:	6023      	str	r3, [r4, #0]
  4041f2:	f7fd f83d 	bl	401270 <_lseek>
  4041f6:	1c43      	adds	r3, r0, #1
  4041f8:	d000      	beq.n	4041fc <_lseek_r+0x1c>
  4041fa:	bd70      	pop	{r4, r5, r6, pc}
  4041fc:	6823      	ldr	r3, [r4, #0]
  4041fe:	2b00      	cmp	r3, #0
  404200:	d0fb      	beq.n	4041fa <_lseek_r+0x1a>
  404202:	6033      	str	r3, [r6, #0]
  404204:	bd70      	pop	{r4, r5, r6, pc}
  404206:	bf00      	nop
  404208:	20400b48 	.word	0x20400b48

0040420c <_read_r>:
  40420c:	b570      	push	{r4, r5, r6, lr}
  40420e:	460d      	mov	r5, r1
  404210:	4c08      	ldr	r4, [pc, #32]	; (404234 <_read_r+0x28>)
  404212:	4611      	mov	r1, r2
  404214:	4606      	mov	r6, r0
  404216:	461a      	mov	r2, r3
  404218:	4628      	mov	r0, r5
  40421a:	2300      	movs	r3, #0
  40421c:	6023      	str	r3, [r4, #0]
  40421e:	f7fc f813 	bl	400248 <_read>
  404222:	1c43      	adds	r3, r0, #1
  404224:	d000      	beq.n	404228 <_read_r+0x1c>
  404226:	bd70      	pop	{r4, r5, r6, pc}
  404228:	6823      	ldr	r3, [r4, #0]
  40422a:	2b00      	cmp	r3, #0
  40422c:	d0fb      	beq.n	404226 <_read_r+0x1a>
  40422e:	6033      	str	r3, [r6, #0]
  404230:	bd70      	pop	{r4, r5, r6, pc}
  404232:	bf00      	nop
  404234:	20400b48 	.word	0x20400b48

00404238 <__aeabi_uldivmod>:
  404238:	b953      	cbnz	r3, 404250 <__aeabi_uldivmod+0x18>
  40423a:	b94a      	cbnz	r2, 404250 <__aeabi_uldivmod+0x18>
  40423c:	2900      	cmp	r1, #0
  40423e:	bf08      	it	eq
  404240:	2800      	cmpeq	r0, #0
  404242:	bf1c      	itt	ne
  404244:	f04f 31ff 	movne.w	r1, #4294967295
  404248:	f04f 30ff 	movne.w	r0, #4294967295
  40424c:	f000 b97a 	b.w	404544 <__aeabi_idiv0>
  404250:	f1ad 0c08 	sub.w	ip, sp, #8
  404254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404258:	f000 f806 	bl	404268 <__udivmoddi4>
  40425c:	f8dd e004 	ldr.w	lr, [sp, #4]
  404260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404264:	b004      	add	sp, #16
  404266:	4770      	bx	lr

00404268 <__udivmoddi4>:
  404268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40426c:	468c      	mov	ip, r1
  40426e:	460d      	mov	r5, r1
  404270:	4604      	mov	r4, r0
  404272:	9e08      	ldr	r6, [sp, #32]
  404274:	2b00      	cmp	r3, #0
  404276:	d151      	bne.n	40431c <__udivmoddi4+0xb4>
  404278:	428a      	cmp	r2, r1
  40427a:	4617      	mov	r7, r2
  40427c:	d96d      	bls.n	40435a <__udivmoddi4+0xf2>
  40427e:	fab2 fe82 	clz	lr, r2
  404282:	f1be 0f00 	cmp.w	lr, #0
  404286:	d00b      	beq.n	4042a0 <__udivmoddi4+0x38>
  404288:	f1ce 0c20 	rsb	ip, lr, #32
  40428c:	fa01 f50e 	lsl.w	r5, r1, lr
  404290:	fa20 fc0c 	lsr.w	ip, r0, ip
  404294:	fa02 f70e 	lsl.w	r7, r2, lr
  404298:	ea4c 0c05 	orr.w	ip, ip, r5
  40429c:	fa00 f40e 	lsl.w	r4, r0, lr
  4042a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4042a4:	0c25      	lsrs	r5, r4, #16
  4042a6:	fbbc f8fa 	udiv	r8, ip, sl
  4042aa:	fa1f f987 	uxth.w	r9, r7
  4042ae:	fb0a cc18 	mls	ip, sl, r8, ip
  4042b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4042b6:	fb08 f309 	mul.w	r3, r8, r9
  4042ba:	42ab      	cmp	r3, r5
  4042bc:	d90a      	bls.n	4042d4 <__udivmoddi4+0x6c>
  4042be:	19ed      	adds	r5, r5, r7
  4042c0:	f108 32ff 	add.w	r2, r8, #4294967295
  4042c4:	f080 8123 	bcs.w	40450e <__udivmoddi4+0x2a6>
  4042c8:	42ab      	cmp	r3, r5
  4042ca:	f240 8120 	bls.w	40450e <__udivmoddi4+0x2a6>
  4042ce:	f1a8 0802 	sub.w	r8, r8, #2
  4042d2:	443d      	add	r5, r7
  4042d4:	1aed      	subs	r5, r5, r3
  4042d6:	b2a4      	uxth	r4, r4
  4042d8:	fbb5 f0fa 	udiv	r0, r5, sl
  4042dc:	fb0a 5510 	mls	r5, sl, r0, r5
  4042e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4042e4:	fb00 f909 	mul.w	r9, r0, r9
  4042e8:	45a1      	cmp	r9, r4
  4042ea:	d909      	bls.n	404300 <__udivmoddi4+0x98>
  4042ec:	19e4      	adds	r4, r4, r7
  4042ee:	f100 33ff 	add.w	r3, r0, #4294967295
  4042f2:	f080 810a 	bcs.w	40450a <__udivmoddi4+0x2a2>
  4042f6:	45a1      	cmp	r9, r4
  4042f8:	f240 8107 	bls.w	40450a <__udivmoddi4+0x2a2>
  4042fc:	3802      	subs	r0, #2
  4042fe:	443c      	add	r4, r7
  404300:	eba4 0409 	sub.w	r4, r4, r9
  404304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404308:	2100      	movs	r1, #0
  40430a:	2e00      	cmp	r6, #0
  40430c:	d061      	beq.n	4043d2 <__udivmoddi4+0x16a>
  40430e:	fa24 f40e 	lsr.w	r4, r4, lr
  404312:	2300      	movs	r3, #0
  404314:	6034      	str	r4, [r6, #0]
  404316:	6073      	str	r3, [r6, #4]
  404318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40431c:	428b      	cmp	r3, r1
  40431e:	d907      	bls.n	404330 <__udivmoddi4+0xc8>
  404320:	2e00      	cmp	r6, #0
  404322:	d054      	beq.n	4043ce <__udivmoddi4+0x166>
  404324:	2100      	movs	r1, #0
  404326:	e886 0021 	stmia.w	r6, {r0, r5}
  40432a:	4608      	mov	r0, r1
  40432c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404330:	fab3 f183 	clz	r1, r3
  404334:	2900      	cmp	r1, #0
  404336:	f040 808e 	bne.w	404456 <__udivmoddi4+0x1ee>
  40433a:	42ab      	cmp	r3, r5
  40433c:	d302      	bcc.n	404344 <__udivmoddi4+0xdc>
  40433e:	4282      	cmp	r2, r0
  404340:	f200 80fa 	bhi.w	404538 <__udivmoddi4+0x2d0>
  404344:	1a84      	subs	r4, r0, r2
  404346:	eb65 0503 	sbc.w	r5, r5, r3
  40434a:	2001      	movs	r0, #1
  40434c:	46ac      	mov	ip, r5
  40434e:	2e00      	cmp	r6, #0
  404350:	d03f      	beq.n	4043d2 <__udivmoddi4+0x16a>
  404352:	e886 1010 	stmia.w	r6, {r4, ip}
  404356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40435a:	b912      	cbnz	r2, 404362 <__udivmoddi4+0xfa>
  40435c:	2701      	movs	r7, #1
  40435e:	fbb7 f7f2 	udiv	r7, r7, r2
  404362:	fab7 fe87 	clz	lr, r7
  404366:	f1be 0f00 	cmp.w	lr, #0
  40436a:	d134      	bne.n	4043d6 <__udivmoddi4+0x16e>
  40436c:	1beb      	subs	r3, r5, r7
  40436e:	0c3a      	lsrs	r2, r7, #16
  404370:	fa1f fc87 	uxth.w	ip, r7
  404374:	2101      	movs	r1, #1
  404376:	fbb3 f8f2 	udiv	r8, r3, r2
  40437a:	0c25      	lsrs	r5, r4, #16
  40437c:	fb02 3318 	mls	r3, r2, r8, r3
  404380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404384:	fb0c f308 	mul.w	r3, ip, r8
  404388:	42ab      	cmp	r3, r5
  40438a:	d907      	bls.n	40439c <__udivmoddi4+0x134>
  40438c:	19ed      	adds	r5, r5, r7
  40438e:	f108 30ff 	add.w	r0, r8, #4294967295
  404392:	d202      	bcs.n	40439a <__udivmoddi4+0x132>
  404394:	42ab      	cmp	r3, r5
  404396:	f200 80d1 	bhi.w	40453c <__udivmoddi4+0x2d4>
  40439a:	4680      	mov	r8, r0
  40439c:	1aed      	subs	r5, r5, r3
  40439e:	b2a3      	uxth	r3, r4
  4043a0:	fbb5 f0f2 	udiv	r0, r5, r2
  4043a4:	fb02 5510 	mls	r5, r2, r0, r5
  4043a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4043ac:	fb0c fc00 	mul.w	ip, ip, r0
  4043b0:	45a4      	cmp	ip, r4
  4043b2:	d907      	bls.n	4043c4 <__udivmoddi4+0x15c>
  4043b4:	19e4      	adds	r4, r4, r7
  4043b6:	f100 33ff 	add.w	r3, r0, #4294967295
  4043ba:	d202      	bcs.n	4043c2 <__udivmoddi4+0x15a>
  4043bc:	45a4      	cmp	ip, r4
  4043be:	f200 80b8 	bhi.w	404532 <__udivmoddi4+0x2ca>
  4043c2:	4618      	mov	r0, r3
  4043c4:	eba4 040c 	sub.w	r4, r4, ip
  4043c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4043cc:	e79d      	b.n	40430a <__udivmoddi4+0xa2>
  4043ce:	4631      	mov	r1, r6
  4043d0:	4630      	mov	r0, r6
  4043d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4043d6:	f1ce 0420 	rsb	r4, lr, #32
  4043da:	fa05 f30e 	lsl.w	r3, r5, lr
  4043de:	fa07 f70e 	lsl.w	r7, r7, lr
  4043e2:	fa20 f804 	lsr.w	r8, r0, r4
  4043e6:	0c3a      	lsrs	r2, r7, #16
  4043e8:	fa25 f404 	lsr.w	r4, r5, r4
  4043ec:	ea48 0803 	orr.w	r8, r8, r3
  4043f0:	fbb4 f1f2 	udiv	r1, r4, r2
  4043f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4043f8:	fb02 4411 	mls	r4, r2, r1, r4
  4043fc:	fa1f fc87 	uxth.w	ip, r7
  404400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404404:	fb01 f30c 	mul.w	r3, r1, ip
  404408:	42ab      	cmp	r3, r5
  40440a:	fa00 f40e 	lsl.w	r4, r0, lr
  40440e:	d909      	bls.n	404424 <__udivmoddi4+0x1bc>
  404410:	19ed      	adds	r5, r5, r7
  404412:	f101 30ff 	add.w	r0, r1, #4294967295
  404416:	f080 808a 	bcs.w	40452e <__udivmoddi4+0x2c6>
  40441a:	42ab      	cmp	r3, r5
  40441c:	f240 8087 	bls.w	40452e <__udivmoddi4+0x2c6>
  404420:	3902      	subs	r1, #2
  404422:	443d      	add	r5, r7
  404424:	1aeb      	subs	r3, r5, r3
  404426:	fa1f f588 	uxth.w	r5, r8
  40442a:	fbb3 f0f2 	udiv	r0, r3, r2
  40442e:	fb02 3310 	mls	r3, r2, r0, r3
  404432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404436:	fb00 f30c 	mul.w	r3, r0, ip
  40443a:	42ab      	cmp	r3, r5
  40443c:	d907      	bls.n	40444e <__udivmoddi4+0x1e6>
  40443e:	19ed      	adds	r5, r5, r7
  404440:	f100 38ff 	add.w	r8, r0, #4294967295
  404444:	d26f      	bcs.n	404526 <__udivmoddi4+0x2be>
  404446:	42ab      	cmp	r3, r5
  404448:	d96d      	bls.n	404526 <__udivmoddi4+0x2be>
  40444a:	3802      	subs	r0, #2
  40444c:	443d      	add	r5, r7
  40444e:	1aeb      	subs	r3, r5, r3
  404450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404454:	e78f      	b.n	404376 <__udivmoddi4+0x10e>
  404456:	f1c1 0720 	rsb	r7, r1, #32
  40445a:	fa22 f807 	lsr.w	r8, r2, r7
  40445e:	408b      	lsls	r3, r1
  404460:	fa05 f401 	lsl.w	r4, r5, r1
  404464:	ea48 0303 	orr.w	r3, r8, r3
  404468:	fa20 fe07 	lsr.w	lr, r0, r7
  40446c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404470:	40fd      	lsrs	r5, r7
  404472:	ea4e 0e04 	orr.w	lr, lr, r4
  404476:	fbb5 f9fc 	udiv	r9, r5, ip
  40447a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40447e:	fb0c 5519 	mls	r5, ip, r9, r5
  404482:	fa1f f883 	uxth.w	r8, r3
  404486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40448a:	fb09 f408 	mul.w	r4, r9, r8
  40448e:	42ac      	cmp	r4, r5
  404490:	fa02 f201 	lsl.w	r2, r2, r1
  404494:	fa00 fa01 	lsl.w	sl, r0, r1
  404498:	d908      	bls.n	4044ac <__udivmoddi4+0x244>
  40449a:	18ed      	adds	r5, r5, r3
  40449c:	f109 30ff 	add.w	r0, r9, #4294967295
  4044a0:	d243      	bcs.n	40452a <__udivmoddi4+0x2c2>
  4044a2:	42ac      	cmp	r4, r5
  4044a4:	d941      	bls.n	40452a <__udivmoddi4+0x2c2>
  4044a6:	f1a9 0902 	sub.w	r9, r9, #2
  4044aa:	441d      	add	r5, r3
  4044ac:	1b2d      	subs	r5, r5, r4
  4044ae:	fa1f fe8e 	uxth.w	lr, lr
  4044b2:	fbb5 f0fc 	udiv	r0, r5, ip
  4044b6:	fb0c 5510 	mls	r5, ip, r0, r5
  4044ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4044be:	fb00 f808 	mul.w	r8, r0, r8
  4044c2:	45a0      	cmp	r8, r4
  4044c4:	d907      	bls.n	4044d6 <__udivmoddi4+0x26e>
  4044c6:	18e4      	adds	r4, r4, r3
  4044c8:	f100 35ff 	add.w	r5, r0, #4294967295
  4044cc:	d229      	bcs.n	404522 <__udivmoddi4+0x2ba>
  4044ce:	45a0      	cmp	r8, r4
  4044d0:	d927      	bls.n	404522 <__udivmoddi4+0x2ba>
  4044d2:	3802      	subs	r0, #2
  4044d4:	441c      	add	r4, r3
  4044d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4044da:	eba4 0408 	sub.w	r4, r4, r8
  4044de:	fba0 8902 	umull	r8, r9, r0, r2
  4044e2:	454c      	cmp	r4, r9
  4044e4:	46c6      	mov	lr, r8
  4044e6:	464d      	mov	r5, r9
  4044e8:	d315      	bcc.n	404516 <__udivmoddi4+0x2ae>
  4044ea:	d012      	beq.n	404512 <__udivmoddi4+0x2aa>
  4044ec:	b156      	cbz	r6, 404504 <__udivmoddi4+0x29c>
  4044ee:	ebba 030e 	subs.w	r3, sl, lr
  4044f2:	eb64 0405 	sbc.w	r4, r4, r5
  4044f6:	fa04 f707 	lsl.w	r7, r4, r7
  4044fa:	40cb      	lsrs	r3, r1
  4044fc:	431f      	orrs	r7, r3
  4044fe:	40cc      	lsrs	r4, r1
  404500:	6037      	str	r7, [r6, #0]
  404502:	6074      	str	r4, [r6, #4]
  404504:	2100      	movs	r1, #0
  404506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40450a:	4618      	mov	r0, r3
  40450c:	e6f8      	b.n	404300 <__udivmoddi4+0x98>
  40450e:	4690      	mov	r8, r2
  404510:	e6e0      	b.n	4042d4 <__udivmoddi4+0x6c>
  404512:	45c2      	cmp	sl, r8
  404514:	d2ea      	bcs.n	4044ec <__udivmoddi4+0x284>
  404516:	ebb8 0e02 	subs.w	lr, r8, r2
  40451a:	eb69 0503 	sbc.w	r5, r9, r3
  40451e:	3801      	subs	r0, #1
  404520:	e7e4      	b.n	4044ec <__udivmoddi4+0x284>
  404522:	4628      	mov	r0, r5
  404524:	e7d7      	b.n	4044d6 <__udivmoddi4+0x26e>
  404526:	4640      	mov	r0, r8
  404528:	e791      	b.n	40444e <__udivmoddi4+0x1e6>
  40452a:	4681      	mov	r9, r0
  40452c:	e7be      	b.n	4044ac <__udivmoddi4+0x244>
  40452e:	4601      	mov	r1, r0
  404530:	e778      	b.n	404424 <__udivmoddi4+0x1bc>
  404532:	3802      	subs	r0, #2
  404534:	443c      	add	r4, r7
  404536:	e745      	b.n	4043c4 <__udivmoddi4+0x15c>
  404538:	4608      	mov	r0, r1
  40453a:	e708      	b.n	40434e <__udivmoddi4+0xe6>
  40453c:	f1a8 0802 	sub.w	r8, r8, #2
  404540:	443d      	add	r5, r7
  404542:	e72b      	b.n	40439c <__udivmoddi4+0x134>

00404544 <__aeabi_idiv0>:
  404544:	4770      	bx	lr
  404546:	bf00      	nop
  404548:	000a6425 	.word	0x000a6425

0040454c <_global_impure_ptr>:
  40454c:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  40455c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40456c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40457c:	0000296c                                l)..

00404580 <blanks.7217>:
  404580:	20202020 20202020 20202020 20202020                     

00404590 <zeroes.7218>:
  404590:	30303030 30303030 30303030 30303030     0000000000000000
  4045a0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004045b0 <_ctype_>:
  4045b0:	20202000 20202020 28282020 20282828     .         ((((( 
  4045c0:	20202020 20202020 20202020 20202020                     
  4045d0:	10108820 10101010 10101010 10101010      ...............
  4045e0:	04040410 04040404 10040404 10101010     ................
  4045f0:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404600:	01010101 01010101 01010101 10101010     ................
  404610:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404620:	02020202 02020202 02020202 10101010     ................
  404630:	00000020 00000000 00000000 00000000      ...............
	...

004046b4 <_init>:
  4046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4046b6:	bf00      	nop
  4046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4046ba:	bc08      	pop	{r3}
  4046bc:	469e      	mov	lr, r3
  4046be:	4770      	bx	lr

004046c0 <__init_array_start>:
  4046c0:	004026c9 	.word	0x004026c9

004046c4 <__frame_dummy_init_array_entry>:
  4046c4:	0040018d                                ..@.

004046c8 <_fini>:
  4046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4046ca:	bf00      	nop
  4046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4046ce:	bc08      	pop	{r3}
  4046d0:	469e      	mov	lr, r3
  4046d2:	4770      	bx	lr

004046d4 <__fini_array_start>:
  4046d4:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <_impure_ptr>:
20400010:	0018 2040 0000 0000                         ..@ ....

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	0b24 2040                                   $.@ 

20400444 <__global_locale>:
20400444:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400464:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400484:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400504:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400524:	3fa1 0040 36c1 0040 0000 0000 45b0 0040     .?@..6@......E@.
20400534:	45ac 0040 4560 0040 4560 0040 4560 0040     .E@.`E@.`E@.`E@.
20400544:	4560 0040 4560 0040 4560 0040 4560 0040     `E@.`E@.`E@.`E@.
20400554:	4560 0040 4560 0040 ffff ffff ffff ffff     `E@.`E@.........
20400564:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040058c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005b0 <__malloc_av_>:
	...
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 

204009b8 <__malloc_sbrk_base>:
204009b8:	ffff ffff                                   ....

204009bc <__malloc_trim_threshold>:
204009bc:	0000 0002                                   ....
